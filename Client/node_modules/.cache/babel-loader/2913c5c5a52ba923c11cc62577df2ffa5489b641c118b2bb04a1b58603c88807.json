{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of an object property of the global object (Math and JSON) as a function\n * @author James Allardice\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst {\n  CALL,\n  CONSTRUCT,\n  ReferenceTracker\n} = require(\"@eslint-community/eslint-utils\");\nconst getPropertyName = require(\"./utils/ast-utils\").getStaticPropertyName;\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst nonCallableGlobals = [\"Atomics\", \"JSON\", \"Math\", \"Reflect\", \"Intl\"];\n\n/**\n * Returns the name of the node to report\n * @param {ASTNode} node A node to report\n * @returns {string} name to report\n */\nfunction getReportNodeName(node) {\n  if (node.type === \"ChainExpression\") {\n    return getReportNodeName(node.expression);\n  }\n  if (node.type === \"MemberExpression\") {\n    return getPropertyName(node);\n  }\n  return node.name;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"Disallow calling global object properties as functions\",\n      recommended: true,\n      url: \"https://eslint.org/docs/latest/rules/no-obj-calls\"\n    },\n    schema: [],\n    messages: {\n      unexpectedCall: \"'{{name}}' is not a function.\",\n      unexpectedRefCall: \"'{{name}}' is reference to '{{ref}}', which is not a function.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.sourceCode;\n    return {\n      Program(node) {\n        const scope = sourceCode.getScope(node);\n        const tracker = new ReferenceTracker(scope);\n        const traceMap = {};\n        for (const g of nonCallableGlobals) {\n          traceMap[g] = {\n            [CALL]: true,\n            [CONSTRUCT]: true\n          };\n        }\n        for (const {\n          node: refNode,\n          path\n        } of tracker.iterateGlobalReferences(traceMap)) {\n          const name = getReportNodeName(refNode.callee);\n          const ref = path[0];\n          const messageId = name === ref ? \"unexpectedCall\" : \"unexpectedRefCall\";\n          context.report({\n            node: refNode,\n            messageId,\n            data: {\n              name,\n              ref\n            }\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["CALL","CONSTRUCT","ReferenceTracker","require","getPropertyName","getStaticPropertyName","nonCallableGlobals","getReportNodeName","node","type","expression","name","module","exports","meta","docs","description","recommended","url","schema","messages","unexpectedCall","unexpectedRefCall","create","context","sourceCode","Program","scope","getScope","tracker","traceMap","g","refNode","path","iterateGlobalReferences","callee","ref","messageId","report","data"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-obj-calls.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag use of an object property of the global object (Math and JSON) as a function\n * @author James Allardice\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst { CALL, CONSTRUCT, ReferenceTracker } = require(\"@eslint-community/eslint-utils\");\nconst getPropertyName = require(\"./utils/ast-utils\").getStaticPropertyName;\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst nonCallableGlobals = [\"Atomics\", \"JSON\", \"Math\", \"Reflect\", \"Intl\"];\n\n/**\n * Returns the name of the node to report\n * @param {ASTNode} node A node to report\n * @returns {string} name to report\n */\nfunction getReportNodeName(node) {\n    if (node.type === \"ChainExpression\") {\n        return getReportNodeName(node.expression);\n    }\n    if (node.type === \"MemberExpression\") {\n        return getPropertyName(node);\n    }\n    return node.name;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"Disallow calling global object properties as functions\",\n            recommended: true,\n            url: \"https://eslint.org/docs/latest/rules/no-obj-calls\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpectedCall: \"'{{name}}' is not a function.\",\n            unexpectedRefCall: \"'{{name}}' is reference to '{{ref}}', which is not a function.\"\n        }\n    },\n\n    create(context) {\n\n        const sourceCode = context.sourceCode;\n\n        return {\n            Program(node) {\n                const scope = sourceCode.getScope(node);\n                const tracker = new ReferenceTracker(scope);\n                const traceMap = {};\n\n                for (const g of nonCallableGlobals) {\n                    traceMap[g] = {\n                        [CALL]: true,\n                        [CONSTRUCT]: true\n                    };\n                }\n\n                for (const { node: refNode, path } of tracker.iterateGlobalReferences(traceMap)) {\n                    const name = getReportNodeName(refNode.callee);\n                    const ref = path[0];\n                    const messageId = name === ref ? \"unexpectedCall\" : \"unexpectedRefCall\";\n\n                    context.report({ node: refNode, messageId, data: { name, ref } });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAM;EAAEA,IAAI;EAAEC,SAAS;EAAEC;AAAiB,CAAC,GAAGC,OAAO,CAAC,gCAAgC,CAAC;AACvF,MAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAmB,CAAC,CAACE,qBAAqB;;AAE1E;AACA;AACA;;AAEA,MAAMC,kBAAkB,GAAG,CAAC,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,CAAC;;AAEzE;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiBA,CAACC,IAAI,EAAE;EAC7B,IAAIA,IAAI,CAACC,IAAI,KAAK,iBAAiB,EAAE;IACjC,OAAOF,iBAAiB,CAACC,IAAI,CAACE,UAAU,CAAC;EAC7C;EACA,IAAIF,IAAI,CAACC,IAAI,KAAK,kBAAkB,EAAE;IAClC,OAAOL,eAAe,CAACI,IAAI,CAAC;EAChC;EACA,OAAOA,IAAI,CAACG,IAAI;AACpB;;AAEA;AACA;AACA;;AAEA;AACAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFL,IAAI,EAAE,SAAS;IAEfM,IAAI,EAAE;MACFC,WAAW,EAAE,wDAAwD;MACrEC,WAAW,EAAE,IAAI;MACjBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,cAAc,EAAE,+BAA+B;MAC/CC,iBAAiB,EAAE;IACvB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ,MAAMC,UAAU,GAAGD,OAAO,CAACC,UAAU;IAErC,OAAO;MACHC,OAAOA,CAAClB,IAAI,EAAE;QACV,MAAMmB,KAAK,GAAGF,UAAU,CAACG,QAAQ,CAACpB,IAAI,CAAC;QACvC,MAAMqB,OAAO,GAAG,IAAI3B,gBAAgB,CAACyB,KAAK,CAAC;QAC3C,MAAMG,QAAQ,GAAG,CAAC,CAAC;QAEnB,KAAK,MAAMC,CAAC,IAAIzB,kBAAkB,EAAE;UAChCwB,QAAQ,CAACC,CAAC,CAAC,GAAG;YACV,CAAC/B,IAAI,GAAG,IAAI;YACZ,CAACC,SAAS,GAAG;UACjB,CAAC;QACL;QAEA,KAAK,MAAM;UAAEO,IAAI,EAAEwB,OAAO;UAAEC;QAAK,CAAC,IAAIJ,OAAO,CAACK,uBAAuB,CAACJ,QAAQ,CAAC,EAAE;UAC7E,MAAMnB,IAAI,GAAGJ,iBAAiB,CAACyB,OAAO,CAACG,MAAM,CAAC;UAC9C,MAAMC,GAAG,GAAGH,IAAI,CAAC,CAAC,CAAC;UACnB,MAAMI,SAAS,GAAG1B,IAAI,KAAKyB,GAAG,GAAG,gBAAgB,GAAG,mBAAmB;UAEvEZ,OAAO,CAACc,MAAM,CAAC;YAAE9B,IAAI,EAAEwB,OAAO;YAAEK,SAAS;YAAEE,IAAI,EAAE;cAAE5B,IAAI;cAAEyB;YAAI;UAAE,CAAC,CAAC;QACrE;MACJ;IACJ,CAAC;EACL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}