{"ast":null,"code":"/**\n * @fileoverview Disallows or enforces spaces inside of array brackets.\n * @author Jamund Ferguson\n * @deprecated in ESLint v8.53.0\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    deprecated: true,\n    replacedBy: [],\n    type: \"layout\",\n    docs: {\n      description: \"Enforce consistent spacing inside array brackets\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/array-bracket-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }, {\n      type: \"object\",\n      properties: {\n        singleValue: {\n          type: \"boolean\"\n        },\n        objectsInArrays: {\n          type: \"boolean\"\n        },\n        arraysInArrays: {\n          type: \"boolean\"\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpectedSpaceAfter: \"There should be no space after '{{tokenValue}}'.\",\n      unexpectedSpaceBefore: \"There should be no space before '{{tokenValue}}'.\",\n      missingSpaceAfter: \"A space is required after '{{tokenValue}}'.\",\n      missingSpaceBefore: \"A space is required before '{{tokenValue}}'.\"\n    }\n  },\n  create(context) {\n    const spaced = context.options[0] === \"always\",\n      sourceCode = context.sourceCode;\n\n    /**\n     * Determines whether an option is set, relative to the spacing option.\n     * If spaced is \"always\", then check whether option is set to false.\n     * If spaced is \"never\", then check whether option is set to true.\n     * @param {Object} option The option to exclude.\n     * @returns {boolean} Whether or not the property is excluded.\n     */\n    function isOptionSet(option) {\n      return context.options[1] ? context.options[1][option] === !spaced : false;\n    }\n    const options = {\n      spaced,\n      singleElementException: isOptionSet(\"singleValue\"),\n      objectsInArraysException: isOptionSet(\"objectsInArrays\"),\n      arraysInArraysException: isOptionSet(\"arraysInArrays\")\n    };\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Reports that there shouldn't be a space after the first token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n    function reportNoBeginningSpace(node, token) {\n      const nextToken = sourceCode.getTokenAfter(token);\n      context.report({\n        node,\n        loc: {\n          start: token.loc.end,\n          end: nextToken.loc.start\n        },\n        messageId: \"unexpectedSpaceAfter\",\n        data: {\n          tokenValue: token.value\n        },\n        fix(fixer) {\n          return fixer.removeRange([token.range[1], nextToken.range[0]]);\n        }\n      });\n    }\n\n    /**\n     * Reports that there shouldn't be a space before the last token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n    function reportNoEndingSpace(node, token) {\n      const previousToken = sourceCode.getTokenBefore(token);\n      context.report({\n        node,\n        loc: {\n          start: previousToken.loc.end,\n          end: token.loc.start\n        },\n        messageId: \"unexpectedSpaceBefore\",\n        data: {\n          tokenValue: token.value\n        },\n        fix(fixer) {\n          return fixer.removeRange([previousToken.range[1], token.range[0]]);\n        }\n      });\n    }\n\n    /**\n     * Reports that there should be a space after the first token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n    function reportRequiredBeginningSpace(node, token) {\n      context.report({\n        node,\n        loc: token.loc,\n        messageId: \"missingSpaceAfter\",\n        data: {\n          tokenValue: token.value\n        },\n        fix(fixer) {\n          return fixer.insertTextAfter(token, \" \");\n        }\n      });\n    }\n\n    /**\n     * Reports that there should be a space before the last token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n    function reportRequiredEndingSpace(node, token) {\n      context.report({\n        node,\n        loc: token.loc,\n        messageId: \"missingSpaceBefore\",\n        data: {\n          tokenValue: token.value\n        },\n        fix(fixer) {\n          return fixer.insertTextBefore(token, \" \");\n        }\n      });\n    }\n\n    /**\n     * Determines if a node is an object type\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} Whether or not the node is an object type.\n     */\n    function isObjectType(node) {\n      return node && (node.type === \"ObjectExpression\" || node.type === \"ObjectPattern\");\n    }\n\n    /**\n     * Determines if a node is an array type\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} Whether or not the node is an array type.\n     */\n    function isArrayType(node) {\n      return node && (node.type === \"ArrayExpression\" || node.type === \"ArrayPattern\");\n    }\n\n    /**\n     * Validates the spacing around array brackets\n     * @param {ASTNode} node The node we're checking for spacing\n     * @returns {void}\n     */\n    function validateArraySpacing(node) {\n      if (options.spaced && node.elements.length === 0) {\n        return;\n      }\n      const first = sourceCode.getFirstToken(node),\n        second = sourceCode.getFirstToken(node, 1),\n        last = node.typeAnnotation ? sourceCode.getTokenBefore(node.typeAnnotation) : sourceCode.getLastToken(node),\n        penultimate = sourceCode.getTokenBefore(last),\n        firstElement = node.elements[0],\n        lastElement = node.elements[node.elements.length - 1];\n      const openingBracketMustBeSpaced = options.objectsInArraysException && isObjectType(firstElement) || options.arraysInArraysException && isArrayType(firstElement) || options.singleElementException && node.elements.length === 1 ? !options.spaced : options.spaced;\n      const closingBracketMustBeSpaced = options.objectsInArraysException && isObjectType(lastElement) || options.arraysInArraysException && isArrayType(lastElement) || options.singleElementException && node.elements.length === 1 ? !options.spaced : options.spaced;\n      if (astUtils.isTokenOnSameLine(first, second)) {\n        if (openingBracketMustBeSpaced && !sourceCode.isSpaceBetweenTokens(first, second)) {\n          reportRequiredBeginningSpace(node, first);\n        }\n        if (!openingBracketMustBeSpaced && sourceCode.isSpaceBetweenTokens(first, second)) {\n          reportNoBeginningSpace(node, first);\n        }\n      }\n      if (first !== penultimate && astUtils.isTokenOnSameLine(penultimate, last)) {\n        if (closingBracketMustBeSpaced && !sourceCode.isSpaceBetweenTokens(penultimate, last)) {\n          reportRequiredEndingSpace(node, last);\n        }\n        if (!closingBracketMustBeSpaced && sourceCode.isSpaceBetweenTokens(penultimate, last)) {\n          reportNoEndingSpace(node, last);\n        }\n      }\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n      ArrayPattern: validateArraySpacing,\n      ArrayExpression: validateArraySpacing\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","deprecated","replacedBy","type","docs","description","recommended","url","fixable","schema","enum","properties","singleValue","objectsInArrays","arraysInArrays","additionalProperties","messages","unexpectedSpaceAfter","unexpectedSpaceBefore","missingSpaceAfter","missingSpaceBefore","create","context","spaced","options","sourceCode","isOptionSet","option","singleElementException","objectsInArraysException","arraysInArraysException","reportNoBeginningSpace","node","token","nextToken","getTokenAfter","report","loc","start","end","messageId","data","tokenValue","value","fix","fixer","removeRange","range","reportNoEndingSpace","previousToken","getTokenBefore","reportRequiredBeginningSpace","insertTextAfter","reportRequiredEndingSpace","insertTextBefore","isObjectType","isArrayType","validateArraySpacing","elements","length","first","getFirstToken","second","last","typeAnnotation","getLastToken","penultimate","firstElement","lastElement","openingBracketMustBeSpaced","closingBracketMustBeSpaced","isTokenOnSameLine","isSpaceBetweenTokens","ArrayPattern","ArrayExpression"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/array-bracket-spacing.js"],"sourcesContent":["/**\n * @fileoverview Disallows or enforces spaces inside of array brackets.\n * @author Jamund Ferguson\n * @deprecated in ESLint v8.53.0\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        deprecated: true,\n        replacedBy: [],\n        type: \"layout\",\n\n        docs: {\n            description: \"Enforce consistent spacing inside array brackets\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/array-bracket-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                enum: [\"always\", \"never\"]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    singleValue: {\n                        type: \"boolean\"\n                    },\n                    objectsInArrays: {\n                        type: \"boolean\"\n                    },\n                    arraysInArrays: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpectedSpaceAfter: \"There should be no space after '{{tokenValue}}'.\",\n            unexpectedSpaceBefore: \"There should be no space before '{{tokenValue}}'.\",\n            missingSpaceAfter: \"A space is required after '{{tokenValue}}'.\",\n            missingSpaceBefore: \"A space is required before '{{tokenValue}}'.\"\n        }\n    },\n    create(context) {\n        const spaced = context.options[0] === \"always\",\n            sourceCode = context.sourceCode;\n\n        /**\n         * Determines whether an option is set, relative to the spacing option.\n         * If spaced is \"always\", then check whether option is set to false.\n         * If spaced is \"never\", then check whether option is set to true.\n         * @param {Object} option The option to exclude.\n         * @returns {boolean} Whether or not the property is excluded.\n         */\n        function isOptionSet(option) {\n            return context.options[1] ? context.options[1][option] === !spaced : false;\n        }\n\n        const options = {\n            spaced,\n            singleElementException: isOptionSet(\"singleValue\"),\n            objectsInArraysException: isOptionSet(\"objectsInArrays\"),\n            arraysInArraysException: isOptionSet(\"arraysInArrays\")\n        };\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Reports that there shouldn't be a space after the first token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportNoBeginningSpace(node, token) {\n            const nextToken = sourceCode.getTokenAfter(token);\n\n            context.report({\n                node,\n                loc: { start: token.loc.end, end: nextToken.loc.start },\n                messageId: \"unexpectedSpaceAfter\",\n                data: {\n                    tokenValue: token.value\n                },\n                fix(fixer) {\n                    return fixer.removeRange([token.range[1], nextToken.range[0]]);\n                }\n            });\n        }\n\n        /**\n         * Reports that there shouldn't be a space before the last token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportNoEndingSpace(node, token) {\n            const previousToken = sourceCode.getTokenBefore(token);\n\n            context.report({\n                node,\n                loc: { start: previousToken.loc.end, end: token.loc.start },\n                messageId: \"unexpectedSpaceBefore\",\n                data: {\n                    tokenValue: token.value\n                },\n                fix(fixer) {\n                    return fixer.removeRange([previousToken.range[1], token.range[0]]);\n                }\n            });\n        }\n\n        /**\n         * Reports that there should be a space after the first token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportRequiredBeginningSpace(node, token) {\n            context.report({\n                node,\n                loc: token.loc,\n                messageId: \"missingSpaceAfter\",\n                data: {\n                    tokenValue: token.value\n                },\n                fix(fixer) {\n                    return fixer.insertTextAfter(token, \" \");\n                }\n            });\n        }\n\n        /**\n         * Reports that there should be a space before the last token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportRequiredEndingSpace(node, token) {\n            context.report({\n                node,\n                loc: token.loc,\n                messageId: \"missingSpaceBefore\",\n                data: {\n                    tokenValue: token.value\n                },\n                fix(fixer) {\n                    return fixer.insertTextBefore(token, \" \");\n                }\n            });\n        }\n\n        /**\n         * Determines if a node is an object type\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} Whether or not the node is an object type.\n         */\n        function isObjectType(node) {\n            return node && (node.type === \"ObjectExpression\" || node.type === \"ObjectPattern\");\n        }\n\n        /**\n         * Determines if a node is an array type\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} Whether or not the node is an array type.\n         */\n        function isArrayType(node) {\n            return node && (node.type === \"ArrayExpression\" || node.type === \"ArrayPattern\");\n        }\n\n        /**\n         * Validates the spacing around array brackets\n         * @param {ASTNode} node The node we're checking for spacing\n         * @returns {void}\n         */\n        function validateArraySpacing(node) {\n            if (options.spaced && node.elements.length === 0) {\n                return;\n            }\n\n            const first = sourceCode.getFirstToken(node),\n                second = sourceCode.getFirstToken(node, 1),\n                last = node.typeAnnotation\n                    ? sourceCode.getTokenBefore(node.typeAnnotation)\n                    : sourceCode.getLastToken(node),\n                penultimate = sourceCode.getTokenBefore(last),\n                firstElement = node.elements[0],\n                lastElement = node.elements[node.elements.length - 1];\n\n            const openingBracketMustBeSpaced =\n                options.objectsInArraysException && isObjectType(firstElement) ||\n                options.arraysInArraysException && isArrayType(firstElement) ||\n                options.singleElementException && node.elements.length === 1\n                    ? !options.spaced : options.spaced;\n\n            const closingBracketMustBeSpaced =\n                options.objectsInArraysException && isObjectType(lastElement) ||\n                options.arraysInArraysException && isArrayType(lastElement) ||\n                options.singleElementException && node.elements.length === 1\n                    ? !options.spaced : options.spaced;\n\n            if (astUtils.isTokenOnSameLine(first, second)) {\n                if (openingBracketMustBeSpaced && !sourceCode.isSpaceBetweenTokens(first, second)) {\n                    reportRequiredBeginningSpace(node, first);\n                }\n                if (!openingBracketMustBeSpaced && sourceCode.isSpaceBetweenTokens(first, second)) {\n                    reportNoBeginningSpace(node, first);\n                }\n            }\n\n            if (first !== penultimate && astUtils.isTokenOnSameLine(penultimate, last)) {\n                if (closingBracketMustBeSpaced && !sourceCode.isSpaceBetweenTokens(penultimate, last)) {\n                    reportRequiredEndingSpace(node, last);\n                }\n                if (!closingBracketMustBeSpaced && sourceCode.isSpaceBetweenTokens(penultimate, last)) {\n                    reportNoEndingSpace(node, last);\n                }\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            ArrayPattern: validateArraySpacing,\n            ArrayExpression: validateArraySpacing\n        };\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}