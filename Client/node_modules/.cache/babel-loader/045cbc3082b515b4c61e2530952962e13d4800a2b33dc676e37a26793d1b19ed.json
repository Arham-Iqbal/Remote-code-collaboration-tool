{"ast":null,"code":"/**\n * @fileoverview Restrict usage of specified globals.\n * @author Benoît Zugmeyer\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow specified global variables\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/no-restricted-globals\"\n    },\n    schema: {\n      type: \"array\",\n      items: {\n        oneOf: [{\n          type: \"string\"\n        }, {\n          type: \"object\",\n          properties: {\n            name: {\n              type: \"string\"\n            },\n            message: {\n              type: \"string\"\n            }\n          },\n          required: [\"name\"],\n          additionalProperties: false\n        }]\n      },\n      uniqueItems: true,\n      minItems: 0\n    },\n    messages: {\n      defaultMessage: \"Unexpected use of '{{name}}'.\",\n      // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period\n      customMessage: \"Unexpected use of '{{name}}'. {{customMessage}}\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.sourceCode;\n\n    // If no globals are restricted, we don't need to do anything\n    if (context.options.length === 0) {\n      return {};\n    }\n    const restrictedGlobalMessages = context.options.reduce((memo, option) => {\n      if (typeof option === \"string\") {\n        memo[option] = null;\n      } else {\n        memo[option.name] = option.message;\n      }\n      return memo;\n    }, {});\n\n    /**\n     * Report a variable to be used as a restricted global.\n     * @param {Reference} reference the variable reference\n     * @returns {void}\n     * @private\n     */\n    function reportReference(reference) {\n      const name = reference.identifier.name,\n        customMessage = restrictedGlobalMessages[name],\n        messageId = customMessage ? \"customMessage\" : \"defaultMessage\";\n      context.report({\n        node: reference.identifier,\n        messageId,\n        data: {\n          name,\n          customMessage\n        }\n      });\n    }\n\n    /**\n     * Check if the given name is a restricted global name.\n     * @param {string} name name of a variable\n     * @returns {boolean} whether the variable is a restricted global or not\n     * @private\n     */\n    function isRestricted(name) {\n      return Object.prototype.hasOwnProperty.call(restrictedGlobalMessages, name);\n    }\n    return {\n      Program(node) {\n        const scope = sourceCode.getScope(node);\n\n        // Report variables declared elsewhere (ex: variables defined as \"global\" by eslint)\n        scope.variables.forEach(variable => {\n          if (!variable.defs.length && isRestricted(variable.name)) {\n            variable.references.forEach(reportReference);\n          }\n        });\n\n        // Report variables not declared at all\n        scope.through.forEach(reference => {\n          if (isRestricted(reference.identifier.name)) {\n            reportReference(reference);\n          }\n        });\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","recommended","url","schema","items","oneOf","properties","name","message","required","additionalProperties","uniqueItems","minItems","messages","defaultMessage","customMessage","create","context","sourceCode","options","length","restrictedGlobalMessages","reduce","memo","option","reportReference","reference","identifier","messageId","report","node","data","isRestricted","Object","prototype","hasOwnProperty","call","Program","scope","getScope","variables","forEach","variable","defs","references","through"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-restricted-globals.js"],"sourcesContent":["/**\n * @fileoverview Restrict usage of specified globals.\n * @author Benoît Zugmeyer\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow specified global variables\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-restricted-globals\"\n        },\n\n        schema: {\n            type: \"array\",\n            items: {\n                oneOf: [\n                    {\n                        type: \"string\"\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            name: { type: \"string\" },\n                            message: { type: \"string\" }\n                        },\n                        required: [\"name\"],\n                        additionalProperties: false\n                    }\n                ]\n            },\n            uniqueItems: true,\n            minItems: 0\n        },\n\n        messages: {\n            defaultMessage: \"Unexpected use of '{{name}}'.\",\n            // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period\n            customMessage: \"Unexpected use of '{{name}}'. {{customMessage}}\"\n        }\n    },\n\n    create(context) {\n\n        const sourceCode = context.sourceCode;\n\n        // If no globals are restricted, we don't need to do anything\n        if (context.options.length === 0) {\n            return {};\n        }\n\n        const restrictedGlobalMessages = context.options.reduce((memo, option) => {\n            if (typeof option === \"string\") {\n                memo[option] = null;\n            } else {\n                memo[option.name] = option.message;\n            }\n\n            return memo;\n        }, {});\n\n        /**\n         * Report a variable to be used as a restricted global.\n         * @param {Reference} reference the variable reference\n         * @returns {void}\n         * @private\n         */\n        function reportReference(reference) {\n            const name = reference.identifier.name,\n                customMessage = restrictedGlobalMessages[name],\n                messageId = customMessage\n                    ? \"customMessage\"\n                    : \"defaultMessage\";\n\n            context.report({\n                node: reference.identifier,\n                messageId,\n                data: {\n                    name,\n                    customMessage\n                }\n            });\n        }\n\n        /**\n         * Check if the given name is a restricted global name.\n         * @param {string} name name of a variable\n         * @returns {boolean} whether the variable is a restricted global or not\n         * @private\n         */\n        function isRestricted(name) {\n            return Object.prototype.hasOwnProperty.call(restrictedGlobalMessages, name);\n        }\n\n        return {\n            Program(node) {\n                const scope = sourceCode.getScope(node);\n\n                // Report variables declared elsewhere (ex: variables defined as \"global\" by eslint)\n                scope.variables.forEach(variable => {\n                    if (!variable.defs.length && isRestricted(variable.name)) {\n                        variable.references.forEach(reportReference);\n                    }\n                });\n\n                // Report variables not declared at all\n                scope.through.forEach(reference => {\n                    if (isRestricted(reference.identifier.name)) {\n                        reportReference(reference);\n                    }\n                });\n\n            }\n        };\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}