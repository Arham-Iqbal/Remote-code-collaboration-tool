{"ast":null,"code":"/**\n * @fileoverview Main CLI object.\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n/*\n * The CLI object should *not* call process.exit() directly. It should only return\n * exit codes. This allows other programs to use the CLI object and still control\n * when the program exits.\n */\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst defaultOptions = require(\"../../conf/default-cli-options\");\nconst pkg = require(\"../../package.json\");\nconst {\n  Legacy: {\n    ConfigOps,\n    naming,\n    CascadingConfigArrayFactory,\n    IgnorePattern,\n    getUsedExtractedConfigs,\n    ModuleResolver\n  }\n} = require(\"@eslint/eslintrc\");\nconst {\n  FileEnumerator\n} = require(\"./file-enumerator\");\nconst {\n  Linter\n} = require(\"../linter\");\nconst builtInRules = require(\"../rules\");\nconst loadRules = require(\"./load-rules\");\nconst hash = require(\"./hash\");\nconst LintResultCache = require(\"./lint-result-cache\");\nconst debug = require(\"debug\")(\"eslint:cli-engine\");\nconst validFixTypes = new Set([\"directive\", \"problem\", \"suggestion\", \"layout\"]);\n\n//------------------------------------------------------------------------------\n// Typedefs\n//------------------------------------------------------------------------------\n\n// For VSCode IntelliSense\n/** @typedef {import(\"../shared/types\").ConfigData} ConfigData */\n/** @typedef {import(\"../shared/types\").DeprecatedRuleInfo} DeprecatedRuleInfo */\n/** @typedef {import(\"../shared/types\").LintMessage} LintMessage */\n/** @typedef {import(\"../shared/types\").SuppressedLintMessage} SuppressedLintMessage */\n/** @typedef {import(\"../shared/types\").ParserOptions} ParserOptions */\n/** @typedef {import(\"../shared/types\").Plugin} Plugin */\n/** @typedef {import(\"../shared/types\").RuleConf} RuleConf */\n/** @typedef {import(\"../shared/types\").Rule} Rule */\n/** @typedef {import(\"../shared/types\").FormatterFunction} FormatterFunction */\n/** @typedef {ReturnType<CascadingConfigArrayFactory.getConfigArrayForFile>} ConfigArray */\n/** @typedef {ReturnType<ConfigArray.extractConfig>} ExtractedConfig */\n\n/**\n * The options to configure a CLI engine with.\n * @typedef {Object} CLIEngineOptions\n * @property {boolean} [allowInlineConfig] Enable or disable inline configuration comments.\n * @property {ConfigData} [baseConfig] Base config object, extended by all configs used with this CLIEngine instance\n * @property {boolean} [cache] Enable result caching.\n * @property {string} [cacheLocation] The cache file to use instead of .eslintcache.\n * @property {string} [configFile] The configuration file to use.\n * @property {string} [cwd] The value to use for the current working directory.\n * @property {string[]} [envs] An array of environments to load.\n * @property {string[]|null} [extensions] An array of file extensions to check.\n * @property {boolean|Function} [fix] Execute in autofix mode. If a function, should return a boolean.\n * @property {string[]} [fixTypes] Array of rule types to apply fixes for.\n * @property {string[]} [globals] An array of global variables to declare.\n * @property {boolean} [ignore] False disables use of .eslintignore.\n * @property {string} [ignorePath] The ignore file to use instead of .eslintignore.\n * @property {string|string[]} [ignorePattern] One or more glob patterns to ignore.\n * @property {boolean} [useEslintrc] False disables looking for .eslintrc\n * @property {string} [parser] The name of the parser to use.\n * @property {ParserOptions} [parserOptions] An object of parserOption settings to use.\n * @property {string[]} [plugins] An array of plugins to load.\n * @property {Record<string,RuleConf>} [rules] An object of rules to use.\n * @property {string[]} [rulePaths] An array of directories to load custom rules from.\n * @property {boolean|string} [reportUnusedDisableDirectives] `true`, `\"error\"` or '\"warn\"' adds reports for unused eslint-disable directives\n * @property {boolean} [globInputPaths] Set to false to skip glob resolution of input file paths to lint (default: true). If false, each input file paths is assumed to be a non-glob path to an existing file.\n * @property {string} [resolvePluginsRelativeTo] The folder where plugins should be resolved from, defaulting to the CWD\n */\n\n/**\n * A linting result.\n * @typedef {Object} LintResult\n * @property {string} filePath The path to the file that was linted.\n * @property {LintMessage[]} messages All of the messages for the result.\n * @property {SuppressedLintMessage[]} suppressedMessages All of the suppressed messages for the result.\n * @property {number} errorCount Number of errors for the result.\n * @property {number} fatalErrorCount Number of fatal errors for the result.\n * @property {number} warningCount Number of warnings for the result.\n * @property {number} fixableErrorCount Number of fixable errors for the result.\n * @property {number} fixableWarningCount Number of fixable warnings for the result.\n * @property {string} [source] The source code of the file that was linted.\n * @property {string} [output] The source code of the file that was linted, with as many fixes applied as possible.\n */\n\n/**\n * Linting results.\n * @typedef {Object} LintReport\n * @property {LintResult[]} results All of the result.\n * @property {number} errorCount Number of errors for the result.\n * @property {number} fatalErrorCount Number of fatal errors for the result.\n * @property {number} warningCount Number of warnings for the result.\n * @property {number} fixableErrorCount Number of fixable errors for the result.\n * @property {number} fixableWarningCount Number of fixable warnings for the result.\n * @property {DeprecatedRuleInfo[]} usedDeprecatedRules The list of used deprecated rules.\n */\n\n/**\n * Private data for CLIEngine.\n * @typedef {Object} CLIEngineInternalSlots\n * @property {Map<string, Plugin>} additionalPluginPool The map for additional plugins.\n * @property {string} cacheFilePath The path to the cache of lint results.\n * @property {CascadingConfigArrayFactory} configArrayFactory The factory of configs.\n * @property {(filePath: string) => boolean} defaultIgnores The default predicate function to check if a file ignored or not.\n * @property {FileEnumerator} fileEnumerator The file enumerator.\n * @property {ConfigArray[]} lastConfigArrays The list of config arrays that the last `executeOnFiles` or `executeOnText` used.\n * @property {LintResultCache|null} lintResultCache The cache of lint results.\n * @property {Linter} linter The linter instance which has loaded rules.\n * @property {CLIEngineOptions} options The normalized options of this instance.\n */\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/** @type {WeakMap<CLIEngine, CLIEngineInternalSlots>} */\nconst internalSlotsMap = new WeakMap();\n\n/**\n * Determines if each fix type in an array is supported by ESLint and throws\n * an error if not.\n * @param {string[]} fixTypes An array of fix types to check.\n * @returns {void}\n * @throws {Error} If an invalid fix type is found.\n */\nfunction validateFixTypes(fixTypes) {\n  for (const fixType of fixTypes) {\n    if (!validFixTypes.has(fixType)) {\n      throw new Error(`Invalid fix type \"${fixType}\" found.`);\n    }\n  }\n}\n\n/**\n * It will calculate the error and warning count for collection of messages per file\n * @param {LintMessage[]} messages Collection of messages\n * @returns {Object} Contains the stats\n * @private\n */\nfunction calculateStatsPerFile(messages) {\n  const stat = {\n    errorCount: 0,\n    fatalErrorCount: 0,\n    warningCount: 0,\n    fixableErrorCount: 0,\n    fixableWarningCount: 0\n  };\n  for (let i = 0; i < messages.length; i++) {\n    const message = messages[i];\n    if (message.fatal || message.severity === 2) {\n      stat.errorCount++;\n      if (message.fatal) {\n        stat.fatalErrorCount++;\n      }\n      if (message.fix) {\n        stat.fixableErrorCount++;\n      }\n    } else {\n      stat.warningCount++;\n      if (message.fix) {\n        stat.fixableWarningCount++;\n      }\n    }\n  }\n  return stat;\n}\n\n/**\n * It will calculate the error and warning count for collection of results from all files\n * @param {LintResult[]} results Collection of messages from all the files\n * @returns {Object} Contains the stats\n * @private\n */\nfunction calculateStatsPerRun(results) {\n  const stat = {\n    errorCount: 0,\n    fatalErrorCount: 0,\n    warningCount: 0,\n    fixableErrorCount: 0,\n    fixableWarningCount: 0\n  };\n  for (let i = 0; i < results.length; i++) {\n    const result = results[i];\n    stat.errorCount += result.errorCount;\n    stat.fatalErrorCount += result.fatalErrorCount;\n    stat.warningCount += result.warningCount;\n    stat.fixableErrorCount += result.fixableErrorCount;\n    stat.fixableWarningCount += result.fixableWarningCount;\n  }\n  return stat;\n}\n\n/**\n * Processes an source code using ESLint.\n * @param {Object} config The config object.\n * @param {string} config.text The source code to verify.\n * @param {string} config.cwd The path to the current working directory.\n * @param {string|undefined} config.filePath The path to the file of `text`. If this is undefined, it uses `<text>`.\n * @param {ConfigArray} config.config The config.\n * @param {boolean} config.fix If `true` then it does fix.\n * @param {boolean} config.allowInlineConfig If `true` then it uses directive comments.\n * @param {boolean|string} config.reportUnusedDisableDirectives If `true`, `\"error\"` or '\"warn\"', then it reports unused `eslint-disable` comments.\n * @param {FileEnumerator} config.fileEnumerator The file enumerator to check if a path is a target or not.\n * @param {Linter} config.linter The linter instance to verify.\n * @returns {LintResult} The result of linting.\n * @private\n */\nfunction verifyText({\n  text,\n  cwd,\n  filePath: providedFilePath,\n  config,\n  fix,\n  allowInlineConfig,\n  reportUnusedDisableDirectives,\n  fileEnumerator,\n  linter\n}) {\n  const filePath = providedFilePath || \"<text>\";\n  debug(`Lint ${filePath}`);\n\n  /*\n   * Verify.\n   * `config.extractConfig(filePath)` requires an absolute path, but `linter`\n   * doesn't know CWD, so it gives `linter` an absolute path always.\n   */\n  const filePathToVerify = filePath === \"<text>\" ? path.join(cwd, filePath) : filePath;\n  const {\n    fixed,\n    messages,\n    output\n  } = linter.verifyAndFix(text, config, {\n    allowInlineConfig,\n    filename: filePathToVerify,\n    fix,\n    reportUnusedDisableDirectives,\n    /**\n     * Check if the linter should adopt a given code block or not.\n     * @param {string} blockFilename The virtual filename of a code block.\n     * @returns {boolean} `true` if the linter should adopt the code block.\n     */\n    filterCodeBlock(blockFilename) {\n      return fileEnumerator.isTargetPath(blockFilename);\n    }\n  });\n\n  // Tweak and return.\n  const result = {\n    filePath,\n    messages,\n    suppressedMessages: linter.getSuppressedMessages(),\n    ...calculateStatsPerFile(messages)\n  };\n  if (fixed) {\n    result.output = output;\n  }\n  if (result.errorCount + result.warningCount > 0 && typeof result.output === \"undefined\") {\n    result.source = text;\n  }\n  return result;\n}\n\n/**\n * Returns result with warning by ignore settings\n * @param {string} filePath File path of checked code\n * @param {string} baseDir Absolute path of base directory\n * @returns {LintResult} Result with single warning\n * @private\n */\nfunction createIgnoreResult(filePath, baseDir) {\n  let message;\n  const isHidden = filePath.split(path.sep).find(segment => /^\\./u.test(segment));\n  const isInNodeModules = baseDir && path.relative(baseDir, filePath).startsWith(\"node_modules\");\n  if (isHidden) {\n    message = \"File ignored by default.  Use a negated ignore pattern (like \\\"--ignore-pattern '!<relative/path/to/filename>'\\\") to override.\";\n  } else if (isInNodeModules) {\n    message = \"File ignored by default. Use \\\"--ignore-pattern '!node_modules/*'\\\" to override.\";\n  } else {\n    message = \"File ignored because of a matching ignore pattern. Use \\\"--no-ignore\\\" to override.\";\n  }\n  return {\n    filePath: path.resolve(filePath),\n    messages: [{\n      ruleId: null,\n      fatal: false,\n      severity: 1,\n      message,\n      nodeType: null\n    }],\n    suppressedMessages: [],\n    errorCount: 0,\n    fatalErrorCount: 0,\n    warningCount: 1,\n    fixableErrorCount: 0,\n    fixableWarningCount: 0\n  };\n}\n\n/**\n * Get a rule.\n * @param {string} ruleId The rule ID to get.\n * @param {ConfigArray[]} configArrays The config arrays that have plugin rules.\n * @returns {Rule|null} The rule or null.\n */\nfunction getRule(ruleId, configArrays) {\n  for (const configArray of configArrays) {\n    const rule = configArray.pluginRules.get(ruleId);\n    if (rule) {\n      return rule;\n    }\n  }\n  return builtInRules.get(ruleId) || null;\n}\n\n/**\n * Checks whether a message's rule type should be fixed.\n * @param {LintMessage} message The message to check.\n * @param {ConfigArray[]} lastConfigArrays The list of config arrays that the last `executeOnFiles` or `executeOnText` used.\n * @param {string[]} fixTypes An array of fix types to check.\n * @returns {boolean} Whether the message should be fixed.\n */\nfunction shouldMessageBeFixed(message, lastConfigArrays, fixTypes) {\n  if (!message.ruleId) {\n    return fixTypes.has(\"directive\");\n  }\n  const rule = message.ruleId && getRule(message.ruleId, lastConfigArrays);\n  return Boolean(rule && rule.meta && fixTypes.has(rule.meta.type));\n}\n\n/**\n * Collect used deprecated rules.\n * @param {ConfigArray[]} usedConfigArrays The config arrays which were used.\n * @returns {IterableIterator<DeprecatedRuleInfo>} Used deprecated rules.\n */\nfunction* iterateRuleDeprecationWarnings(usedConfigArrays) {\n  const processedRuleIds = new Set();\n\n  // Flatten used configs.\n  /** @type {ExtractedConfig[]} */\n  const configs = usedConfigArrays.flatMap(getUsedExtractedConfigs);\n\n  // Traverse rule configs.\n  for (const config of configs) {\n    for (const [ruleId, ruleConfig] of Object.entries(config.rules)) {\n      // Skip if it was processed.\n      if (processedRuleIds.has(ruleId)) {\n        continue;\n      }\n      processedRuleIds.add(ruleId);\n\n      // Skip if it's not used.\n      if (!ConfigOps.getRuleSeverity(ruleConfig)) {\n        continue;\n      }\n      const rule = getRule(ruleId, usedConfigArrays);\n\n      // Skip if it's not deprecated.\n      if (!(rule && rule.meta && rule.meta.deprecated)) {\n        continue;\n      }\n\n      // This rule was used and deprecated.\n      yield {\n        ruleId,\n        replacedBy: rule.meta.replacedBy || []\n      };\n    }\n  }\n}\n\n/**\n * Checks if the given message is an error message.\n * @param {LintMessage} message The message to check.\n * @returns {boolean} Whether or not the message is an error message.\n * @private\n */\nfunction isErrorMessage(message) {\n  return message.severity === 2;\n}\n\n/**\n * return the cacheFile to be used by eslint, based on whether the provided parameter is\n * a directory or looks like a directory (ends in `path.sep`), in which case the file\n * name will be the `cacheFile/.cache_hashOfCWD`\n *\n * if cacheFile points to a file or looks like a file then it will just use that file\n * @param {string} cacheFile The name of file to be used to store the cache\n * @param {string} cwd Current working directory\n * @returns {string} the resolved path to the cache file\n */\nfunction getCacheFile(cacheFile, cwd) {\n  /*\n   * make sure the path separators are normalized for the environment/os\n   * keeping the trailing path separator if present\n   */\n  const normalizedCacheFile = path.normalize(cacheFile);\n  const resolvedCacheFile = path.resolve(cwd, normalizedCacheFile);\n  const looksLikeADirectory = normalizedCacheFile.slice(-1) === path.sep;\n\n  /**\n   * return the name for the cache file in case the provided parameter is a directory\n   * @returns {string} the resolved path to the cacheFile\n   */\n  function getCacheFileForDirectory() {\n    return path.join(resolvedCacheFile, `.cache_${hash(cwd)}`);\n  }\n  let fileStats;\n  try {\n    fileStats = fs.lstatSync(resolvedCacheFile);\n  } catch {\n    fileStats = null;\n  }\n\n  /*\n   * in case the file exists we need to verify if the provided path\n   * is a directory or a file. If it is a directory we want to create a file\n   * inside that directory\n   */\n  if (fileStats) {\n    /*\n     * is a directory or is a file, but the original file the user provided\n     * looks like a directory but `path.resolve` removed the `last path.sep`\n     * so we need to still treat this like a directory\n     */\n    if (fileStats.isDirectory() || looksLikeADirectory) {\n      return getCacheFileForDirectory();\n    }\n\n    // is file so just use that file\n    return resolvedCacheFile;\n  }\n\n  /*\n   * here we known the file or directory doesn't exist,\n   * so we will try to infer if its a directory if it looks like a directory\n   * for the current operating system.\n   */\n\n  // if the last character passed is a path separator we assume is a directory\n  if (looksLikeADirectory) {\n    return getCacheFileForDirectory();\n  }\n  return resolvedCacheFile;\n}\n\n/**\n * Convert a string array to a boolean map.\n * @param {string[]|null} keys The keys to assign true.\n * @param {boolean} defaultValue The default value for each property.\n * @param {string} displayName The property name which is used in error message.\n * @throws {Error} Requires array.\n * @returns {Record<string,boolean>} The boolean map.\n */\nfunction toBooleanMap(keys, defaultValue, displayName) {\n  if (keys && !Array.isArray(keys)) {\n    throw new Error(`${displayName} must be an array.`);\n  }\n  if (keys && keys.length > 0) {\n    return keys.reduce((map, def) => {\n      const [key, value] = def.split(\":\");\n      if (key !== \"__proto__\") {\n        map[key] = value === void 0 ? defaultValue : value === \"true\";\n      }\n      return map;\n    }, {});\n  }\n  return void 0;\n}\n\n/**\n * Create a config data from CLI options.\n * @param {CLIEngineOptions} options The options\n * @returns {ConfigData|null} The created config data.\n */\nfunction createConfigDataFromOptions(options) {\n  const {\n    ignorePattern,\n    parser,\n    parserOptions,\n    plugins,\n    rules\n  } = options;\n  const env = toBooleanMap(options.envs, true, \"envs\");\n  const globals = toBooleanMap(options.globals, false, \"globals\");\n  if (env === void 0 && globals === void 0 && (ignorePattern === void 0 || ignorePattern.length === 0) && parser === void 0 && parserOptions === void 0 && plugins === void 0 && rules === void 0) {\n    return null;\n  }\n  return {\n    env,\n    globals,\n    ignorePatterns: ignorePattern,\n    parser,\n    parserOptions,\n    plugins,\n    rules\n  };\n}\n\n/**\n * Checks whether a directory exists at the given location\n * @param {string} resolvedPath A path from the CWD\n * @throws {Error} As thrown by `fs.statSync` or `fs.isDirectory`.\n * @returns {boolean} `true` if a directory exists\n */\nfunction directoryExists(resolvedPath) {\n  try {\n    return fs.statSync(resolvedPath).isDirectory();\n  } catch (error) {\n    if (error && (error.code === \"ENOENT\" || error.code === \"ENOTDIR\")) {\n      return false;\n    }\n    throw error;\n  }\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Core CLI.\n */\nclass CLIEngine {\n  /**\n   * Creates a new instance of the core CLI engine.\n   * @param {CLIEngineOptions} providedOptions The options for this instance.\n   * @param {Object} [additionalData] Additional settings that are not CLIEngineOptions.\n   * @param {Record<string,Plugin>|null} [additionalData.preloadedPlugins] Preloaded plugins.\n   */\n  constructor(providedOptions, {\n    preloadedPlugins\n  } = {}) {\n    const options = Object.assign(Object.create(null), defaultOptions, {\n      cwd: process.cwd()\n    }, providedOptions);\n    if (options.fix === void 0) {\n      options.fix = false;\n    }\n    const additionalPluginPool = new Map();\n    if (preloadedPlugins) {\n      for (const [id, plugin] of Object.entries(preloadedPlugins)) {\n        additionalPluginPool.set(id, plugin);\n      }\n    }\n    const cacheFilePath = getCacheFile(options.cacheLocation || options.cacheFile, options.cwd);\n    const configArrayFactory = new CascadingConfigArrayFactory({\n      additionalPluginPool,\n      baseConfig: options.baseConfig || null,\n      cliConfig: createConfigDataFromOptions(options),\n      cwd: options.cwd,\n      ignorePath: options.ignorePath,\n      resolvePluginsRelativeTo: options.resolvePluginsRelativeTo,\n      rulePaths: options.rulePaths,\n      specificConfigPath: options.configFile,\n      useEslintrc: options.useEslintrc,\n      builtInRules,\n      loadRules,\n      getEslintRecommendedConfig: () => require(\"@eslint/js\").configs.recommended,\n      getEslintAllConfig: () => require(\"@eslint/js\").configs.all\n    });\n    const fileEnumerator = new FileEnumerator({\n      configArrayFactory,\n      cwd: options.cwd,\n      extensions: options.extensions,\n      globInputPaths: options.globInputPaths,\n      errorOnUnmatchedPattern: options.errorOnUnmatchedPattern,\n      ignore: options.ignore\n    });\n    const lintResultCache = options.cache ? new LintResultCache(cacheFilePath, options.cacheStrategy) : null;\n    const linter = new Linter({\n      cwd: options.cwd\n    });\n\n    /** @type {ConfigArray[]} */\n    const lastConfigArrays = [configArrayFactory.getConfigArrayForFile()];\n\n    // Store private data.\n    internalSlotsMap.set(this, {\n      additionalPluginPool,\n      cacheFilePath,\n      configArrayFactory,\n      defaultIgnores: IgnorePattern.createDefaultIgnore(options.cwd),\n      fileEnumerator,\n      lastConfigArrays,\n      lintResultCache,\n      linter,\n      options\n    });\n\n    // setup special filter for fixes\n    if (options.fix && options.fixTypes && options.fixTypes.length > 0) {\n      debug(`Using fix types ${options.fixTypes}`);\n\n      // throw an error if any invalid fix types are found\n      validateFixTypes(options.fixTypes);\n\n      // convert to Set for faster lookup\n      const fixTypes = new Set(options.fixTypes);\n\n      // save original value of options.fix in case it's a function\n      const originalFix = typeof options.fix === \"function\" ? options.fix : () => true;\n      options.fix = message => shouldMessageBeFixed(message, lastConfigArrays, fixTypes) && originalFix(message);\n    }\n  }\n  getRules() {\n    const {\n      lastConfigArrays\n    } = internalSlotsMap.get(this);\n    return new Map(function* () {\n      yield* builtInRules;\n      for (const configArray of lastConfigArrays) {\n        yield* configArray.pluginRules;\n      }\n    }());\n  }\n\n  /**\n   * Returns results that only contains errors.\n   * @param {LintResult[]} results The results to filter.\n   * @returns {LintResult[]} The filtered results.\n   */\n  static getErrorResults(results) {\n    const filtered = [];\n    results.forEach(result => {\n      const filteredMessages = result.messages.filter(isErrorMessage);\n      const filteredSuppressedMessages = result.suppressedMessages.filter(isErrorMessage);\n      if (filteredMessages.length > 0) {\n        filtered.push({\n          ...result,\n          messages: filteredMessages,\n          suppressedMessages: filteredSuppressedMessages,\n          errorCount: filteredMessages.length,\n          warningCount: 0,\n          fixableErrorCount: result.fixableErrorCount,\n          fixableWarningCount: 0\n        });\n      }\n    });\n    return filtered;\n  }\n\n  /**\n   * Outputs fixes from the given results to files.\n   * @param {LintReport} report The report object created by CLIEngine.\n   * @returns {void}\n   */\n  static outputFixes(report) {\n    report.results.filter(result => Object.prototype.hasOwnProperty.call(result, \"output\")).forEach(result => {\n      fs.writeFileSync(result.filePath, result.output);\n    });\n  }\n\n  /**\n   * Resolves the patterns passed into executeOnFiles() into glob-based patterns\n   * for easier handling.\n   * @param {string[]} patterns The file patterns passed on the command line.\n   * @returns {string[]} The equivalent glob patterns.\n   */\n  resolveFileGlobPatterns(patterns) {\n    const {\n      options\n    } = internalSlotsMap.get(this);\n    if (options.globInputPaths === false) {\n      return patterns.filter(Boolean);\n    }\n    const extensions = (options.extensions || [\".js\"]).map(ext => ext.replace(/^\\./u, \"\"));\n    const dirSuffix = `/**/*.{${extensions.join(\",\")}}`;\n    return patterns.filter(Boolean).map(pathname => {\n      const resolvedPath = path.resolve(options.cwd, pathname);\n      const newPath = directoryExists(resolvedPath) ? pathname.replace(/[/\\\\]$/u, \"\") + dirSuffix : pathname;\n      return path.normalize(newPath).replace(/\\\\/gu, \"/\");\n    });\n  }\n\n  /**\n   * Executes the current configuration on an array of file and directory names.\n   * @param {string[]} patterns An array of file and directory names.\n   * @throws {Error} As may be thrown by `fs.unlinkSync`.\n   * @returns {LintReport} The results for all files that were linted.\n   */\n  executeOnFiles(patterns) {\n    const {\n      cacheFilePath,\n      fileEnumerator,\n      lastConfigArrays,\n      lintResultCache,\n      linter,\n      options: {\n        allowInlineConfig,\n        cache,\n        cwd,\n        fix,\n        reportUnusedDisableDirectives\n      }\n    } = internalSlotsMap.get(this);\n    const results = [];\n    const startTime = Date.now();\n\n    // Clear the last used config arrays.\n    lastConfigArrays.length = 0;\n\n    // Delete cache file; should this do here?\n    if (!cache) {\n      try {\n        fs.unlinkSync(cacheFilePath);\n      } catch (error) {\n        const errorCode = error && error.code;\n\n        // Ignore errors when no such file exists or file system is read only (and cache file does not exist)\n        if (errorCode !== \"ENOENT\" && !(errorCode === \"EROFS\" && !fs.existsSync(cacheFilePath))) {\n          throw error;\n        }\n      }\n    }\n\n    // Iterate source code files.\n    for (const {\n      config,\n      filePath,\n      ignored\n    } of fileEnumerator.iterateFiles(patterns)) {\n      if (ignored) {\n        results.push(createIgnoreResult(filePath, cwd));\n        continue;\n      }\n\n      /*\n       * Store used configs for:\n       * - this method uses to collect used deprecated rules.\n       * - `getRules()` method uses to collect all loaded rules.\n       * - `--fix-type` option uses to get the loaded rule's meta data.\n       */\n      if (!lastConfigArrays.includes(config)) {\n        lastConfigArrays.push(config);\n      }\n\n      // Skip if there is cached result.\n      if (lintResultCache) {\n        const cachedResult = lintResultCache.getCachedLintResults(filePath, config);\n        if (cachedResult) {\n          const hadMessages = cachedResult.messages && cachedResult.messages.length > 0;\n          if (hadMessages && fix) {\n            debug(`Reprocessing cached file to allow autofix: ${filePath}`);\n          } else {\n            debug(`Skipping file since it hasn't changed: ${filePath}`);\n            results.push(cachedResult);\n            continue;\n          }\n        }\n      }\n\n      // Do lint.\n      const result = verifyText({\n        text: fs.readFileSync(filePath, \"utf8\"),\n        filePath,\n        config,\n        cwd,\n        fix,\n        allowInlineConfig,\n        reportUnusedDisableDirectives,\n        fileEnumerator,\n        linter\n      });\n      results.push(result);\n\n      /*\n       * Store the lint result in the LintResultCache.\n       * NOTE: The LintResultCache will remove the file source and any\n       * other properties that are difficult to serialize, and will\n       * hydrate those properties back in on future lint runs.\n       */\n      if (lintResultCache) {\n        lintResultCache.setCachedLintResults(filePath, config, result);\n      }\n    }\n\n    // Persist the cache to disk.\n    if (lintResultCache) {\n      lintResultCache.reconcile();\n    }\n    debug(`Linting complete in: ${Date.now() - startTime}ms`);\n    let usedDeprecatedRules;\n    return {\n      results,\n      ...calculateStatsPerRun(results),\n      // Initialize it lazily because CLI and `ESLint` API don't use it.\n      get usedDeprecatedRules() {\n        if (!usedDeprecatedRules) {\n          usedDeprecatedRules = Array.from(iterateRuleDeprecationWarnings(lastConfigArrays));\n        }\n        return usedDeprecatedRules;\n      }\n    };\n  }\n\n  /**\n   * Executes the current configuration on text.\n   * @param {string} text A string of JavaScript code to lint.\n   * @param {string} [filename] An optional string representing the texts filename.\n   * @param {boolean} [warnIgnored] Always warn when a file is ignored\n   * @returns {LintReport} The results for the linting.\n   */\n  executeOnText(text, filename, warnIgnored) {\n    const {\n      configArrayFactory,\n      fileEnumerator,\n      lastConfigArrays,\n      linter,\n      options: {\n        allowInlineConfig,\n        cwd,\n        fix,\n        reportUnusedDisableDirectives\n      }\n    } = internalSlotsMap.get(this);\n    const results = [];\n    const startTime = Date.now();\n    const resolvedFilename = filename && path.resolve(cwd, filename);\n\n    // Clear the last used config arrays.\n    lastConfigArrays.length = 0;\n    if (resolvedFilename && this.isPathIgnored(resolvedFilename)) {\n      if (warnIgnored) {\n        results.push(createIgnoreResult(resolvedFilename, cwd));\n      }\n    } else {\n      const config = configArrayFactory.getConfigArrayForFile(resolvedFilename || \"__placeholder__.js\");\n\n      /*\n       * Store used configs for:\n       * - this method uses to collect used deprecated rules.\n       * - `getRules()` method uses to collect all loaded rules.\n       * - `--fix-type` option uses to get the loaded rule's meta data.\n       */\n      lastConfigArrays.push(config);\n\n      // Do lint.\n      results.push(verifyText({\n        text,\n        filePath: resolvedFilename,\n        config,\n        cwd,\n        fix,\n        allowInlineConfig,\n        reportUnusedDisableDirectives,\n        fileEnumerator,\n        linter\n      }));\n    }\n    debug(`Linting complete in: ${Date.now() - startTime}ms`);\n    let usedDeprecatedRules;\n    return {\n      results,\n      ...calculateStatsPerRun(results),\n      // Initialize it lazily because CLI and `ESLint` API don't use it.\n      get usedDeprecatedRules() {\n        if (!usedDeprecatedRules) {\n          usedDeprecatedRules = Array.from(iterateRuleDeprecationWarnings(lastConfigArrays));\n        }\n        return usedDeprecatedRules;\n      }\n    };\n  }\n\n  /**\n   * Returns a configuration object for the given file based on the CLI options.\n   * This is the same logic used by the ESLint CLI executable to determine\n   * configuration for each file it processes.\n   * @param {string} filePath The path of the file to retrieve a config object for.\n   * @throws {Error} If filepath a directory path.\n   * @returns {ConfigData} A configuration object for the file.\n   */\n  getConfigForFile(filePath) {\n    const {\n      configArrayFactory,\n      options\n    } = internalSlotsMap.get(this);\n    const absolutePath = path.resolve(options.cwd, filePath);\n    if (directoryExists(absolutePath)) {\n      throw Object.assign(new Error(\"'filePath' should not be a directory path.\"), {\n        messageTemplate: \"print-config-with-directory-path\"\n      });\n    }\n    return configArrayFactory.getConfigArrayForFile(absolutePath).extractConfig(absolutePath).toCompatibleObjectAsConfigFileContent();\n  }\n\n  /**\n   * Checks if a given path is ignored by ESLint.\n   * @param {string} filePath The path of the file to check.\n   * @returns {boolean} Whether or not the given path is ignored.\n   */\n  isPathIgnored(filePath) {\n    const {\n      configArrayFactory,\n      defaultIgnores,\n      options: {\n        cwd,\n        ignore\n      }\n    } = internalSlotsMap.get(this);\n    const absolutePath = path.resolve(cwd, filePath);\n    if (ignore) {\n      const config = configArrayFactory.getConfigArrayForFile(absolutePath).extractConfig(absolutePath);\n      const ignores = config.ignores || defaultIgnores;\n      return ignores(absolutePath);\n    }\n    return defaultIgnores(absolutePath);\n  }\n\n  /**\n   * Returns the formatter representing the given format or null if the `format` is not a string.\n   * @param {string} [format] The name of the format to load or the path to a\n   *      custom formatter.\n   * @throws {any} As may be thrown by requiring of formatter\n   * @returns {(FormatterFunction|null)} The formatter function or null if the `format` is not a string.\n   */\n  getFormatter(format) {\n    // default is stylish\n    const resolvedFormatName = format || \"stylish\";\n\n    // only strings are valid formatters\n    if (typeof resolvedFormatName === \"string\") {\n      // replace \\ with / for Windows compatibility\n      const normalizedFormatName = resolvedFormatName.replace(/\\\\/gu, \"/\");\n      const slots = internalSlotsMap.get(this);\n      const cwd = slots ? slots.options.cwd : process.cwd();\n      const namespace = naming.getNamespaceFromTerm(normalizedFormatName);\n      let formatterPath;\n\n      // if there's a slash, then it's a file (TODO: this check seems dubious for scoped npm packages)\n      if (!namespace && normalizedFormatName.includes(\"/\")) {\n        formatterPath = path.resolve(cwd, normalizedFormatName);\n      } else {\n        try {\n          const npmFormat = naming.normalizePackageName(normalizedFormatName, \"eslint-formatter\");\n          formatterPath = ModuleResolver.resolve(npmFormat, path.join(cwd, \"__placeholder__.js\"));\n        } catch {\n          formatterPath = path.resolve(__dirname, \"formatters\", normalizedFormatName);\n        }\n      }\n      try {\n        return require(formatterPath);\n      } catch (ex) {\n        if (format === \"table\" || format === \"codeframe\") {\n          ex.message = `The ${format} formatter is no longer part of core ESLint. Install it manually with \\`npm install -D eslint-formatter-${format}\\``;\n        } else {\n          ex.message = `There was a problem loading formatter: ${formatterPath}\\nError: ${ex.message}`;\n        }\n        throw ex;\n      }\n    } else {\n      return null;\n    }\n  }\n}\nCLIEngine.version = pkg.version;\nCLIEngine.getFormatter = CLIEngine.prototype.getFormatter;\nmodule.exports = {\n  CLIEngine,\n  /**\n   * Get the internal slots of a given CLIEngine instance for tests.\n   * @param {CLIEngine} instance The CLIEngine instance to get.\n   * @returns {CLIEngineInternalSlots} The internal slots.\n   */\n  getCLIEngineInternalSlots(instance) {\n    return internalSlotsMap.get(instance);\n  }\n};","map":{"version":3,"names":["fs","require","path","defaultOptions","pkg","Legacy","ConfigOps","naming","CascadingConfigArrayFactory","IgnorePattern","getUsedExtractedConfigs","ModuleResolver","FileEnumerator","Linter","builtInRules","loadRules","hash","LintResultCache","debug","validFixTypes","Set","internalSlotsMap","WeakMap","validateFixTypes","fixTypes","fixType","has","Error","calculateStatsPerFile","messages","stat","errorCount","fatalErrorCount","warningCount","fixableErrorCount","fixableWarningCount","i","length","message","fatal","severity","fix","calculateStatsPerRun","results","result","verifyText","text","cwd","filePath","providedFilePath","config","allowInlineConfig","reportUnusedDisableDirectives","fileEnumerator","linter","filePathToVerify","join","fixed","output","verifyAndFix","filename","filterCodeBlock","blockFilename","isTargetPath","suppressedMessages","getSuppressedMessages","source","createIgnoreResult","baseDir","isHidden","split","sep","find","segment","test","isInNodeModules","relative","startsWith","resolve","ruleId","nodeType","getRule","configArrays","configArray","rule","pluginRules","get","shouldMessageBeFixed","lastConfigArrays","Boolean","meta","type","iterateRuleDeprecationWarnings","usedConfigArrays","processedRuleIds","configs","flatMap","ruleConfig","Object","entries","rules","add","getRuleSeverity","deprecated","replacedBy","isErrorMessage","getCacheFile","cacheFile","normalizedCacheFile","normalize","resolvedCacheFile","looksLikeADirectory","slice","getCacheFileForDirectory","fileStats","lstatSync","isDirectory","toBooleanMap","keys","defaultValue","displayName","Array","isArray","reduce","map","def","key","value","createConfigDataFromOptions","options","ignorePattern","parser","parserOptions","plugins","env","envs","globals","ignorePatterns","directoryExists","resolvedPath","statSync","error","code","CLIEngine","constructor","providedOptions","preloadedPlugins","assign","create","process","additionalPluginPool","Map","id","plugin","set","cacheFilePath","cacheLocation","configArrayFactory","baseConfig","cliConfig","ignorePath","resolvePluginsRelativeTo","rulePaths","specificConfigPath","configFile","useEslintrc","getEslintRecommendedConfig","recommended","getEslintAllConfig","all","extensions","globInputPaths","errorOnUnmatchedPattern","ignore","lintResultCache","cache","cacheStrategy","getConfigArrayForFile","defaultIgnores","createDefaultIgnore","originalFix","getRules","getErrorResults","filtered","forEach","filteredMessages","filter","filteredSuppressedMessages","push","outputFixes","report","prototype","hasOwnProperty","call","writeFileSync","resolveFileGlobPatterns","patterns","ext","replace","dirSuffix","pathname","newPath","executeOnFiles","startTime","Date","now","unlinkSync","errorCode","existsSync","ignored","iterateFiles","includes","cachedResult","getCachedLintResults","hadMessages","readFileSync","setCachedLintResults","reconcile","usedDeprecatedRules","from","executeOnText","warnIgnored","resolvedFilename","isPathIgnored","getConfigForFile","absolutePath","messageTemplate","extractConfig","toCompatibleObjectAsConfigFileContent","ignores","getFormatter","format","resolvedFormatName","normalizedFormatName","slots","namespace","getNamespaceFromTerm","formatterPath","npmFormat","normalizePackageName","__dirname","ex","version","module","exports","getCLIEngineInternalSlots","instance"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/cli-engine/cli-engine.js"],"sourcesContent":["/**\n * @fileoverview Main CLI object.\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n/*\n * The CLI object should *not* call process.exit() directly. It should only return\n * exit codes. This allows other programs to use the CLI object and still control\n * when the program exits.\n */\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst defaultOptions = require(\"../../conf/default-cli-options\");\nconst pkg = require(\"../../package.json\");\n\n\nconst {\n    Legacy: {\n        ConfigOps,\n        naming,\n        CascadingConfigArrayFactory,\n        IgnorePattern,\n        getUsedExtractedConfigs,\n        ModuleResolver\n    }\n} = require(\"@eslint/eslintrc\");\n\nconst { FileEnumerator } = require(\"./file-enumerator\");\n\nconst { Linter } = require(\"../linter\");\nconst builtInRules = require(\"../rules\");\nconst loadRules = require(\"./load-rules\");\nconst hash = require(\"./hash\");\nconst LintResultCache = require(\"./lint-result-cache\");\n\nconst debug = require(\"debug\")(\"eslint:cli-engine\");\nconst validFixTypes = new Set([\"directive\", \"problem\", \"suggestion\", \"layout\"]);\n\n//------------------------------------------------------------------------------\n// Typedefs\n//------------------------------------------------------------------------------\n\n// For VSCode IntelliSense\n/** @typedef {import(\"../shared/types\").ConfigData} ConfigData */\n/** @typedef {import(\"../shared/types\").DeprecatedRuleInfo} DeprecatedRuleInfo */\n/** @typedef {import(\"../shared/types\").LintMessage} LintMessage */\n/** @typedef {import(\"../shared/types\").SuppressedLintMessage} SuppressedLintMessage */\n/** @typedef {import(\"../shared/types\").ParserOptions} ParserOptions */\n/** @typedef {import(\"../shared/types\").Plugin} Plugin */\n/** @typedef {import(\"../shared/types\").RuleConf} RuleConf */\n/** @typedef {import(\"../shared/types\").Rule} Rule */\n/** @typedef {import(\"../shared/types\").FormatterFunction} FormatterFunction */\n/** @typedef {ReturnType<CascadingConfigArrayFactory.getConfigArrayForFile>} ConfigArray */\n/** @typedef {ReturnType<ConfigArray.extractConfig>} ExtractedConfig */\n\n/**\n * The options to configure a CLI engine with.\n * @typedef {Object} CLIEngineOptions\n * @property {boolean} [allowInlineConfig] Enable or disable inline configuration comments.\n * @property {ConfigData} [baseConfig] Base config object, extended by all configs used with this CLIEngine instance\n * @property {boolean} [cache] Enable result caching.\n * @property {string} [cacheLocation] The cache file to use instead of .eslintcache.\n * @property {string} [configFile] The configuration file to use.\n * @property {string} [cwd] The value to use for the current working directory.\n * @property {string[]} [envs] An array of environments to load.\n * @property {string[]|null} [extensions] An array of file extensions to check.\n * @property {boolean|Function} [fix] Execute in autofix mode. If a function, should return a boolean.\n * @property {string[]} [fixTypes] Array of rule types to apply fixes for.\n * @property {string[]} [globals] An array of global variables to declare.\n * @property {boolean} [ignore] False disables use of .eslintignore.\n * @property {string} [ignorePath] The ignore file to use instead of .eslintignore.\n * @property {string|string[]} [ignorePattern] One or more glob patterns to ignore.\n * @property {boolean} [useEslintrc] False disables looking for .eslintrc\n * @property {string} [parser] The name of the parser to use.\n * @property {ParserOptions} [parserOptions] An object of parserOption settings to use.\n * @property {string[]} [plugins] An array of plugins to load.\n * @property {Record<string,RuleConf>} [rules] An object of rules to use.\n * @property {string[]} [rulePaths] An array of directories to load custom rules from.\n * @property {boolean|string} [reportUnusedDisableDirectives] `true`, `\"error\"` or '\"warn\"' adds reports for unused eslint-disable directives\n * @property {boolean} [globInputPaths] Set to false to skip glob resolution of input file paths to lint (default: true). If false, each input file paths is assumed to be a non-glob path to an existing file.\n * @property {string} [resolvePluginsRelativeTo] The folder where plugins should be resolved from, defaulting to the CWD\n */\n\n/**\n * A linting result.\n * @typedef {Object} LintResult\n * @property {string} filePath The path to the file that was linted.\n * @property {LintMessage[]} messages All of the messages for the result.\n * @property {SuppressedLintMessage[]} suppressedMessages All of the suppressed messages for the result.\n * @property {number} errorCount Number of errors for the result.\n * @property {number} fatalErrorCount Number of fatal errors for the result.\n * @property {number} warningCount Number of warnings for the result.\n * @property {number} fixableErrorCount Number of fixable errors for the result.\n * @property {number} fixableWarningCount Number of fixable warnings for the result.\n * @property {string} [source] The source code of the file that was linted.\n * @property {string} [output] The source code of the file that was linted, with as many fixes applied as possible.\n */\n\n/**\n * Linting results.\n * @typedef {Object} LintReport\n * @property {LintResult[]} results All of the result.\n * @property {number} errorCount Number of errors for the result.\n * @property {number} fatalErrorCount Number of fatal errors for the result.\n * @property {number} warningCount Number of warnings for the result.\n * @property {number} fixableErrorCount Number of fixable errors for the result.\n * @property {number} fixableWarningCount Number of fixable warnings for the result.\n * @property {DeprecatedRuleInfo[]} usedDeprecatedRules The list of used deprecated rules.\n */\n\n/**\n * Private data for CLIEngine.\n * @typedef {Object} CLIEngineInternalSlots\n * @property {Map<string, Plugin>} additionalPluginPool The map for additional plugins.\n * @property {string} cacheFilePath The path to the cache of lint results.\n * @property {CascadingConfigArrayFactory} configArrayFactory The factory of configs.\n * @property {(filePath: string) => boolean} defaultIgnores The default predicate function to check if a file ignored or not.\n * @property {FileEnumerator} fileEnumerator The file enumerator.\n * @property {ConfigArray[]} lastConfigArrays The list of config arrays that the last `executeOnFiles` or `executeOnText` used.\n * @property {LintResultCache|null} lintResultCache The cache of lint results.\n * @property {Linter} linter The linter instance which has loaded rules.\n * @property {CLIEngineOptions} options The normalized options of this instance.\n */\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/** @type {WeakMap<CLIEngine, CLIEngineInternalSlots>} */\nconst internalSlotsMap = new WeakMap();\n\n/**\n * Determines if each fix type in an array is supported by ESLint and throws\n * an error if not.\n * @param {string[]} fixTypes An array of fix types to check.\n * @returns {void}\n * @throws {Error} If an invalid fix type is found.\n */\nfunction validateFixTypes(fixTypes) {\n    for (const fixType of fixTypes) {\n        if (!validFixTypes.has(fixType)) {\n            throw new Error(`Invalid fix type \"${fixType}\" found.`);\n        }\n    }\n}\n\n/**\n * It will calculate the error and warning count for collection of messages per file\n * @param {LintMessage[]} messages Collection of messages\n * @returns {Object} Contains the stats\n * @private\n */\nfunction calculateStatsPerFile(messages) {\n    const stat = {\n        errorCount: 0,\n        fatalErrorCount: 0,\n        warningCount: 0,\n        fixableErrorCount: 0,\n        fixableWarningCount: 0\n    };\n\n    for (let i = 0; i < messages.length; i++) {\n        const message = messages[i];\n\n        if (message.fatal || message.severity === 2) {\n            stat.errorCount++;\n            if (message.fatal) {\n                stat.fatalErrorCount++;\n            }\n            if (message.fix) {\n                stat.fixableErrorCount++;\n            }\n        } else {\n            stat.warningCount++;\n            if (message.fix) {\n                stat.fixableWarningCount++;\n            }\n        }\n    }\n    return stat;\n}\n\n/**\n * It will calculate the error and warning count for collection of results from all files\n * @param {LintResult[]} results Collection of messages from all the files\n * @returns {Object} Contains the stats\n * @private\n */\nfunction calculateStatsPerRun(results) {\n    const stat = {\n        errorCount: 0,\n        fatalErrorCount: 0,\n        warningCount: 0,\n        fixableErrorCount: 0,\n        fixableWarningCount: 0\n    };\n\n    for (let i = 0; i < results.length; i++) {\n        const result = results[i];\n\n        stat.errorCount += result.errorCount;\n        stat.fatalErrorCount += result.fatalErrorCount;\n        stat.warningCount += result.warningCount;\n        stat.fixableErrorCount += result.fixableErrorCount;\n        stat.fixableWarningCount += result.fixableWarningCount;\n    }\n\n    return stat;\n}\n\n/**\n * Processes an source code using ESLint.\n * @param {Object} config The config object.\n * @param {string} config.text The source code to verify.\n * @param {string} config.cwd The path to the current working directory.\n * @param {string|undefined} config.filePath The path to the file of `text`. If this is undefined, it uses `<text>`.\n * @param {ConfigArray} config.config The config.\n * @param {boolean} config.fix If `true` then it does fix.\n * @param {boolean} config.allowInlineConfig If `true` then it uses directive comments.\n * @param {boolean|string} config.reportUnusedDisableDirectives If `true`, `\"error\"` or '\"warn\"', then it reports unused `eslint-disable` comments.\n * @param {FileEnumerator} config.fileEnumerator The file enumerator to check if a path is a target or not.\n * @param {Linter} config.linter The linter instance to verify.\n * @returns {LintResult} The result of linting.\n * @private\n */\nfunction verifyText({\n    text,\n    cwd,\n    filePath: providedFilePath,\n    config,\n    fix,\n    allowInlineConfig,\n    reportUnusedDisableDirectives,\n    fileEnumerator,\n    linter\n}) {\n    const filePath = providedFilePath || \"<text>\";\n\n    debug(`Lint ${filePath}`);\n\n    /*\n     * Verify.\n     * `config.extractConfig(filePath)` requires an absolute path, but `linter`\n     * doesn't know CWD, so it gives `linter` an absolute path always.\n     */\n    const filePathToVerify = filePath === \"<text>\" ? path.join(cwd, filePath) : filePath;\n    const { fixed, messages, output } = linter.verifyAndFix(\n        text,\n        config,\n        {\n            allowInlineConfig,\n            filename: filePathToVerify,\n            fix,\n            reportUnusedDisableDirectives,\n\n            /**\n             * Check if the linter should adopt a given code block or not.\n             * @param {string} blockFilename The virtual filename of a code block.\n             * @returns {boolean} `true` if the linter should adopt the code block.\n             */\n            filterCodeBlock(blockFilename) {\n                return fileEnumerator.isTargetPath(blockFilename);\n            }\n        }\n    );\n\n    // Tweak and return.\n    const result = {\n        filePath,\n        messages,\n        suppressedMessages: linter.getSuppressedMessages(),\n        ...calculateStatsPerFile(messages)\n    };\n\n    if (fixed) {\n        result.output = output;\n    }\n    if (\n        result.errorCount + result.warningCount > 0 &&\n        typeof result.output === \"undefined\"\n    ) {\n        result.source = text;\n    }\n\n    return result;\n}\n\n/**\n * Returns result with warning by ignore settings\n * @param {string} filePath File path of checked code\n * @param {string} baseDir Absolute path of base directory\n * @returns {LintResult} Result with single warning\n * @private\n */\nfunction createIgnoreResult(filePath, baseDir) {\n    let message;\n    const isHidden = filePath.split(path.sep)\n        .find(segment => /^\\./u.test(segment));\n    const isInNodeModules = baseDir && path.relative(baseDir, filePath).startsWith(\"node_modules\");\n\n    if (isHidden) {\n        message = \"File ignored by default.  Use a negated ignore pattern (like \\\"--ignore-pattern '!<relative/path/to/filename>'\\\") to override.\";\n    } else if (isInNodeModules) {\n        message = \"File ignored by default. Use \\\"--ignore-pattern '!node_modules/*'\\\" to override.\";\n    } else {\n        message = \"File ignored because of a matching ignore pattern. Use \\\"--no-ignore\\\" to override.\";\n    }\n\n    return {\n        filePath: path.resolve(filePath),\n        messages: [\n            {\n                ruleId: null,\n                fatal: false,\n                severity: 1,\n                message,\n                nodeType: null\n            }\n        ],\n        suppressedMessages: [],\n        errorCount: 0,\n        fatalErrorCount: 0,\n        warningCount: 1,\n        fixableErrorCount: 0,\n        fixableWarningCount: 0\n    };\n}\n\n/**\n * Get a rule.\n * @param {string} ruleId The rule ID to get.\n * @param {ConfigArray[]} configArrays The config arrays that have plugin rules.\n * @returns {Rule|null} The rule or null.\n */\nfunction getRule(ruleId, configArrays) {\n    for (const configArray of configArrays) {\n        const rule = configArray.pluginRules.get(ruleId);\n\n        if (rule) {\n            return rule;\n        }\n    }\n    return builtInRules.get(ruleId) || null;\n}\n\n/**\n * Checks whether a message's rule type should be fixed.\n * @param {LintMessage} message The message to check.\n * @param {ConfigArray[]} lastConfigArrays The list of config arrays that the last `executeOnFiles` or `executeOnText` used.\n * @param {string[]} fixTypes An array of fix types to check.\n * @returns {boolean} Whether the message should be fixed.\n */\nfunction shouldMessageBeFixed(message, lastConfigArrays, fixTypes) {\n    if (!message.ruleId) {\n        return fixTypes.has(\"directive\");\n    }\n\n    const rule = message.ruleId && getRule(message.ruleId, lastConfigArrays);\n\n    return Boolean(rule && rule.meta && fixTypes.has(rule.meta.type));\n}\n\n/**\n * Collect used deprecated rules.\n * @param {ConfigArray[]} usedConfigArrays The config arrays which were used.\n * @returns {IterableIterator<DeprecatedRuleInfo>} Used deprecated rules.\n */\nfunction *iterateRuleDeprecationWarnings(usedConfigArrays) {\n    const processedRuleIds = new Set();\n\n    // Flatten used configs.\n    /** @type {ExtractedConfig[]} */\n    const configs = usedConfigArrays.flatMap(getUsedExtractedConfigs);\n\n    // Traverse rule configs.\n    for (const config of configs) {\n        for (const [ruleId, ruleConfig] of Object.entries(config.rules)) {\n\n            // Skip if it was processed.\n            if (processedRuleIds.has(ruleId)) {\n                continue;\n            }\n            processedRuleIds.add(ruleId);\n\n            // Skip if it's not used.\n            if (!ConfigOps.getRuleSeverity(ruleConfig)) {\n                continue;\n            }\n            const rule = getRule(ruleId, usedConfigArrays);\n\n            // Skip if it's not deprecated.\n            if (!(rule && rule.meta && rule.meta.deprecated)) {\n                continue;\n            }\n\n            // This rule was used and deprecated.\n            yield {\n                ruleId,\n                replacedBy: rule.meta.replacedBy || []\n            };\n        }\n    }\n}\n\n/**\n * Checks if the given message is an error message.\n * @param {LintMessage} message The message to check.\n * @returns {boolean} Whether or not the message is an error message.\n * @private\n */\nfunction isErrorMessage(message) {\n    return message.severity === 2;\n}\n\n\n/**\n * return the cacheFile to be used by eslint, based on whether the provided parameter is\n * a directory or looks like a directory (ends in `path.sep`), in which case the file\n * name will be the `cacheFile/.cache_hashOfCWD`\n *\n * if cacheFile points to a file or looks like a file then it will just use that file\n * @param {string} cacheFile The name of file to be used to store the cache\n * @param {string} cwd Current working directory\n * @returns {string} the resolved path to the cache file\n */\nfunction getCacheFile(cacheFile, cwd) {\n\n    /*\n     * make sure the path separators are normalized for the environment/os\n     * keeping the trailing path separator if present\n     */\n    const normalizedCacheFile = path.normalize(cacheFile);\n\n    const resolvedCacheFile = path.resolve(cwd, normalizedCacheFile);\n    const looksLikeADirectory = normalizedCacheFile.slice(-1) === path.sep;\n\n    /**\n     * return the name for the cache file in case the provided parameter is a directory\n     * @returns {string} the resolved path to the cacheFile\n     */\n    function getCacheFileForDirectory() {\n        return path.join(resolvedCacheFile, `.cache_${hash(cwd)}`);\n    }\n\n    let fileStats;\n\n    try {\n        fileStats = fs.lstatSync(resolvedCacheFile);\n    } catch {\n        fileStats = null;\n    }\n\n\n    /*\n     * in case the file exists we need to verify if the provided path\n     * is a directory or a file. If it is a directory we want to create a file\n     * inside that directory\n     */\n    if (fileStats) {\n\n        /*\n         * is a directory or is a file, but the original file the user provided\n         * looks like a directory but `path.resolve` removed the `last path.sep`\n         * so we need to still treat this like a directory\n         */\n        if (fileStats.isDirectory() || looksLikeADirectory) {\n            return getCacheFileForDirectory();\n        }\n\n        // is file so just use that file\n        return resolvedCacheFile;\n    }\n\n    /*\n     * here we known the file or directory doesn't exist,\n     * so we will try to infer if its a directory if it looks like a directory\n     * for the current operating system.\n     */\n\n    // if the last character passed is a path separator we assume is a directory\n    if (looksLikeADirectory) {\n        return getCacheFileForDirectory();\n    }\n\n    return resolvedCacheFile;\n}\n\n/**\n * Convert a string array to a boolean map.\n * @param {string[]|null} keys The keys to assign true.\n * @param {boolean} defaultValue The default value for each property.\n * @param {string} displayName The property name which is used in error message.\n * @throws {Error} Requires array.\n * @returns {Record<string,boolean>} The boolean map.\n */\nfunction toBooleanMap(keys, defaultValue, displayName) {\n    if (keys && !Array.isArray(keys)) {\n        throw new Error(`${displayName} must be an array.`);\n    }\n    if (keys && keys.length > 0) {\n        return keys.reduce((map, def) => {\n            const [key, value] = def.split(\":\");\n\n            if (key !== \"__proto__\") {\n                map[key] = value === void 0\n                    ? defaultValue\n                    : value === \"true\";\n            }\n\n            return map;\n        }, {});\n    }\n    return void 0;\n}\n\n/**\n * Create a config data from CLI options.\n * @param {CLIEngineOptions} options The options\n * @returns {ConfigData|null} The created config data.\n */\nfunction createConfigDataFromOptions(options) {\n    const {\n        ignorePattern,\n        parser,\n        parserOptions,\n        plugins,\n        rules\n    } = options;\n    const env = toBooleanMap(options.envs, true, \"envs\");\n    const globals = toBooleanMap(options.globals, false, \"globals\");\n\n    if (\n        env === void 0 &&\n        globals === void 0 &&\n        (ignorePattern === void 0 || ignorePattern.length === 0) &&\n        parser === void 0 &&\n        parserOptions === void 0 &&\n        plugins === void 0 &&\n        rules === void 0\n    ) {\n        return null;\n    }\n    return {\n        env,\n        globals,\n        ignorePatterns: ignorePattern,\n        parser,\n        parserOptions,\n        plugins,\n        rules\n    };\n}\n\n/**\n * Checks whether a directory exists at the given location\n * @param {string} resolvedPath A path from the CWD\n * @throws {Error} As thrown by `fs.statSync` or `fs.isDirectory`.\n * @returns {boolean} `true` if a directory exists\n */\nfunction directoryExists(resolvedPath) {\n    try {\n        return fs.statSync(resolvedPath).isDirectory();\n    } catch (error) {\n        if (error && (error.code === \"ENOENT\" || error.code === \"ENOTDIR\")) {\n            return false;\n        }\n        throw error;\n    }\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Core CLI.\n */\nclass CLIEngine {\n\n    /**\n     * Creates a new instance of the core CLI engine.\n     * @param {CLIEngineOptions} providedOptions The options for this instance.\n     * @param {Object} [additionalData] Additional settings that are not CLIEngineOptions.\n     * @param {Record<string,Plugin>|null} [additionalData.preloadedPlugins] Preloaded plugins.\n     */\n    constructor(providedOptions, { preloadedPlugins } = {}) {\n        const options = Object.assign(\n            Object.create(null),\n            defaultOptions,\n            { cwd: process.cwd() },\n            providedOptions\n        );\n\n        if (options.fix === void 0) {\n            options.fix = false;\n        }\n\n        const additionalPluginPool = new Map();\n\n        if (preloadedPlugins) {\n            for (const [id, plugin] of Object.entries(preloadedPlugins)) {\n                additionalPluginPool.set(id, plugin);\n            }\n        }\n\n        const cacheFilePath = getCacheFile(\n            options.cacheLocation || options.cacheFile,\n            options.cwd\n        );\n        const configArrayFactory = new CascadingConfigArrayFactory({\n            additionalPluginPool,\n            baseConfig: options.baseConfig || null,\n            cliConfig: createConfigDataFromOptions(options),\n            cwd: options.cwd,\n            ignorePath: options.ignorePath,\n            resolvePluginsRelativeTo: options.resolvePluginsRelativeTo,\n            rulePaths: options.rulePaths,\n            specificConfigPath: options.configFile,\n            useEslintrc: options.useEslintrc,\n            builtInRules,\n            loadRules,\n            getEslintRecommendedConfig: () => require(\"@eslint/js\").configs.recommended,\n            getEslintAllConfig: () => require(\"@eslint/js\").configs.all\n        });\n        const fileEnumerator = new FileEnumerator({\n            configArrayFactory,\n            cwd: options.cwd,\n            extensions: options.extensions,\n            globInputPaths: options.globInputPaths,\n            errorOnUnmatchedPattern: options.errorOnUnmatchedPattern,\n            ignore: options.ignore\n        });\n        const lintResultCache =\n            options.cache ? new LintResultCache(cacheFilePath, options.cacheStrategy) : null;\n        const linter = new Linter({ cwd: options.cwd });\n\n        /** @type {ConfigArray[]} */\n        const lastConfigArrays = [configArrayFactory.getConfigArrayForFile()];\n\n        // Store private data.\n        internalSlotsMap.set(this, {\n            additionalPluginPool,\n            cacheFilePath,\n            configArrayFactory,\n            defaultIgnores: IgnorePattern.createDefaultIgnore(options.cwd),\n            fileEnumerator,\n            lastConfigArrays,\n            lintResultCache,\n            linter,\n            options\n        });\n\n        // setup special filter for fixes\n        if (options.fix && options.fixTypes && options.fixTypes.length > 0) {\n            debug(`Using fix types ${options.fixTypes}`);\n\n            // throw an error if any invalid fix types are found\n            validateFixTypes(options.fixTypes);\n\n            // convert to Set for faster lookup\n            const fixTypes = new Set(options.fixTypes);\n\n            // save original value of options.fix in case it's a function\n            const originalFix = (typeof options.fix === \"function\")\n                ? options.fix : () => true;\n\n            options.fix = message => shouldMessageBeFixed(message, lastConfigArrays, fixTypes) && originalFix(message);\n        }\n    }\n\n    getRules() {\n        const { lastConfigArrays } = internalSlotsMap.get(this);\n\n        return new Map(function *() {\n            yield* builtInRules;\n\n            for (const configArray of lastConfigArrays) {\n                yield* configArray.pluginRules;\n            }\n        }());\n    }\n\n    /**\n     * Returns results that only contains errors.\n     * @param {LintResult[]} results The results to filter.\n     * @returns {LintResult[]} The filtered results.\n     */\n    static getErrorResults(results) {\n        const filtered = [];\n\n        results.forEach(result => {\n            const filteredMessages = result.messages.filter(isErrorMessage);\n            const filteredSuppressedMessages = result.suppressedMessages.filter(isErrorMessage);\n\n            if (filteredMessages.length > 0) {\n                filtered.push({\n                    ...result,\n                    messages: filteredMessages,\n                    suppressedMessages: filteredSuppressedMessages,\n                    errorCount: filteredMessages.length,\n                    warningCount: 0,\n                    fixableErrorCount: result.fixableErrorCount,\n                    fixableWarningCount: 0\n                });\n            }\n        });\n\n        return filtered;\n    }\n\n    /**\n     * Outputs fixes from the given results to files.\n     * @param {LintReport} report The report object created by CLIEngine.\n     * @returns {void}\n     */\n    static outputFixes(report) {\n        report.results.filter(result => Object.prototype.hasOwnProperty.call(result, \"output\")).forEach(result => {\n            fs.writeFileSync(result.filePath, result.output);\n        });\n    }\n\n    /**\n     * Resolves the patterns passed into executeOnFiles() into glob-based patterns\n     * for easier handling.\n     * @param {string[]} patterns The file patterns passed on the command line.\n     * @returns {string[]} The equivalent glob patterns.\n     */\n    resolveFileGlobPatterns(patterns) {\n        const { options } = internalSlotsMap.get(this);\n\n        if (options.globInputPaths === false) {\n            return patterns.filter(Boolean);\n        }\n\n        const extensions = (options.extensions || [\".js\"]).map(ext => ext.replace(/^\\./u, \"\"));\n        const dirSuffix = `/**/*.{${extensions.join(\",\")}}`;\n\n        return patterns.filter(Boolean).map(pathname => {\n            const resolvedPath = path.resolve(options.cwd, pathname);\n            const newPath = directoryExists(resolvedPath)\n                ? pathname.replace(/[/\\\\]$/u, \"\") + dirSuffix\n                : pathname;\n\n            return path.normalize(newPath).replace(/\\\\/gu, \"/\");\n        });\n    }\n\n    /**\n     * Executes the current configuration on an array of file and directory names.\n     * @param {string[]} patterns An array of file and directory names.\n     * @throws {Error} As may be thrown by `fs.unlinkSync`.\n     * @returns {LintReport} The results for all files that were linted.\n     */\n    executeOnFiles(patterns) {\n        const {\n            cacheFilePath,\n            fileEnumerator,\n            lastConfigArrays,\n            lintResultCache,\n            linter,\n            options: {\n                allowInlineConfig,\n                cache,\n                cwd,\n                fix,\n                reportUnusedDisableDirectives\n            }\n        } = internalSlotsMap.get(this);\n        const results = [];\n        const startTime = Date.now();\n\n        // Clear the last used config arrays.\n        lastConfigArrays.length = 0;\n\n        // Delete cache file; should this do here?\n        if (!cache) {\n            try {\n                fs.unlinkSync(cacheFilePath);\n            } catch (error) {\n                const errorCode = error && error.code;\n\n                // Ignore errors when no such file exists or file system is read only (and cache file does not exist)\n                if (errorCode !== \"ENOENT\" && !(errorCode === \"EROFS\" && !fs.existsSync(cacheFilePath))) {\n                    throw error;\n                }\n            }\n        }\n\n        // Iterate source code files.\n        for (const { config, filePath, ignored } of fileEnumerator.iterateFiles(patterns)) {\n            if (ignored) {\n                results.push(createIgnoreResult(filePath, cwd));\n                continue;\n            }\n\n            /*\n             * Store used configs for:\n             * - this method uses to collect used deprecated rules.\n             * - `getRules()` method uses to collect all loaded rules.\n             * - `--fix-type` option uses to get the loaded rule's meta data.\n             */\n            if (!lastConfigArrays.includes(config)) {\n                lastConfigArrays.push(config);\n            }\n\n            // Skip if there is cached result.\n            if (lintResultCache) {\n                const cachedResult =\n                    lintResultCache.getCachedLintResults(filePath, config);\n\n                if (cachedResult) {\n                    const hadMessages =\n                        cachedResult.messages &&\n                        cachedResult.messages.length > 0;\n\n                    if (hadMessages && fix) {\n                        debug(`Reprocessing cached file to allow autofix: ${filePath}`);\n                    } else {\n                        debug(`Skipping file since it hasn't changed: ${filePath}`);\n                        results.push(cachedResult);\n                        continue;\n                    }\n                }\n            }\n\n            // Do lint.\n            const result = verifyText({\n                text: fs.readFileSync(filePath, \"utf8\"),\n                filePath,\n                config,\n                cwd,\n                fix,\n                allowInlineConfig,\n                reportUnusedDisableDirectives,\n                fileEnumerator,\n                linter\n            });\n\n            results.push(result);\n\n            /*\n             * Store the lint result in the LintResultCache.\n             * NOTE: The LintResultCache will remove the file source and any\n             * other properties that are difficult to serialize, and will\n             * hydrate those properties back in on future lint runs.\n             */\n            if (lintResultCache) {\n                lintResultCache.setCachedLintResults(filePath, config, result);\n            }\n        }\n\n        // Persist the cache to disk.\n        if (lintResultCache) {\n            lintResultCache.reconcile();\n        }\n\n        debug(`Linting complete in: ${Date.now() - startTime}ms`);\n        let usedDeprecatedRules;\n\n        return {\n            results,\n            ...calculateStatsPerRun(results),\n\n            // Initialize it lazily because CLI and `ESLint` API don't use it.\n            get usedDeprecatedRules() {\n                if (!usedDeprecatedRules) {\n                    usedDeprecatedRules = Array.from(\n                        iterateRuleDeprecationWarnings(lastConfigArrays)\n                    );\n                }\n                return usedDeprecatedRules;\n            }\n        };\n    }\n\n    /**\n     * Executes the current configuration on text.\n     * @param {string} text A string of JavaScript code to lint.\n     * @param {string} [filename] An optional string representing the texts filename.\n     * @param {boolean} [warnIgnored] Always warn when a file is ignored\n     * @returns {LintReport} The results for the linting.\n     */\n    executeOnText(text, filename, warnIgnored) {\n        const {\n            configArrayFactory,\n            fileEnumerator,\n            lastConfigArrays,\n            linter,\n            options: {\n                allowInlineConfig,\n                cwd,\n                fix,\n                reportUnusedDisableDirectives\n            }\n        } = internalSlotsMap.get(this);\n        const results = [];\n        const startTime = Date.now();\n        const resolvedFilename = filename && path.resolve(cwd, filename);\n\n\n        // Clear the last used config arrays.\n        lastConfigArrays.length = 0;\n        if (resolvedFilename && this.isPathIgnored(resolvedFilename)) {\n            if (warnIgnored) {\n                results.push(createIgnoreResult(resolvedFilename, cwd));\n            }\n        } else {\n            const config = configArrayFactory.getConfigArrayForFile(\n                resolvedFilename || \"__placeholder__.js\"\n            );\n\n            /*\n             * Store used configs for:\n             * - this method uses to collect used deprecated rules.\n             * - `getRules()` method uses to collect all loaded rules.\n             * - `--fix-type` option uses to get the loaded rule's meta data.\n             */\n            lastConfigArrays.push(config);\n\n            // Do lint.\n            results.push(verifyText({\n                text,\n                filePath: resolvedFilename,\n                config,\n                cwd,\n                fix,\n                allowInlineConfig,\n                reportUnusedDisableDirectives,\n                fileEnumerator,\n                linter\n            }));\n        }\n\n        debug(`Linting complete in: ${Date.now() - startTime}ms`);\n        let usedDeprecatedRules;\n\n        return {\n            results,\n            ...calculateStatsPerRun(results),\n\n            // Initialize it lazily because CLI and `ESLint` API don't use it.\n            get usedDeprecatedRules() {\n                if (!usedDeprecatedRules) {\n                    usedDeprecatedRules = Array.from(\n                        iterateRuleDeprecationWarnings(lastConfigArrays)\n                    );\n                }\n                return usedDeprecatedRules;\n            }\n        };\n    }\n\n    /**\n     * Returns a configuration object for the given file based on the CLI options.\n     * This is the same logic used by the ESLint CLI executable to determine\n     * configuration for each file it processes.\n     * @param {string} filePath The path of the file to retrieve a config object for.\n     * @throws {Error} If filepath a directory path.\n     * @returns {ConfigData} A configuration object for the file.\n     */\n    getConfigForFile(filePath) {\n        const { configArrayFactory, options } = internalSlotsMap.get(this);\n        const absolutePath = path.resolve(options.cwd, filePath);\n\n        if (directoryExists(absolutePath)) {\n            throw Object.assign(\n                new Error(\"'filePath' should not be a directory path.\"),\n                { messageTemplate: \"print-config-with-directory-path\" }\n            );\n        }\n\n        return configArrayFactory\n            .getConfigArrayForFile(absolutePath)\n            .extractConfig(absolutePath)\n            .toCompatibleObjectAsConfigFileContent();\n    }\n\n    /**\n     * Checks if a given path is ignored by ESLint.\n     * @param {string} filePath The path of the file to check.\n     * @returns {boolean} Whether or not the given path is ignored.\n     */\n    isPathIgnored(filePath) {\n        const {\n            configArrayFactory,\n            defaultIgnores,\n            options: { cwd, ignore }\n        } = internalSlotsMap.get(this);\n        const absolutePath = path.resolve(cwd, filePath);\n\n        if (ignore) {\n            const config = configArrayFactory\n                .getConfigArrayForFile(absolutePath)\n                .extractConfig(absolutePath);\n            const ignores = config.ignores || defaultIgnores;\n\n            return ignores(absolutePath);\n        }\n\n        return defaultIgnores(absolutePath);\n    }\n\n    /**\n     * Returns the formatter representing the given format or null if the `format` is not a string.\n     * @param {string} [format] The name of the format to load or the path to a\n     *      custom formatter.\n     * @throws {any} As may be thrown by requiring of formatter\n     * @returns {(FormatterFunction|null)} The formatter function or null if the `format` is not a string.\n     */\n    getFormatter(format) {\n\n        // default is stylish\n        const resolvedFormatName = format || \"stylish\";\n\n        // only strings are valid formatters\n        if (typeof resolvedFormatName === \"string\") {\n\n            // replace \\ with / for Windows compatibility\n            const normalizedFormatName = resolvedFormatName.replace(/\\\\/gu, \"/\");\n\n            const slots = internalSlotsMap.get(this);\n            const cwd = slots ? slots.options.cwd : process.cwd();\n            const namespace = naming.getNamespaceFromTerm(normalizedFormatName);\n\n            let formatterPath;\n\n            // if there's a slash, then it's a file (TODO: this check seems dubious for scoped npm packages)\n            if (!namespace && normalizedFormatName.includes(\"/\")) {\n                formatterPath = path.resolve(cwd, normalizedFormatName);\n            } else {\n                try {\n                    const npmFormat = naming.normalizePackageName(normalizedFormatName, \"eslint-formatter\");\n\n                    formatterPath = ModuleResolver.resolve(npmFormat, path.join(cwd, \"__placeholder__.js\"));\n                } catch {\n                    formatterPath = path.resolve(__dirname, \"formatters\", normalizedFormatName);\n                }\n            }\n\n            try {\n                return require(formatterPath);\n            } catch (ex) {\n                if (format === \"table\" || format === \"codeframe\") {\n                    ex.message = `The ${format} formatter is no longer part of core ESLint. Install it manually with \\`npm install -D eslint-formatter-${format}\\``;\n                } else {\n                    ex.message = `There was a problem loading formatter: ${formatterPath}\\nError: ${ex.message}`;\n                }\n                throw ex;\n            }\n\n        } else {\n            return null;\n        }\n    }\n}\n\nCLIEngine.version = pkg.version;\nCLIEngine.getFormatter = CLIEngine.prototype.getFormatter;\n\nmodule.exports = {\n    CLIEngine,\n\n    /**\n     * Get the internal slots of a given CLIEngine instance for tests.\n     * @param {CLIEngine} instance The CLIEngine instance to get.\n     * @returns {CLIEngineInternalSlots} The internal slots.\n     */\n    getCLIEngineInternalSlots(instance) {\n        return internalSlotsMap.get(instance);\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}