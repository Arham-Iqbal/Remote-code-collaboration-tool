{"ast":null,"code":"/**\n * @fileoverview Disallow construction of dense arrays using the Array constructor\n * @author Matt DuVall <http://www.mattduvall.com/>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst {\n  getVariableByName,\n  isClosingParenToken,\n  isOpeningParenToken,\n  isStartOfExpressionStatement,\n  needsPrecedingSemicolon\n} = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow `Array` constructors\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/no-array-constructor\"\n    },\n    hasSuggestions: true,\n    schema: [],\n    messages: {\n      preferLiteral: \"The array literal notation [] is preferable.\",\n      useLiteral: \"Replace with an array literal.\",\n      useLiteralAfterSemicolon: \"Replace with an array literal, add preceding semicolon.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.sourceCode;\n\n    /**\n     * Gets the text between the calling parentheses of a CallExpression or NewExpression.\n     * @param {ASTNode} node A CallExpression or NewExpression node.\n     * @returns {string} The text between the calling parentheses, or an empty string if there are none.\n     */\n    function getArgumentsText(node) {\n      const lastToken = sourceCode.getLastToken(node);\n      if (!isClosingParenToken(lastToken)) {\n        return \"\";\n      }\n      let firstToken = node.callee;\n      do {\n        firstToken = sourceCode.getTokenAfter(firstToken);\n        if (!firstToken || firstToken === lastToken) {\n          return \"\";\n        }\n      } while (!isOpeningParenToken(firstToken));\n      return sourceCode.text.slice(firstToken.range[1], lastToken.range[0]);\n    }\n\n    /**\n     * Disallow construction of dense arrays using the Array constructor\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n    function check(node) {\n      if (node.callee.type !== \"Identifier\" || node.callee.name !== \"Array\" || node.arguments.length === 1 && node.arguments[0].type !== \"SpreadElement\") {\n        return;\n      }\n      const variable = getVariableByName(sourceCode.getScope(node), \"Array\");\n\n      /*\n       * Check if `Array` is a predefined global variable: predefined globals have no declarations,\n       * meaning that the `identifiers` list of the variable object is empty.\n       */\n      if (variable && variable.identifiers.length === 0) {\n        const argsText = getArgumentsText(node);\n        let fixText;\n        let messageId;\n\n        /*\n         * Check if the suggested change should include a preceding semicolon or not.\n         * Due to JavaScript's ASI rules, a missing semicolon may be inserted automatically\n         * before an expression like `Array()` or `new Array()`, but not when the expression\n         * is changed into an array literal like `[]`.\n         */\n        if (isStartOfExpressionStatement(node) && needsPrecedingSemicolon(sourceCode, node)) {\n          fixText = `;[${argsText}]`;\n          messageId = \"useLiteralAfterSemicolon\";\n        } else {\n          fixText = `[${argsText}]`;\n          messageId = \"useLiteral\";\n        }\n        context.report({\n          node,\n          messageId: \"preferLiteral\",\n          suggest: [{\n            messageId,\n            fix: fixer => fixer.replaceText(node, fixText)\n          }]\n        });\n      }\n    }\n    return {\n      CallExpression: check,\n      NewExpression: check\n    };\n  }\n};","map":{"version":3,"names":["getVariableByName","isClosingParenToken","isOpeningParenToken","isStartOfExpressionStatement","needsPrecedingSemicolon","require","module","exports","meta","type","docs","description","recommended","url","hasSuggestions","schema","messages","preferLiteral","useLiteral","useLiteralAfterSemicolon","create","context","sourceCode","getArgumentsText","node","lastToken","getLastToken","firstToken","callee","getTokenAfter","text","slice","range","check","name","arguments","length","variable","getScope","identifiers","argsText","fixText","messageId","report","suggest","fix","fixer","replaceText","CallExpression","NewExpression"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-array-constructor.js"],"sourcesContent":["/**\n * @fileoverview Disallow construction of dense arrays using the Array constructor\n * @author Matt DuVall <http://www.mattduvall.com/>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst {\n    getVariableByName,\n    isClosingParenToken,\n    isOpeningParenToken,\n    isStartOfExpressionStatement,\n    needsPrecedingSemicolon\n} = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow `Array` constructors\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-array-constructor\"\n        },\n\n        hasSuggestions: true,\n\n        schema: [],\n\n        messages: {\n            preferLiteral: \"The array literal notation [] is preferable.\",\n            useLiteral: \"Replace with an array literal.\",\n            useLiteralAfterSemicolon: \"Replace with an array literal, add preceding semicolon.\"\n        }\n    },\n\n    create(context) {\n\n        const sourceCode = context.sourceCode;\n\n        /**\n         * Gets the text between the calling parentheses of a CallExpression or NewExpression.\n         * @param {ASTNode} node A CallExpression or NewExpression node.\n         * @returns {string} The text between the calling parentheses, or an empty string if there are none.\n         */\n        function getArgumentsText(node) {\n            const lastToken = sourceCode.getLastToken(node);\n\n            if (!isClosingParenToken(lastToken)) {\n                return \"\";\n            }\n\n            let firstToken = node.callee;\n\n            do {\n                firstToken = sourceCode.getTokenAfter(firstToken);\n                if (!firstToken || firstToken === lastToken) {\n                    return \"\";\n                }\n            } while (!isOpeningParenToken(firstToken));\n\n            return sourceCode.text.slice(firstToken.range[1], lastToken.range[0]);\n        }\n\n        /**\n         * Disallow construction of dense arrays using the Array constructor\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function check(node) {\n            if (\n                node.callee.type !== \"Identifier\" ||\n                node.callee.name !== \"Array\" ||\n                node.arguments.length === 1 &&\n                node.arguments[0].type !== \"SpreadElement\") {\n                return;\n            }\n\n            const variable = getVariableByName(sourceCode.getScope(node), \"Array\");\n\n            /*\n             * Check if `Array` is a predefined global variable: predefined globals have no declarations,\n             * meaning that the `identifiers` list of the variable object is empty.\n             */\n            if (variable && variable.identifiers.length === 0) {\n                const argsText = getArgumentsText(node);\n                let fixText;\n                let messageId;\n\n                /*\n                 * Check if the suggested change should include a preceding semicolon or not.\n                 * Due to JavaScript's ASI rules, a missing semicolon may be inserted automatically\n                 * before an expression like `Array()` or `new Array()`, but not when the expression\n                 * is changed into an array literal like `[]`.\n                 */\n                if (isStartOfExpressionStatement(node) && needsPrecedingSemicolon(sourceCode, node)) {\n                    fixText = `;[${argsText}]`;\n                    messageId = \"useLiteralAfterSemicolon\";\n                } else {\n                    fixText = `[${argsText}]`;\n                    messageId = \"useLiteral\";\n                }\n\n                context.report({\n                    node,\n                    messageId: \"preferLiteral\",\n                    suggest: [\n                        {\n                            messageId,\n                            fix: fixer => fixer.replaceText(node, fixText)\n                        }\n                    ]\n                });\n            }\n        }\n\n        return {\n            CallExpression: check,\n            NewExpression: check\n        };\n\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}