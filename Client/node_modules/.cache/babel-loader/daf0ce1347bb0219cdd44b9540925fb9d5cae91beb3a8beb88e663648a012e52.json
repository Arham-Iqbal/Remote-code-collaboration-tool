{"ast":null,"code":"/**\n * @fileoverview Expose out ESLint and CLI to require.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\nconst {\n  ESLint,\n  FlatESLint\n} = require(\"./eslint\");\nconst {\n  shouldUseFlatConfig\n} = require(\"./eslint/flat-eslint\");\nconst {\n  Linter\n} = require(\"./linter\");\nconst {\n  RuleTester\n} = require(\"./rule-tester\");\nconst {\n  SourceCode\n} = require(\"./source-code\");\n\n//-----------------------------------------------------------------------------\n// Functions\n//-----------------------------------------------------------------------------\n\n/**\n * Loads the correct ESLint constructor given the options.\n * @param {Object} [options] The options object\n * @param {boolean} [options.useFlatConfig] Whether or not to use a flat config\n * @param {string} [options.cwd] The current working directory\n * @returns {Promise<ESLint|LegacyESLint>} The ESLint constructor\n */\nasync function loadESLint({\n  useFlatConfig,\n  cwd = process.cwd()\n} = {}) {\n  /*\n   * Note: The v9.x version of this function doesn't have a cwd option\n   * because it's not used. It's only used in the v8.x version of this\n   * function.\n   */\n\n  const shouldESLintUseFlatConfig = typeof useFlatConfig === \"boolean\" ? useFlatConfig : await shouldUseFlatConfig({\n    cwd\n  });\n  return shouldESLintUseFlatConfig ? FlatESLint : ESLint;\n}\n\n//-----------------------------------------------------------------------------\n// Exports\n//-----------------------------------------------------------------------------\n\nmodule.exports = {\n  Linter,\n  loadESLint,\n  ESLint,\n  RuleTester,\n  SourceCode\n};","map":{"version":3,"names":["ESLint","FlatESLint","require","shouldUseFlatConfig","Linter","RuleTester","SourceCode","loadESLint","useFlatConfig","cwd","process","shouldESLintUseFlatConfig","module","exports"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/api.js"],"sourcesContent":["/**\n * @fileoverview Expose out ESLint and CLI to require.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\n\nconst { ESLint, FlatESLint } = require(\"./eslint\");\nconst { shouldUseFlatConfig } = require(\"./eslint/flat-eslint\");\nconst { Linter } = require(\"./linter\");\nconst { RuleTester } = require(\"./rule-tester\");\nconst { SourceCode } = require(\"./source-code\");\n\n//-----------------------------------------------------------------------------\n// Functions\n//-----------------------------------------------------------------------------\n\n/**\n * Loads the correct ESLint constructor given the options.\n * @param {Object} [options] The options object\n * @param {boolean} [options.useFlatConfig] Whether or not to use a flat config\n * @param {string} [options.cwd] The current working directory\n * @returns {Promise<ESLint|LegacyESLint>} The ESLint constructor\n */\nasync function loadESLint({ useFlatConfig, cwd = process.cwd() } = {}) {\n\n    /*\n     * Note: The v9.x version of this function doesn't have a cwd option\n     * because it's not used. It's only used in the v8.x version of this\n     * function.\n     */\n\n    const shouldESLintUseFlatConfig = typeof useFlatConfig === \"boolean\"\n        ? useFlatConfig\n        : await shouldUseFlatConfig({ cwd });\n\n    return shouldESLintUseFlatConfig ? FlatESLint : ESLint;\n}\n\n//-----------------------------------------------------------------------------\n// Exports\n//-----------------------------------------------------------------------------\n\nmodule.exports = {\n    Linter,\n    loadESLint,\n    ESLint,\n    RuleTester,\n    SourceCode\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAM;EAAEA,MAAM;EAAEC;AAAW,CAAC,GAAGC,OAAO,CAAC,UAAU,CAAC;AAClD,MAAM;EAAEC;AAAoB,CAAC,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AAC/D,MAAM;EAAEE;AAAO,CAAC,GAAGF,OAAO,CAAC,UAAU,CAAC;AACtC,MAAM;EAAEG;AAAW,CAAC,GAAGH,OAAO,CAAC,eAAe,CAAC;AAC/C,MAAM;EAAEI;AAAW,CAAC,GAAGJ,OAAO,CAAC,eAAe,CAAC;;AAE/C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeK,UAAUA,CAAC;EAAEC,aAAa;EAAEC,GAAG,GAAGC,OAAO,CAACD,GAAG,CAAC;AAAE,CAAC,GAAG,CAAC,CAAC,EAAE;EAEnE;AACJ;AACA;AACA;AACA;;EAEI,MAAME,yBAAyB,GAAG,OAAOH,aAAa,KAAK,SAAS,GAC9DA,aAAa,GACb,MAAML,mBAAmB,CAAC;IAAEM;EAAI,CAAC,CAAC;EAExC,OAAOE,yBAAyB,GAAGV,UAAU,GAAGD,MAAM;AAC1D;;AAEA;AACA;AACA;;AAEAY,MAAM,CAACC,OAAO,GAAG;EACbT,MAAM;EACNG,UAAU;EACVP,MAAM;EACNK,UAAU;EACVC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}