{"ast":null,"code":"/**\n * @fileoverview Rule to flag the use of empty character classes in regular expressions\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst {\n  RegExpParser,\n  visitRegExpAST\n} = require(\"@eslint-community/regexpp\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst parser = new RegExpParser();\nconst QUICK_TEST_REGEX = /\\[\\]/u;\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"Disallow empty character classes in regular expressions\",\n      recommended: true,\n      url: \"https://eslint.org/docs/latest/rules/no-empty-character-class\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Empty class.\"\n    }\n  },\n  create(context) {\n    return {\n      \"Literal[regex]\"(node) {\n        const {\n          pattern,\n          flags\n        } = node.regex;\n        if (!QUICK_TEST_REGEX.test(pattern)) {\n          return;\n        }\n        let regExpAST;\n        try {\n          regExpAST = parser.parsePattern(pattern, 0, pattern.length, {\n            unicode: flags.includes(\"u\"),\n            unicodeSets: flags.includes(\"v\")\n          });\n        } catch {\n          // Ignore regular expressions that regexpp cannot parse\n          return;\n        }\n        visitRegExpAST(regExpAST, {\n          onCharacterClassEnter(characterClass) {\n            if (!characterClass.negate && characterClass.elements.length === 0) {\n              context.report({\n                node,\n                messageId: \"unexpected\"\n              });\n            }\n          }\n        });\n      }\n    };\n  }\n};","map":{"version":3,"names":["RegExpParser","visitRegExpAST","require","parser","QUICK_TEST_REGEX","module","exports","meta","type","docs","description","recommended","url","schema","messages","unexpected","create","context","Literal[regex]","node","pattern","flags","regex","test","regExpAST","parsePattern","length","unicode","includes","unicodeSets","onCharacterClassEnter","characterClass","negate","elements","report","messageId"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-empty-character-class.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag the use of empty character classes in regular expressions\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst { RegExpParser, visitRegExpAST } = require(\"@eslint-community/regexpp\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst parser = new RegExpParser();\nconst QUICK_TEST_REGEX = /\\[\\]/u;\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"Disallow empty character classes in regular expressions\",\n            recommended: true,\n            url: \"https://eslint.org/docs/latest/rules/no-empty-character-class\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpected: \"Empty class.\"\n        }\n    },\n\n    create(context) {\n        return {\n            \"Literal[regex]\"(node) {\n                const { pattern, flags } = node.regex;\n\n                if (!QUICK_TEST_REGEX.test(pattern)) {\n                    return;\n                }\n\n                let regExpAST;\n\n                try {\n                    regExpAST = parser.parsePattern(pattern, 0, pattern.length, {\n                        unicode: flags.includes(\"u\"),\n                        unicodeSets: flags.includes(\"v\")\n                    });\n                } catch {\n\n                    // Ignore regular expressions that regexpp cannot parse\n                    return;\n                }\n\n                visitRegExpAST(regExpAST, {\n                    onCharacterClassEnter(characterClass) {\n                        if (!characterClass.negate && characterClass.elements.length === 0) {\n                            context.report({ node, messageId: \"unexpected\" });\n                        }\n                    }\n                });\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAM;EAAEA,YAAY;EAAEC;AAAe,CAAC,GAAGC,OAAO,CAAC,2BAA2B,CAAC;;AAE7E;AACA;AACA;;AAEA,MAAMC,MAAM,GAAG,IAAIH,YAAY,CAAC,CAAC;AACjC,MAAMI,gBAAgB,GAAG,OAAO;;AAEhC;AACA;AACA;;AAEA;AACAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,SAAS;IAEfC,IAAI,EAAE;MACFC,WAAW,EAAE,yDAAyD;MACtEC,WAAW,EAAE,IAAI;MACjBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,UAAU,EAAE;IAChB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,OAAO;MACH,gBAAgBC,CAACC,IAAI,EAAE;QACnB,MAAM;UAAEC,OAAO;UAAEC;QAAM,CAAC,GAAGF,IAAI,CAACG,KAAK;QAErC,IAAI,CAAClB,gBAAgB,CAACmB,IAAI,CAACH,OAAO,CAAC,EAAE;UACjC;QACJ;QAEA,IAAII,SAAS;QAEb,IAAI;UACAA,SAAS,GAAGrB,MAAM,CAACsB,YAAY,CAACL,OAAO,EAAE,CAAC,EAAEA,OAAO,CAACM,MAAM,EAAE;YACxDC,OAAO,EAAEN,KAAK,CAACO,QAAQ,CAAC,GAAG,CAAC;YAC5BC,WAAW,EAAER,KAAK,CAACO,QAAQ,CAAC,GAAG;UACnC,CAAC,CAAC;QACN,CAAC,CAAC,MAAM;UAEJ;UACA;QACJ;QAEA3B,cAAc,CAACuB,SAAS,EAAE;UACtBM,qBAAqBA,CAACC,cAAc,EAAE;YAClC,IAAI,CAACA,cAAc,CAACC,MAAM,IAAID,cAAc,CAACE,QAAQ,CAACP,MAAM,KAAK,CAAC,EAAE;cAChET,OAAO,CAACiB,MAAM,CAAC;gBAAEf,IAAI;gBAAEgB,SAAS,EAAE;cAAa,CAAC,CAAC;YACrD;UACJ;QACJ,CAAC,CAAC;MACN;IACJ,CAAC;EAEL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}