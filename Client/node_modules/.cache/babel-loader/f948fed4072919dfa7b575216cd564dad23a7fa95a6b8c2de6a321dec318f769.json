{"ast":null,"code":"/**\n * @fileoverview Rule to flag when return statement contains assignment\n * @author Ilya Volodin\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst SENTINEL_TYPE = /^(?:[a-zA-Z]+?Statement|ArrowFunctionExpression|FunctionExpression|ClassExpression)$/u;\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow assignment operators in `return` statements\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/no-return-assign\"\n    },\n    schema: [{\n      enum: [\"except-parens\", \"always\"]\n    }],\n    messages: {\n      returnAssignment: \"Return statement should not contain assignment.\",\n      arrowAssignment: \"Arrow function should not return assignment.\"\n    }\n  },\n  create(context) {\n    const always = (context.options[0] || \"except-parens\") !== \"except-parens\";\n    const sourceCode = context.sourceCode;\n    return {\n      AssignmentExpression(node) {\n        if (!always && astUtils.isParenthesised(sourceCode, node)) {\n          return;\n        }\n        let currentChild = node;\n        let parent = currentChild.parent;\n\n        // Find ReturnStatement or ArrowFunctionExpression in ancestors.\n        while (parent && !SENTINEL_TYPE.test(parent.type)) {\n          currentChild = parent;\n          parent = parent.parent;\n        }\n\n        // Reports.\n        if (parent && parent.type === \"ReturnStatement\") {\n          context.report({\n            node: parent,\n            messageId: \"returnAssignment\"\n          });\n        } else if (parent && parent.type === \"ArrowFunctionExpression\" && parent.body === currentChild) {\n          context.report({\n            node: parent,\n            messageId: \"arrowAssignment\"\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","SENTINEL_TYPE","module","exports","meta","type","docs","description","recommended","url","schema","enum","messages","returnAssignment","arrowAssignment","create","context","always","options","sourceCode","AssignmentExpression","node","isParenthesised","currentChild","parent","test","report","messageId","body"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-return-assign.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag when return statement contains assignment\n * @author Ilya Volodin\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst SENTINEL_TYPE = /^(?:[a-zA-Z]+?Statement|ArrowFunctionExpression|FunctionExpression|ClassExpression)$/u;\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow assignment operators in `return` statements\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-return-assign\"\n        },\n\n        schema: [\n            {\n                enum: [\"except-parens\", \"always\"]\n            }\n        ],\n\n        messages: {\n            returnAssignment: \"Return statement should not contain assignment.\",\n            arrowAssignment: \"Arrow function should not return assignment.\"\n        }\n    },\n\n    create(context) {\n        const always = (context.options[0] || \"except-parens\") !== \"except-parens\";\n        const sourceCode = context.sourceCode;\n\n        return {\n            AssignmentExpression(node) {\n                if (!always && astUtils.isParenthesised(sourceCode, node)) {\n                    return;\n                }\n\n                let currentChild = node;\n                let parent = currentChild.parent;\n\n                // Find ReturnStatement or ArrowFunctionExpression in ancestors.\n                while (parent && !SENTINEL_TYPE.test(parent.type)) {\n                    currentChild = parent;\n                    parent = parent.parent;\n                }\n\n                // Reports.\n                if (parent && parent.type === \"ReturnStatement\") {\n                    context.report({\n                        node: parent,\n                        messageId: \"returnAssignment\"\n                    });\n                } else if (parent && parent.type === \"ArrowFunctionExpression\" && parent.body === currentChild) {\n                    context.report({\n                        node: parent,\n                        messageId: \"arrowAssignment\"\n                    });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;;AAEA,MAAMC,aAAa,GAAG,uFAAuF;;AAE7G;AACA;AACA;;AAEA;AACAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,sDAAsD;MACnEC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,CACJ;MACIC,IAAI,EAAE,CAAC,eAAe,EAAE,QAAQ;IACpC,CAAC,CACJ;IAEDC,QAAQ,EAAE;MACNC,gBAAgB,EAAE,iDAAiD;MACnEC,eAAe,EAAE;IACrB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,MAAM,GAAG,CAACD,OAAO,CAACE,OAAO,CAAC,CAAC,CAAC,IAAI,eAAe,MAAM,eAAe;IAC1E,MAAMC,UAAU,GAAGH,OAAO,CAACG,UAAU;IAErC,OAAO;MACHC,oBAAoBA,CAACC,IAAI,EAAE;QACvB,IAAI,CAACJ,MAAM,IAAIlB,QAAQ,CAACuB,eAAe,CAACH,UAAU,EAAEE,IAAI,CAAC,EAAE;UACvD;QACJ;QAEA,IAAIE,YAAY,GAAGF,IAAI;QACvB,IAAIG,MAAM,GAAGD,YAAY,CAACC,MAAM;;QAEhC;QACA,OAAOA,MAAM,IAAI,CAACvB,aAAa,CAACwB,IAAI,CAACD,MAAM,CAACnB,IAAI,CAAC,EAAE;UAC/CkB,YAAY,GAAGC,MAAM;UACrBA,MAAM,GAAGA,MAAM,CAACA,MAAM;QAC1B;;QAEA;QACA,IAAIA,MAAM,IAAIA,MAAM,CAACnB,IAAI,KAAK,iBAAiB,EAAE;UAC7CW,OAAO,CAACU,MAAM,CAAC;YACXL,IAAI,EAAEG,MAAM;YACZG,SAAS,EAAE;UACf,CAAC,CAAC;QACN,CAAC,MAAM,IAAIH,MAAM,IAAIA,MAAM,CAACnB,IAAI,KAAK,yBAAyB,IAAImB,MAAM,CAACI,IAAI,KAAKL,YAAY,EAAE;UAC5FP,OAAO,CAACU,MAAM,CAAC;YACXL,IAAI,EAAEG,MAAM;YACZG,SAAS,EAAE;UACf,CAAC,CAAC;QACN;MACJ;IACJ,CAAC;EACL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}