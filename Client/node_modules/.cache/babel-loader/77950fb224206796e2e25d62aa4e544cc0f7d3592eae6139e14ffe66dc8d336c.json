{"ast":null,"code":"/**\n * @fileoverview Flat Config Array\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\nconst {\n  ConfigArray,\n  ConfigArraySymbol\n} = require(\"@humanwhocodes/config-array\");\nconst {\n  flatConfigSchema\n} = require(\"./flat-config-schema\");\nconst {\n  RuleValidator\n} = require(\"./rule-validator\");\nconst {\n  defaultConfig\n} = require(\"./default-config\");\nconst jsPlugin = require(\"@eslint/js\");\n\n//-----------------------------------------------------------------------------\n// Helpers\n//-----------------------------------------------------------------------------\n\n/**\n * Fields that are considered metadata and not part of the config object.\n */\nconst META_FIELDS = new Set([\"name\"]);\nconst ruleValidator = new RuleValidator();\n\n/**\n * Splits a plugin identifier in the form a/b/c into two parts: a/b and c.\n * @param {string} identifier The identifier to parse.\n * @returns {{objectName: string, pluginName: string}} The parts of the plugin\n *      name.\n */\nfunction splitPluginIdentifier(identifier) {\n  const parts = identifier.split(\"/\");\n  return {\n    objectName: parts.pop(),\n    pluginName: parts.join(\"/\")\n  };\n}\n\n/**\n * Returns the name of an object in the config by reading its `meta` key.\n * @param {Object} object The object to check.\n * @returns {string?} The name of the object if found or `null` if there\n *      is no name.\n */\nfunction getObjectId(object) {\n  // first check old-style name\n  let name = object.name;\n  if (!name) {\n    if (!object.meta) {\n      return null;\n    }\n    name = object.meta.name;\n    if (!name) {\n      return null;\n    }\n  }\n\n  // now check for old-style version\n  let version = object.version;\n  if (!version) {\n    version = object.meta && object.meta.version;\n  }\n\n  // if there's a version then append that\n  if (version) {\n    return `${name}@${version}`;\n  }\n  return name;\n}\n\n/**\n * Wraps a config error with details about where the error occurred.\n * @param {Error} error The original error.\n * @param {number} originalLength The original length of the config array.\n * @param {number} baseLength The length of the base config.\n * @returns {TypeError} The new error with details.\n */\nfunction wrapConfigErrorWithDetails(error, originalLength, baseLength) {\n  let location = \"user-defined\";\n  let configIndex = error.index;\n\n  /*\n   * A config array is set up in this order:\n   * 1. Base config\n   * 2. Original configs\n   * 3. User-defined configs\n   * 4. CLI-defined configs\n   *\n   * So we need to adjust the index to account for the base config.\n   *\n   * - If the index is less than the base length, it's in the base config\n   *   (as specified by `baseConfig` argument to `FlatConfigArray` constructor).\n   * - If the index is greater than the base length but less than the original\n   *   length + base length, it's in the original config. The original config\n   *   is passed to the `FlatConfigArray` constructor as the first argument.\n   * - Otherwise, it's in the user-defined config, which is loaded from the\n   *   config file and merged with any command-line options.\n   */\n  if (error.index < baseLength) {\n    location = \"base\";\n  } else if (error.index < originalLength + baseLength) {\n    location = \"original\";\n    configIndex = error.index - baseLength;\n  } else {\n    configIndex = error.index - originalLength - baseLength;\n  }\n  return new TypeError(`${error.message.slice(0, -1)} at ${location} index ${configIndex}.`, {\n    cause: error\n  });\n}\nconst originalBaseConfig = Symbol(\"originalBaseConfig\");\nconst originalLength = Symbol(\"originalLength\");\nconst baseLength = Symbol(\"baseLength\");\n\n//-----------------------------------------------------------------------------\n// Exports\n//-----------------------------------------------------------------------------\n\n/**\n * Represents an array containing configuration information for ESLint.\n */\nclass FlatConfigArray extends ConfigArray {\n  /**\n   * Creates a new instance.\n   * @param {*[]} configs An array of configuration information.\n   * @param {{basePath: string, shouldIgnore: boolean, baseConfig: FlatConfig}} options The options\n   *      to use for the config array instance.\n   */\n  constructor(configs, {\n    basePath,\n    shouldIgnore = true,\n    baseConfig = defaultConfig\n  } = {}) {\n    super(configs, {\n      basePath,\n      schema: flatConfigSchema\n    });\n\n    /**\n     * The original length of the array before any modifications.\n     * @type {number}\n     */\n    this[originalLength] = this.length;\n    if (baseConfig[Symbol.iterator]) {\n      this.unshift(...baseConfig);\n    } else {\n      this.unshift(baseConfig);\n    }\n\n    /**\n     * The length of the array after applying the base config.\n     * @type {number}\n     */\n    this[baseLength] = this.length - this[originalLength];\n\n    /**\n     * The base config used to build the config array.\n     * @type {Array<FlatConfig>}\n     */\n    this[originalBaseConfig] = baseConfig;\n    Object.defineProperty(this, originalBaseConfig, {\n      writable: false\n    });\n\n    /**\n     * Determines if `ignores` fields should be honored.\n     * If true, then all `ignores` fields are honored.\n     * if false, then only `ignores` fields in the baseConfig are honored.\n     * @type {boolean}\n     */\n    this.shouldIgnore = shouldIgnore;\n    Object.defineProperty(this, \"shouldIgnore\", {\n      writable: false\n    });\n  }\n\n  /**\n   * Normalizes the array by calling the superclass method and catching/rethrowing\n   * any ConfigError exceptions with additional details.\n   * @param {any} [context] The context to use to normalize the array.\n   * @returns {Promise<FlatConfigArray>} A promise that resolves when the array is normalized.\n   */\n  normalize(context) {\n    return super.normalize(context).catch(error => {\n      if (error.name === \"ConfigError\") {\n        throw wrapConfigErrorWithDetails(error, this[originalLength], this[baseLength]);\n      }\n      throw error;\n    });\n  }\n\n  /**\n   * Normalizes the array by calling the superclass method and catching/rethrowing\n   * any ConfigError exceptions with additional details.\n   * @param {any} [context] The context to use to normalize the array.\n   * @returns {FlatConfigArray} The current instance.\n   * @throws {TypeError} If the config is invalid.\n   */\n  normalizeSync(context) {\n    try {\n      return super.normalizeSync(context);\n    } catch (error) {\n      if (error.name === \"ConfigError\") {\n        throw wrapConfigErrorWithDetails(error, this[originalLength], this[baseLength]);\n      }\n      throw error;\n    }\n  }\n\n  /* eslint-disable class-methods-use-this -- Desired as instance method */\n  /**\n   * Replaces a config with another config to allow us to put strings\n   * in the config array that will be replaced by objects before\n   * normalization.\n   * @param {Object} config The config to preprocess.\n   * @returns {Object} The preprocessed config.\n   */\n  [ConfigArraySymbol.preprocessConfig](config) {\n    if (config === \"eslint:recommended\") {\n      // if we are in a Node.js environment warn the user\n      if (typeof process !== \"undefined\" && process.emitWarning) {\n        process.emitWarning(\"The 'eslint:recommended' string configuration is deprecated and will be replaced by the @eslint/js package's 'recommended' config.\");\n      }\n      return jsPlugin.configs.recommended;\n    }\n    if (config === \"eslint:all\") {\n      // if we are in a Node.js environment warn the user\n      if (typeof process !== \"undefined\" && process.emitWarning) {\n        process.emitWarning(\"The 'eslint:all' string configuration is deprecated and will be replaced by the @eslint/js package's 'all' config.\");\n      }\n      return jsPlugin.configs.all;\n    }\n\n    /*\n     * If a config object has `ignores` and no other non-meta fields, then it's an object\n     * for global ignores. If `shouldIgnore` is false, that object shouldn't apply,\n     * so we'll remove its `ignores`.\n     */\n    if (!this.shouldIgnore && !this[originalBaseConfig].includes(config) && config.ignores && Object.keys(config).filter(key => !META_FIELDS.has(key)).length === 1) {\n      /* eslint-disable-next-line no-unused-vars -- need to strip off other keys */\n      const {\n        ignores,\n        ...otherKeys\n      } = config;\n      return otherKeys;\n    }\n    return config;\n  }\n\n  /**\n   * Finalizes the config by replacing plugin references with their objects\n   * and validating rule option schemas.\n   * @param {Object} config The config to finalize.\n   * @returns {Object} The finalized config.\n   * @throws {TypeError} If the config is invalid.\n   */\n  [ConfigArraySymbol.finalizeConfig](config) {\n    const {\n      plugins,\n      languageOptions,\n      processor\n    } = config;\n    let parserName, processorName;\n    let invalidParser = false,\n      invalidProcessor = false;\n\n    // Check parser value\n    if (languageOptions && languageOptions.parser) {\n      const {\n        parser\n      } = languageOptions;\n      if (typeof parser === \"object\") {\n        parserName = getObjectId(parser);\n        if (!parserName) {\n          invalidParser = true;\n        }\n      } else {\n        invalidParser = true;\n      }\n    }\n\n    // Check processor value\n    if (processor) {\n      if (typeof processor === \"string\") {\n        const {\n          pluginName,\n          objectName: localProcessorName\n        } = splitPluginIdentifier(processor);\n        processorName = processor;\n        if (!plugins || !plugins[pluginName] || !plugins[pluginName].processors || !plugins[pluginName].processors[localProcessorName]) {\n          throw new TypeError(`Key \"processor\": Could not find \"${localProcessorName}\" in plugin \"${pluginName}\".`);\n        }\n        config.processor = plugins[pluginName].processors[localProcessorName];\n      } else if (typeof processor === \"object\") {\n        processorName = getObjectId(processor);\n        if (!processorName) {\n          invalidProcessor = true;\n        }\n      } else {\n        invalidProcessor = true;\n      }\n    }\n    ruleValidator.validate(config);\n\n    // apply special logic for serialization into JSON\n    /* eslint-disable object-shorthand -- shorthand would change \"this\" value */\n    Object.defineProperty(config, \"toJSON\", {\n      value: function () {\n        if (invalidParser) {\n          throw new Error(\"Could not serialize parser object (missing 'meta' object).\");\n        }\n        if (invalidProcessor) {\n          throw new Error(\"Could not serialize processor object (missing 'meta' object).\");\n        }\n        return {\n          ...this,\n          plugins: Object.entries(plugins).map(([namespace, plugin]) => {\n            const pluginId = getObjectId(plugin);\n            if (!pluginId) {\n              return namespace;\n            }\n            return `${namespace}:${pluginId}`;\n          }),\n          languageOptions: {\n            ...languageOptions,\n            parser: parserName\n          },\n          processor: processorName\n        };\n      }\n    });\n    /* eslint-enable object-shorthand -- ok to enable now */\n\n    return config;\n  }\n  /* eslint-enable class-methods-use-this -- Desired as instance method */\n}\nexports.FlatConfigArray = FlatConfigArray;","map":{"version":3,"names":["ConfigArray","ConfigArraySymbol","require","flatConfigSchema","RuleValidator","defaultConfig","jsPlugin","META_FIELDS","Set","ruleValidator","splitPluginIdentifier","identifier","parts","split","objectName","pop","pluginName","join","getObjectId","object","name","meta","version","wrapConfigErrorWithDetails","error","originalLength","baseLength","location","configIndex","index","TypeError","message","slice","cause","originalBaseConfig","Symbol","FlatConfigArray","constructor","configs","basePath","shouldIgnore","baseConfig","schema","length","iterator","unshift","Object","defineProperty","writable","normalize","context","catch","normalizeSync","preprocessConfig","config","process","emitWarning","recommended","all","includes","ignores","keys","filter","key","has","otherKeys","finalizeConfig","plugins","languageOptions","processor","parserName","processorName","invalidParser","invalidProcessor","parser","localProcessorName","processors","validate","value","Error","entries","map","namespace","plugin","pluginId","exports"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/config/flat-config-array.js"],"sourcesContent":["/**\n * @fileoverview Flat Config Array\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\n\nconst { ConfigArray, ConfigArraySymbol } = require(\"@humanwhocodes/config-array\");\nconst { flatConfigSchema } = require(\"./flat-config-schema\");\nconst { RuleValidator } = require(\"./rule-validator\");\nconst { defaultConfig } = require(\"./default-config\");\nconst jsPlugin = require(\"@eslint/js\");\n\n//-----------------------------------------------------------------------------\n// Helpers\n//-----------------------------------------------------------------------------\n\n/**\n * Fields that are considered metadata and not part of the config object.\n */\nconst META_FIELDS = new Set([\"name\"]);\n\nconst ruleValidator = new RuleValidator();\n\n/**\n * Splits a plugin identifier in the form a/b/c into two parts: a/b and c.\n * @param {string} identifier The identifier to parse.\n * @returns {{objectName: string, pluginName: string}} The parts of the plugin\n *      name.\n */\nfunction splitPluginIdentifier(identifier) {\n    const parts = identifier.split(\"/\");\n\n    return {\n        objectName: parts.pop(),\n        pluginName: parts.join(\"/\")\n    };\n}\n\n/**\n * Returns the name of an object in the config by reading its `meta` key.\n * @param {Object} object The object to check.\n * @returns {string?} The name of the object if found or `null` if there\n *      is no name.\n */\nfunction getObjectId(object) {\n\n    // first check old-style name\n    let name = object.name;\n\n    if (!name) {\n\n        if (!object.meta) {\n            return null;\n        }\n\n        name = object.meta.name;\n\n        if (!name) {\n            return null;\n        }\n    }\n\n    // now check for old-style version\n    let version = object.version;\n\n    if (!version) {\n        version = object.meta && object.meta.version;\n    }\n\n    // if there's a version then append that\n    if (version) {\n        return `${name}@${version}`;\n    }\n\n    return name;\n}\n\n/**\n * Wraps a config error with details about where the error occurred.\n * @param {Error} error The original error.\n * @param {number} originalLength The original length of the config array.\n * @param {number} baseLength The length of the base config.\n * @returns {TypeError} The new error with details.\n */\nfunction wrapConfigErrorWithDetails(error, originalLength, baseLength) {\n\n    let location = \"user-defined\";\n    let configIndex = error.index;\n\n    /*\n     * A config array is set up in this order:\n     * 1. Base config\n     * 2. Original configs\n     * 3. User-defined configs\n     * 4. CLI-defined configs\n     *\n     * So we need to adjust the index to account for the base config.\n     *\n     * - If the index is less than the base length, it's in the base config\n     *   (as specified by `baseConfig` argument to `FlatConfigArray` constructor).\n     * - If the index is greater than the base length but less than the original\n     *   length + base length, it's in the original config. The original config\n     *   is passed to the `FlatConfigArray` constructor as the first argument.\n     * - Otherwise, it's in the user-defined config, which is loaded from the\n     *   config file and merged with any command-line options.\n     */\n    if (error.index < baseLength) {\n        location = \"base\";\n    } else if (error.index < originalLength + baseLength) {\n        location = \"original\";\n        configIndex = error.index - baseLength;\n    } else {\n        configIndex = error.index - originalLength - baseLength;\n    }\n\n    return new TypeError(\n        `${error.message.slice(0, -1)} at ${location} index ${configIndex}.`,\n        { cause: error }\n    );\n}\n\nconst originalBaseConfig = Symbol(\"originalBaseConfig\");\nconst originalLength = Symbol(\"originalLength\");\nconst baseLength = Symbol(\"baseLength\");\n\n//-----------------------------------------------------------------------------\n// Exports\n//-----------------------------------------------------------------------------\n\n/**\n * Represents an array containing configuration information for ESLint.\n */\nclass FlatConfigArray extends ConfigArray {\n\n    /**\n     * Creates a new instance.\n     * @param {*[]} configs An array of configuration information.\n     * @param {{basePath: string, shouldIgnore: boolean, baseConfig: FlatConfig}} options The options\n     *      to use for the config array instance.\n     */\n    constructor(configs, {\n        basePath,\n        shouldIgnore = true,\n        baseConfig = defaultConfig\n    } = {}) {\n        super(configs, {\n            basePath,\n            schema: flatConfigSchema\n        });\n\n        /**\n         * The original length of the array before any modifications.\n         * @type {number}\n         */\n        this[originalLength] = this.length;\n\n        if (baseConfig[Symbol.iterator]) {\n            this.unshift(...baseConfig);\n        } else {\n            this.unshift(baseConfig);\n        }\n\n        /**\n         * The length of the array after applying the base config.\n         * @type {number}\n         */\n        this[baseLength] = this.length - this[originalLength];\n\n        /**\n         * The base config used to build the config array.\n         * @type {Array<FlatConfig>}\n         */\n        this[originalBaseConfig] = baseConfig;\n        Object.defineProperty(this, originalBaseConfig, { writable: false });\n\n        /**\n         * Determines if `ignores` fields should be honored.\n         * If true, then all `ignores` fields are honored.\n         * if false, then only `ignores` fields in the baseConfig are honored.\n         * @type {boolean}\n         */\n        this.shouldIgnore = shouldIgnore;\n        Object.defineProperty(this, \"shouldIgnore\", { writable: false });\n    }\n\n    /**\n     * Normalizes the array by calling the superclass method and catching/rethrowing\n     * any ConfigError exceptions with additional details.\n     * @param {any} [context] The context to use to normalize the array.\n     * @returns {Promise<FlatConfigArray>} A promise that resolves when the array is normalized.\n     */\n    normalize(context) {\n        return super.normalize(context)\n            .catch(error => {\n                if (error.name === \"ConfigError\") {\n                    throw wrapConfigErrorWithDetails(error, this[originalLength], this[baseLength]);\n                }\n\n                throw error;\n\n            });\n    }\n\n    /**\n     * Normalizes the array by calling the superclass method and catching/rethrowing\n     * any ConfigError exceptions with additional details.\n     * @param {any} [context] The context to use to normalize the array.\n     * @returns {FlatConfigArray} The current instance.\n     * @throws {TypeError} If the config is invalid.\n     */\n    normalizeSync(context) {\n\n        try {\n\n            return super.normalizeSync(context);\n\n        } catch (error) {\n\n            if (error.name === \"ConfigError\") {\n                throw wrapConfigErrorWithDetails(error, this[originalLength], this[baseLength]);\n            }\n\n            throw error;\n\n        }\n\n    }\n\n    /* eslint-disable class-methods-use-this -- Desired as instance method */\n    /**\n     * Replaces a config with another config to allow us to put strings\n     * in the config array that will be replaced by objects before\n     * normalization.\n     * @param {Object} config The config to preprocess.\n     * @returns {Object} The preprocessed config.\n     */\n    [ConfigArraySymbol.preprocessConfig](config) {\n        if (config === \"eslint:recommended\") {\n\n            // if we are in a Node.js environment warn the user\n            if (typeof process !== \"undefined\" && process.emitWarning) {\n                process.emitWarning(\"The 'eslint:recommended' string configuration is deprecated and will be replaced by the @eslint/js package's 'recommended' config.\");\n            }\n\n            return jsPlugin.configs.recommended;\n        }\n\n        if (config === \"eslint:all\") {\n\n            // if we are in a Node.js environment warn the user\n            if (typeof process !== \"undefined\" && process.emitWarning) {\n                process.emitWarning(\"The 'eslint:all' string configuration is deprecated and will be replaced by the @eslint/js package's 'all' config.\");\n            }\n\n            return jsPlugin.configs.all;\n        }\n\n        /*\n         * If a config object has `ignores` and no other non-meta fields, then it's an object\n         * for global ignores. If `shouldIgnore` is false, that object shouldn't apply,\n         * so we'll remove its `ignores`.\n         */\n        if (\n            !this.shouldIgnore &&\n            !this[originalBaseConfig].includes(config) &&\n            config.ignores &&\n            Object.keys(config).filter(key => !META_FIELDS.has(key)).length === 1\n        ) {\n            /* eslint-disable-next-line no-unused-vars -- need to strip off other keys */\n            const { ignores, ...otherKeys } = config;\n\n            return otherKeys;\n        }\n\n        return config;\n    }\n\n    /**\n     * Finalizes the config by replacing plugin references with their objects\n     * and validating rule option schemas.\n     * @param {Object} config The config to finalize.\n     * @returns {Object} The finalized config.\n     * @throws {TypeError} If the config is invalid.\n     */\n    [ConfigArraySymbol.finalizeConfig](config) {\n\n        const { plugins, languageOptions, processor } = config;\n        let parserName, processorName;\n        let invalidParser = false,\n            invalidProcessor = false;\n\n        // Check parser value\n        if (languageOptions && languageOptions.parser) {\n            const { parser } = languageOptions;\n\n            if (typeof parser === \"object\") {\n                parserName = getObjectId(parser);\n\n                if (!parserName) {\n                    invalidParser = true;\n                }\n\n            } else {\n                invalidParser = true;\n            }\n        }\n\n        // Check processor value\n        if (processor) {\n            if (typeof processor === \"string\") {\n                const { pluginName, objectName: localProcessorName } = splitPluginIdentifier(processor);\n\n                processorName = processor;\n\n                if (!plugins || !plugins[pluginName] || !plugins[pluginName].processors || !plugins[pluginName].processors[localProcessorName]) {\n                    throw new TypeError(`Key \"processor\": Could not find \"${localProcessorName}\" in plugin \"${pluginName}\".`);\n                }\n\n                config.processor = plugins[pluginName].processors[localProcessorName];\n            } else if (typeof processor === \"object\") {\n                processorName = getObjectId(processor);\n\n                if (!processorName) {\n                    invalidProcessor = true;\n                }\n\n            } else {\n                invalidProcessor = true;\n            }\n        }\n\n        ruleValidator.validate(config);\n\n        // apply special logic for serialization into JSON\n        /* eslint-disable object-shorthand -- shorthand would change \"this\" value */\n        Object.defineProperty(config, \"toJSON\", {\n            value: function() {\n\n                if (invalidParser) {\n                    throw new Error(\"Could not serialize parser object (missing 'meta' object).\");\n                }\n\n                if (invalidProcessor) {\n                    throw new Error(\"Could not serialize processor object (missing 'meta' object).\");\n                }\n\n                return {\n                    ...this,\n                    plugins: Object.entries(plugins).map(([namespace, plugin]) => {\n\n                        const pluginId = getObjectId(plugin);\n\n                        if (!pluginId) {\n                            return namespace;\n                        }\n\n                        return `${namespace}:${pluginId}`;\n                    }),\n                    languageOptions: {\n                        ...languageOptions,\n                        parser: parserName\n                    },\n                    processor: processorName\n                };\n            }\n        });\n        /* eslint-enable object-shorthand -- ok to enable now */\n\n        return config;\n    }\n    /* eslint-enable class-methods-use-this -- Desired as instance method */\n\n}\n\nexports.FlatConfigArray = FlatConfigArray;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}