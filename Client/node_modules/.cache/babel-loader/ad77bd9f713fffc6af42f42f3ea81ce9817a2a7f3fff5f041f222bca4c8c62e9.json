{"ast":null,"code":"/**\n * @fileoverview Rule to flag use constant conditions\n * @author Christian Schulz <http://rndm.de>\n */\n\n\"use strict\";\n\nconst {\n  isConstant\n} = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"Disallow constant expressions in conditions\",\n      recommended: true,\n      url: \"https://eslint.org/docs/latest/rules/no-constant-condition\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        checkLoops: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpected: \"Unexpected constant condition.\"\n    }\n  },\n  create(context) {\n    const options = context.options[0] || {},\n      checkLoops = options.checkLoops !== false,\n      loopSetStack = [];\n    const sourceCode = context.sourceCode;\n    let loopsInCurrentScope = new Set();\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Tracks when the given node contains a constant condition.\n     * @param {ASTNode} node The AST node to check.\n     * @returns {void}\n     * @private\n     */\n    function trackConstantConditionLoop(node) {\n      if (node.test && isConstant(sourceCode.getScope(node), node.test, true)) {\n        loopsInCurrentScope.add(node);\n      }\n    }\n\n    /**\n     * Reports when the set contains the given constant condition node\n     * @param {ASTNode} node The AST node to check.\n     * @returns {void}\n     * @private\n     */\n    function checkConstantConditionLoopInSet(node) {\n      if (loopsInCurrentScope.has(node)) {\n        loopsInCurrentScope.delete(node);\n        context.report({\n          node: node.test,\n          messageId: \"unexpected\"\n        });\n      }\n    }\n\n    /**\n     * Reports when the given node contains a constant condition.\n     * @param {ASTNode} node The AST node to check.\n     * @returns {void}\n     * @private\n     */\n    function reportIfConstant(node) {\n      if (node.test && isConstant(sourceCode.getScope(node), node.test, true)) {\n        context.report({\n          node: node.test,\n          messageId: \"unexpected\"\n        });\n      }\n    }\n\n    /**\n     * Stores current set of constant loops in loopSetStack temporarily\n     * and uses a new set to track constant loops\n     * @returns {void}\n     * @private\n     */\n    function enterFunction() {\n      loopSetStack.push(loopsInCurrentScope);\n      loopsInCurrentScope = new Set();\n    }\n\n    /**\n     * Reports when the set still contains stored constant conditions\n     * @returns {void}\n     * @private\n     */\n    function exitFunction() {\n      loopsInCurrentScope = loopSetStack.pop();\n    }\n\n    /**\n     * Checks node when checkLoops option is enabled\n     * @param {ASTNode} node The AST node to check.\n     * @returns {void}\n     * @private\n     */\n    function checkLoop(node) {\n      if (checkLoops) {\n        trackConstantConditionLoop(node);\n      }\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n      ConditionalExpression: reportIfConstant,\n      IfStatement: reportIfConstant,\n      WhileStatement: checkLoop,\n      \"WhileStatement:exit\": checkConstantConditionLoopInSet,\n      DoWhileStatement: checkLoop,\n      \"DoWhileStatement:exit\": checkConstantConditionLoopInSet,\n      ForStatement: checkLoop,\n      \"ForStatement > .test\": node => checkLoop(node.parent),\n      \"ForStatement:exit\": checkConstantConditionLoopInSet,\n      FunctionDeclaration: enterFunction,\n      \"FunctionDeclaration:exit\": exitFunction,\n      FunctionExpression: enterFunction,\n      \"FunctionExpression:exit\": exitFunction,\n      YieldExpression: () => loopsInCurrentScope.clear()\n    };\n  }\n};","map":{"version":3,"names":["isConstant","require","module","exports","meta","type","docs","description","recommended","url","schema","properties","checkLoops","default","additionalProperties","messages","unexpected","create","context","options","loopSetStack","sourceCode","loopsInCurrentScope","Set","trackConstantConditionLoop","node","test","getScope","add","checkConstantConditionLoopInSet","has","delete","report","messageId","reportIfConstant","enterFunction","push","exitFunction","pop","checkLoop","ConditionalExpression","IfStatement","WhileStatement","DoWhileStatement","ForStatement","parent","FunctionDeclaration","FunctionExpression","YieldExpression","clear"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-constant-condition.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag use constant conditions\n * @author Christian Schulz <http://rndm.de>\n */\n\n\"use strict\";\n\nconst { isConstant } = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"Disallow constant expressions in conditions\",\n            recommended: true,\n            url: \"https://eslint.org/docs/latest/rules/no-constant-condition\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    checkLoops: {\n                        type: \"boolean\",\n                        default: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpected: \"Unexpected constant condition.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options[0] || {},\n            checkLoops = options.checkLoops !== false,\n            loopSetStack = [];\n        const sourceCode = context.sourceCode;\n\n        let loopsInCurrentScope = new Set();\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Tracks when the given node contains a constant condition.\n         * @param {ASTNode} node The AST node to check.\n         * @returns {void}\n         * @private\n         */\n        function trackConstantConditionLoop(node) {\n            if (node.test && isConstant(sourceCode.getScope(node), node.test, true)) {\n                loopsInCurrentScope.add(node);\n            }\n        }\n\n        /**\n         * Reports when the set contains the given constant condition node\n         * @param {ASTNode} node The AST node to check.\n         * @returns {void}\n         * @private\n         */\n        function checkConstantConditionLoopInSet(node) {\n            if (loopsInCurrentScope.has(node)) {\n                loopsInCurrentScope.delete(node);\n                context.report({ node: node.test, messageId: \"unexpected\" });\n            }\n        }\n\n        /**\n         * Reports when the given node contains a constant condition.\n         * @param {ASTNode} node The AST node to check.\n         * @returns {void}\n         * @private\n         */\n        function reportIfConstant(node) {\n            if (node.test && isConstant(sourceCode.getScope(node), node.test, true)) {\n                context.report({ node: node.test, messageId: \"unexpected\" });\n            }\n        }\n\n        /**\n         * Stores current set of constant loops in loopSetStack temporarily\n         * and uses a new set to track constant loops\n         * @returns {void}\n         * @private\n         */\n        function enterFunction() {\n            loopSetStack.push(loopsInCurrentScope);\n            loopsInCurrentScope = new Set();\n        }\n\n        /**\n         * Reports when the set still contains stored constant conditions\n         * @returns {void}\n         * @private\n         */\n        function exitFunction() {\n            loopsInCurrentScope = loopSetStack.pop();\n        }\n\n        /**\n         * Checks node when checkLoops option is enabled\n         * @param {ASTNode} node The AST node to check.\n         * @returns {void}\n         * @private\n         */\n        function checkLoop(node) {\n            if (checkLoops) {\n                trackConstantConditionLoop(node);\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            ConditionalExpression: reportIfConstant,\n            IfStatement: reportIfConstant,\n            WhileStatement: checkLoop,\n            \"WhileStatement:exit\": checkConstantConditionLoopInSet,\n            DoWhileStatement: checkLoop,\n            \"DoWhileStatement:exit\": checkConstantConditionLoopInSet,\n            ForStatement: checkLoop,\n            \"ForStatement > .test\": node => checkLoop(node.parent),\n            \"ForStatement:exit\": checkConstantConditionLoopInSet,\n            FunctionDeclaration: enterFunction,\n            \"FunctionDeclaration:exit\": exitFunction,\n            FunctionExpression: enterFunction,\n            \"FunctionExpression:exit\": exitFunction,\n            YieldExpression: () => loopsInCurrentScope.clear()\n        };\n\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}