{"ast":null,"code":"/**\n * @fileoverview Counts the cyclomatic complexity of each function of the script. See http://en.wikipedia.org/wiki/Cyclomatic_complexity.\n * Counts the number of if, conditional, for, while, try, switch/case,\n * @author Patrick Brosset\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\nconst {\n  upperCaseFirst\n} = require(\"../shared/string-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Enforce a maximum cyclomatic complexity allowed in a program\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/complexity\"\n    },\n    schema: [{\n      oneOf: [{\n        type: \"integer\",\n        minimum: 0\n      }, {\n        type: \"object\",\n        properties: {\n          maximum: {\n            type: \"integer\",\n            minimum: 0\n          },\n          max: {\n            type: \"integer\",\n            minimum: 0\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      complex: \"{{name}} has a complexity of {{complexity}}. Maximum allowed is {{max}}.\"\n    }\n  },\n  create(context) {\n    const option = context.options[0];\n    let THRESHOLD = 20;\n    if (typeof option === \"object\" && (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))) {\n      THRESHOLD = option.maximum || option.max;\n    } else if (typeof option === \"number\") {\n      THRESHOLD = option;\n    }\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    // Using a stack to store complexity per code path\n    const complexities = [];\n\n    /**\n     * Increase the complexity of the code path in context\n     * @returns {void}\n     * @private\n     */\n    function increaseComplexity() {\n      complexities[complexities.length - 1]++;\n    }\n\n    //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n    return {\n      onCodePathStart() {\n        // The initial complexity is 1, representing one execution path in the CodePath\n        complexities.push(1);\n      },\n      // Each branching in the code adds 1 to the complexity\n      CatchClause: increaseComplexity,\n      ConditionalExpression: increaseComplexity,\n      LogicalExpression: increaseComplexity,\n      ForStatement: increaseComplexity,\n      ForInStatement: increaseComplexity,\n      ForOfStatement: increaseComplexity,\n      IfStatement: increaseComplexity,\n      WhileStatement: increaseComplexity,\n      DoWhileStatement: increaseComplexity,\n      // Avoid `default`\n      \"SwitchCase[test]\": increaseComplexity,\n      // Logical assignment operators have short-circuiting behavior\n      AssignmentExpression(node) {\n        if (astUtils.isLogicalAssignmentOperator(node.operator)) {\n          increaseComplexity();\n        }\n      },\n      onCodePathEnd(codePath, node) {\n        const complexity = complexities.pop();\n\n        /*\n         * This rule only evaluates complexity of functions, so \"program\" is excluded.\n         * Class field initializers and class static blocks are implicit functions. Therefore,\n         * they shouldn't contribute to the enclosing function's complexity, but their\n         * own complexity should be evaluated.\n         */\n        if (codePath.origin !== \"function\" && codePath.origin !== \"class-field-initializer\" && codePath.origin !== \"class-static-block\") {\n          return;\n        }\n        if (complexity > THRESHOLD) {\n          let name;\n          if (codePath.origin === \"class-field-initializer\") {\n            name = \"class field initializer\";\n          } else if (codePath.origin === \"class-static-block\") {\n            name = \"class static block\";\n          } else {\n            name = astUtils.getFunctionNameWithKind(node);\n          }\n          context.report({\n            node,\n            messageId: \"complex\",\n            data: {\n              name: upperCaseFirst(name),\n              complexity,\n              max: THRESHOLD\n            }\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","upperCaseFirst","module","exports","meta","type","docs","description","recommended","url","schema","oneOf","minimum","properties","maximum","max","additionalProperties","messages","complex","create","context","option","options","THRESHOLD","Object","prototype","hasOwnProperty","call","complexities","increaseComplexity","length","onCodePathStart","push","CatchClause","ConditionalExpression","LogicalExpression","ForStatement","ForInStatement","ForOfStatement","IfStatement","WhileStatement","DoWhileStatement","AssignmentExpression","node","isLogicalAssignmentOperator","operator","onCodePathEnd","codePath","complexity","pop","origin","name","getFunctionNameWithKind","report","messageId","data"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/complexity.js"],"sourcesContent":["/**\n * @fileoverview Counts the cyclomatic complexity of each function of the script. See http://en.wikipedia.org/wiki/Cyclomatic_complexity.\n * Counts the number of if, conditional, for, while, try, switch/case,\n * @author Patrick Brosset\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\nconst { upperCaseFirst } = require(\"../shared/string-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Enforce a maximum cyclomatic complexity allowed in a program\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/complexity\"\n        },\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        type: \"integer\",\n                        minimum: 0\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            maximum: {\n                                type: \"integer\",\n                                minimum: 0\n                            },\n                            max: {\n                                type: \"integer\",\n                                minimum: 0\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ],\n\n        messages: {\n            complex: \"{{name}} has a complexity of {{complexity}}. Maximum allowed is {{max}}.\"\n        }\n    },\n\n    create(context) {\n        const option = context.options[0];\n        let THRESHOLD = 20;\n\n        if (\n            typeof option === \"object\" &&\n            (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))\n        ) {\n            THRESHOLD = option.maximum || option.max;\n        } else if (typeof option === \"number\") {\n            THRESHOLD = option;\n        }\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        // Using a stack to store complexity per code path\n        const complexities = [];\n\n        /**\n         * Increase the complexity of the code path in context\n         * @returns {void}\n         * @private\n         */\n        function increaseComplexity() {\n            complexities[complexities.length - 1]++;\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n\n            onCodePathStart() {\n\n                // The initial complexity is 1, representing one execution path in the CodePath\n                complexities.push(1);\n            },\n\n            // Each branching in the code adds 1 to the complexity\n            CatchClause: increaseComplexity,\n            ConditionalExpression: increaseComplexity,\n            LogicalExpression: increaseComplexity,\n            ForStatement: increaseComplexity,\n            ForInStatement: increaseComplexity,\n            ForOfStatement: increaseComplexity,\n            IfStatement: increaseComplexity,\n            WhileStatement: increaseComplexity,\n            DoWhileStatement: increaseComplexity,\n\n            // Avoid `default`\n            \"SwitchCase[test]\": increaseComplexity,\n\n            // Logical assignment operators have short-circuiting behavior\n            AssignmentExpression(node) {\n                if (astUtils.isLogicalAssignmentOperator(node.operator)) {\n                    increaseComplexity();\n                }\n            },\n\n            onCodePathEnd(codePath, node) {\n                const complexity = complexities.pop();\n\n                /*\n                 * This rule only evaluates complexity of functions, so \"program\" is excluded.\n                 * Class field initializers and class static blocks are implicit functions. Therefore,\n                 * they shouldn't contribute to the enclosing function's complexity, but their\n                 * own complexity should be evaluated.\n                 */\n                if (\n                    codePath.origin !== \"function\" &&\n                    codePath.origin !== \"class-field-initializer\" &&\n                    codePath.origin !== \"class-static-block\"\n                ) {\n                    return;\n                }\n\n                if (complexity > THRESHOLD) {\n                    let name;\n\n                    if (codePath.origin === \"class-field-initializer\") {\n                        name = \"class field initializer\";\n                    } else if (codePath.origin === \"class-static-block\") {\n                        name = \"class static block\";\n                    } else {\n                        name = astUtils.getFunctionNameWithKind(node);\n                    }\n\n                    context.report({\n                        node,\n                        messageId: \"complex\",\n                        data: {\n                            name: upperCaseFirst(name),\n                            complexity,\n                            max: THRESHOLD\n                        }\n                    });\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}