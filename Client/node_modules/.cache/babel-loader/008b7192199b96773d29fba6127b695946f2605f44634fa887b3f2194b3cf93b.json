{"ast":null,"code":"/**\n * @fileoverview Provide the function that emits deprecation warnings.\n * @author Toru Nagashima <http://github.com/mysticatea>\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst path = require(\"path\");\n\n//------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\n\n// Definitions for deprecation warnings.\nconst deprecationWarningMessages = {\n  ESLINT_LEGACY_ECMAFEATURES: \"The 'ecmaFeatures' config file property is deprecated and has no effect.\"\n};\nconst sourceFileErrorCache = new Set();\n\n/**\n * Emits a deprecation warning containing a given filepath. A new deprecation warning is emitted\n * for each unique file path, but repeated invocations with the same file path have no effect.\n * No warnings are emitted if the `--no-deprecation` or `--no-warnings` Node runtime flags are active.\n * @param {string} source The name of the configuration source to report the warning for.\n * @param {string} errorCode The warning message to show.\n * @returns {void}\n */\nfunction emitDeprecationWarning(source, errorCode) {\n  const cacheKey = JSON.stringify({\n    source,\n    errorCode\n  });\n  if (sourceFileErrorCache.has(cacheKey)) {\n    return;\n  }\n  sourceFileErrorCache.add(cacheKey);\n  const rel = path.relative(process.cwd(), source);\n  const message = deprecationWarningMessages[errorCode];\n  process.emitWarning(`${message} (found in \"${rel}\")`, \"DeprecationWarning\", errorCode);\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  emitDeprecationWarning\n};","map":{"version":3,"names":["path","require","deprecationWarningMessages","ESLINT_LEGACY_ECMAFEATURES","sourceFileErrorCache","Set","emitDeprecationWarning","source","errorCode","cacheKey","JSON","stringify","has","add","rel","relative","process","cwd","message","emitWarning","module","exports"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/shared/deprecation-warnings.js"],"sourcesContent":["/**\n * @fileoverview Provide the function that emits deprecation warnings.\n * @author Toru Nagashima <http://github.com/mysticatea>\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst path = require(\"path\");\n\n//------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\n\n// Definitions for deprecation warnings.\nconst deprecationWarningMessages = {\n    ESLINT_LEGACY_ECMAFEATURES:\n        \"The 'ecmaFeatures' config file property is deprecated and has no effect.\"\n};\n\nconst sourceFileErrorCache = new Set();\n\n/**\n * Emits a deprecation warning containing a given filepath. A new deprecation warning is emitted\n * for each unique file path, but repeated invocations with the same file path have no effect.\n * No warnings are emitted if the `--no-deprecation` or `--no-warnings` Node runtime flags are active.\n * @param {string} source The name of the configuration source to report the warning for.\n * @param {string} errorCode The warning message to show.\n * @returns {void}\n */\nfunction emitDeprecationWarning(source, errorCode) {\n    const cacheKey = JSON.stringify({ source, errorCode });\n\n    if (sourceFileErrorCache.has(cacheKey)) {\n        return;\n    }\n\n    sourceFileErrorCache.add(cacheKey);\n\n    const rel = path.relative(process.cwd(), source);\n    const message = deprecationWarningMessages[errorCode];\n\n    process.emitWarning(\n        `${message} (found in \"${rel}\")`,\n        \"DeprecationWarning\",\n        errorCode\n    );\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    emitDeprecationWarning\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;;AAE5B;AACA;AACA;;AAEA;AACA,MAAMC,0BAA0B,GAAG;EAC/BC,0BAA0B,EACtB;AACR,CAAC;AAED,MAAMC,oBAAoB,GAAG,IAAIC,GAAG,CAAC,CAAC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,sBAAsBA,CAACC,MAAM,EAAEC,SAAS,EAAE;EAC/C,MAAMC,QAAQ,GAAGC,IAAI,CAACC,SAAS,CAAC;IAAEJ,MAAM;IAAEC;EAAU,CAAC,CAAC;EAEtD,IAAIJ,oBAAoB,CAACQ,GAAG,CAACH,QAAQ,CAAC,EAAE;IACpC;EACJ;EAEAL,oBAAoB,CAACS,GAAG,CAACJ,QAAQ,CAAC;EAElC,MAAMK,GAAG,GAAGd,IAAI,CAACe,QAAQ,CAACC,OAAO,CAACC,GAAG,CAAC,CAAC,EAAEV,MAAM,CAAC;EAChD,MAAMW,OAAO,GAAGhB,0BAA0B,CAACM,SAAS,CAAC;EAErDQ,OAAO,CAACG,WAAW,CACf,GAAGD,OAAO,eAAeJ,GAAG,IAAI,EAChC,oBAAoB,EACpBN,SACJ,CAAC;AACL;;AAEA;AACA;AACA;;AAEAY,MAAM,CAACC,OAAO,GAAG;EACbf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}