{"ast":null,"code":"/**\n * @fileoverview Rule to disallow specified names in exports\n * @author Milos Djermanovic\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow specified names in exports\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/no-restricted-exports\"\n    },\n    schema: [{\n      anyOf: [{\n        type: \"object\",\n        properties: {\n          restrictedNamedExports: {\n            type: \"array\",\n            items: {\n              type: \"string\"\n            },\n            uniqueItems: true\n          }\n        },\n        additionalProperties: false\n      }, {\n        type: \"object\",\n        properties: {\n          restrictedNamedExports: {\n            type: \"array\",\n            items: {\n              type: \"string\",\n              pattern: \"^(?!default$)\"\n            },\n            uniqueItems: true\n          },\n          restrictDefaultExports: {\n            type: \"object\",\n            properties: {\n              // Allow/Disallow `export default foo; export default 42; export default function foo() {}` format\n              direct: {\n                type: \"boolean\"\n              },\n              // Allow/Disallow `export { foo as default };` declarations\n              named: {\n                type: \"boolean\"\n              },\n              //  Allow/Disallow `export { default } from \"mod\"; export { default as default } from \"mod\";` declarations\n              defaultFrom: {\n                type: \"boolean\"\n              },\n              //  Allow/Disallow `export { foo as default } from \"mod\";` declarations\n              namedFrom: {\n                type: \"boolean\"\n              },\n              //  Allow/Disallow `export * as default from \"mod\"`; declarations\n              namespaceFrom: {\n                type: \"boolean\"\n              }\n            },\n            additionalProperties: false\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      restrictedNamed: \"'{{name}}' is restricted from being used as an exported name.\",\n      restrictedDefault: \"Exporting 'default' is restricted.\"\n    }\n  },\n  create(context) {\n    const restrictedNames = new Set(context.options[0] && context.options[0].restrictedNamedExports);\n    const restrictDefaultExports = context.options[0] && context.options[0].restrictDefaultExports;\n    const sourceCode = context.sourceCode;\n\n    /**\n     * Checks and reports given exported name.\n     * @param {ASTNode} node exported `Identifier` or string `Literal` node to check.\n     * @returns {void}\n     */\n    function checkExportedName(node) {\n      const name = astUtils.getModuleExportName(node);\n      if (restrictedNames.has(name)) {\n        context.report({\n          node,\n          messageId: \"restrictedNamed\",\n          data: {\n            name\n          }\n        });\n        return;\n      }\n      if (name === \"default\") {\n        if (node.parent.type === \"ExportAllDeclaration\") {\n          if (restrictDefaultExports && restrictDefaultExports.namespaceFrom) {\n            context.report({\n              node,\n              messageId: \"restrictedDefault\"\n            });\n          }\n        } else {\n          // ExportSpecifier\n          const isSourceSpecified = !!node.parent.parent.source;\n          const specifierLocalName = astUtils.getModuleExportName(node.parent.local);\n          if (!isSourceSpecified && restrictDefaultExports && restrictDefaultExports.named) {\n            context.report({\n              node,\n              messageId: \"restrictedDefault\"\n            });\n            return;\n          }\n          if (isSourceSpecified && restrictDefaultExports) {\n            if (specifierLocalName === \"default\" && restrictDefaultExports.defaultFrom || specifierLocalName !== \"default\" && restrictDefaultExports.namedFrom) {\n              context.report({\n                node,\n                messageId: \"restrictedDefault\"\n              });\n            }\n          }\n        }\n      }\n    }\n    return {\n      ExportAllDeclaration(node) {\n        if (node.exported) {\n          checkExportedName(node.exported);\n        }\n      },\n      ExportDefaultDeclaration(node) {\n        if (restrictDefaultExports && restrictDefaultExports.direct) {\n          context.report({\n            node,\n            messageId: \"restrictedDefault\"\n          });\n        }\n      },\n      ExportNamedDeclaration(node) {\n        const declaration = node.declaration;\n        if (declaration) {\n          if (declaration.type === \"FunctionDeclaration\" || declaration.type === \"ClassDeclaration\") {\n            checkExportedName(declaration.id);\n          } else if (declaration.type === \"VariableDeclaration\") {\n            sourceCode.getDeclaredVariables(declaration).map(v => v.defs.find(d => d.parent === declaration)).map(d => d.name) // Identifier nodes\n            .forEach(checkExportedName);\n          }\n        } else {\n          node.specifiers.map(s => s.exported).forEach(checkExportedName);\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","anyOf","properties","restrictedNamedExports","items","uniqueItems","additionalProperties","pattern","restrictDefaultExports","direct","named","defaultFrom","namedFrom","namespaceFrom","messages","restrictedNamed","restrictedDefault","create","context","restrictedNames","Set","options","sourceCode","checkExportedName","node","name","getModuleExportName","has","report","messageId","data","parent","isSourceSpecified","source","specifierLocalName","local","ExportAllDeclaration","exported","ExportDefaultDeclaration","ExportNamedDeclaration","declaration","id","getDeclaredVariables","map","v","defs","find","d","forEach","specifiers","s"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-restricted-exports.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow specified names in exports\n * @author Milos Djermanovic\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow specified names in exports\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-restricted-exports\"\n        },\n\n        schema: [{\n            anyOf: [\n                {\n                    type: \"object\",\n                    properties: {\n                        restrictedNamedExports: {\n                            type: \"array\",\n                            items: {\n                                type: \"string\"\n                            },\n                            uniqueItems: true\n                        }\n                    },\n                    additionalProperties: false\n                },\n                {\n                    type: \"object\",\n                    properties: {\n                        restrictedNamedExports: {\n                            type: \"array\",\n                            items: {\n                                type: \"string\",\n                                pattern: \"^(?!default$)\"\n                            },\n                            uniqueItems: true\n                        },\n                        restrictDefaultExports: {\n                            type: \"object\",\n                            properties: {\n\n                                // Allow/Disallow `export default foo; export default 42; export default function foo() {}` format\n                                direct: {\n                                    type: \"boolean\"\n                                },\n\n                                // Allow/Disallow `export { foo as default };` declarations\n                                named: {\n                                    type: \"boolean\"\n                                },\n\n                                //  Allow/Disallow `export { default } from \"mod\"; export { default as default } from \"mod\";` declarations\n                                defaultFrom: {\n                                    type: \"boolean\"\n                                },\n\n                                //  Allow/Disallow `export { foo as default } from \"mod\";` declarations\n                                namedFrom: {\n                                    type: \"boolean\"\n                                },\n\n                                //  Allow/Disallow `export * as default from \"mod\"`; declarations\n                                namespaceFrom: {\n                                    type: \"boolean\"\n                                }\n                            },\n                            additionalProperties: false\n                        }\n                    },\n                    additionalProperties: false\n                }\n            ]\n        }],\n\n        messages: {\n            restrictedNamed: \"'{{name}}' is restricted from being used as an exported name.\",\n            restrictedDefault: \"Exporting 'default' is restricted.\"\n        }\n    },\n\n    create(context) {\n\n        const restrictedNames = new Set(context.options[0] && context.options[0].restrictedNamedExports);\n        const restrictDefaultExports = context.options[0] && context.options[0].restrictDefaultExports;\n        const sourceCode = context.sourceCode;\n\n        /**\n         * Checks and reports given exported name.\n         * @param {ASTNode} node exported `Identifier` or string `Literal` node to check.\n         * @returns {void}\n         */\n        function checkExportedName(node) {\n            const name = astUtils.getModuleExportName(node);\n\n            if (restrictedNames.has(name)) {\n                context.report({\n                    node,\n                    messageId: \"restrictedNamed\",\n                    data: { name }\n                });\n                return;\n            }\n\n            if (name === \"default\") {\n                if (node.parent.type === \"ExportAllDeclaration\") {\n                    if (restrictDefaultExports && restrictDefaultExports.namespaceFrom) {\n                        context.report({\n                            node,\n                            messageId: \"restrictedDefault\"\n                        });\n                    }\n\n                } else { // ExportSpecifier\n                    const isSourceSpecified = !!node.parent.parent.source;\n                    const specifierLocalName = astUtils.getModuleExportName(node.parent.local);\n\n                    if (!isSourceSpecified && restrictDefaultExports && restrictDefaultExports.named) {\n                        context.report({\n                            node,\n                            messageId: \"restrictedDefault\"\n                        });\n                        return;\n                    }\n\n                    if (isSourceSpecified && restrictDefaultExports) {\n                        if (\n                            (specifierLocalName === \"default\" && restrictDefaultExports.defaultFrom) ||\n                            (specifierLocalName !== \"default\" && restrictDefaultExports.namedFrom)\n                        ) {\n                            context.report({\n                                node,\n                                messageId: \"restrictedDefault\"\n                            });\n                        }\n                    }\n                }\n            }\n        }\n\n        return {\n            ExportAllDeclaration(node) {\n                if (node.exported) {\n                    checkExportedName(node.exported);\n                }\n            },\n\n            ExportDefaultDeclaration(node) {\n                if (restrictDefaultExports && restrictDefaultExports.direct) {\n                    context.report({\n                        node,\n                        messageId: \"restrictedDefault\"\n                    });\n                }\n            },\n\n            ExportNamedDeclaration(node) {\n                const declaration = node.declaration;\n\n                if (declaration) {\n                    if (declaration.type === \"FunctionDeclaration\" || declaration.type === \"ClassDeclaration\") {\n                        checkExportedName(declaration.id);\n                    } else if (declaration.type === \"VariableDeclaration\") {\n                        sourceCode.getDeclaredVariables(declaration)\n                            .map(v => v.defs.find(d => d.parent === declaration))\n                            .map(d => d.name) // Identifier nodes\n                            .forEach(checkExportedName);\n                    }\n                } else {\n                    node.specifiers\n                        .map(s => s.exported)\n                        .forEach(checkExportedName);\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;;AAEA;AACAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,qCAAqC;MAClDC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,CAAC;MACLC,KAAK,EAAE,CACH;QACIN,IAAI,EAAE,QAAQ;QACdO,UAAU,EAAE;UACRC,sBAAsB,EAAE;YACpBR,IAAI,EAAE,OAAO;YACbS,KAAK,EAAE;cACHT,IAAI,EAAE;YACV,CAAC;YACDU,WAAW,EAAE;UACjB;QACJ,CAAC;QACDC,oBAAoB,EAAE;MAC1B,CAAC,EACD;QACIX,IAAI,EAAE,QAAQ;QACdO,UAAU,EAAE;UACRC,sBAAsB,EAAE;YACpBR,IAAI,EAAE,OAAO;YACbS,KAAK,EAAE;cACHT,IAAI,EAAE,QAAQ;cACdY,OAAO,EAAE;YACb,CAAC;YACDF,WAAW,EAAE;UACjB,CAAC;UACDG,sBAAsB,EAAE;YACpBb,IAAI,EAAE,QAAQ;YACdO,UAAU,EAAE;cAER;cACAO,MAAM,EAAE;gBACJd,IAAI,EAAE;cACV,CAAC;cAED;cACAe,KAAK,EAAE;gBACHf,IAAI,EAAE;cACV,CAAC;cAED;cACAgB,WAAW,EAAE;gBACThB,IAAI,EAAE;cACV,CAAC;cAED;cACAiB,SAAS,EAAE;gBACPjB,IAAI,EAAE;cACV,CAAC;cAED;cACAkB,aAAa,EAAE;gBACXlB,IAAI,EAAE;cACV;YACJ,CAAC;YACDW,oBAAoB,EAAE;UAC1B;QACJ,CAAC;QACDA,oBAAoB,EAAE;MAC1B,CAAC;IAET,CAAC,CAAC;IAEFQ,QAAQ,EAAE;MACNC,eAAe,EAAE,+DAA+D;MAChFC,iBAAiB,EAAE;IACvB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ,MAAMC,eAAe,GAAG,IAAIC,GAAG,CAACF,OAAO,CAACG,OAAO,CAAC,CAAC,CAAC,IAAIH,OAAO,CAACG,OAAO,CAAC,CAAC,CAAC,CAAClB,sBAAsB,CAAC;IAChG,MAAMK,sBAAsB,GAAGU,OAAO,CAACG,OAAO,CAAC,CAAC,CAAC,IAAIH,OAAO,CAACG,OAAO,CAAC,CAAC,CAAC,CAACb,sBAAsB;IAC9F,MAAMc,UAAU,GAAGJ,OAAO,CAACI,UAAU;;IAErC;AACR;AACA;AACA;AACA;IACQ,SAASC,iBAAiBA,CAACC,IAAI,EAAE;MAC7B,MAAMC,IAAI,GAAGnC,QAAQ,CAACoC,mBAAmB,CAACF,IAAI,CAAC;MAE/C,IAAIL,eAAe,CAACQ,GAAG,CAACF,IAAI,CAAC,EAAE;QAC3BP,OAAO,CAACU,MAAM,CAAC;UACXJ,IAAI;UACJK,SAAS,EAAE,iBAAiB;UAC5BC,IAAI,EAAE;YAAEL;UAAK;QACjB,CAAC,CAAC;QACF;MACJ;MAEA,IAAIA,IAAI,KAAK,SAAS,EAAE;QACpB,IAAID,IAAI,CAACO,MAAM,CAACpC,IAAI,KAAK,sBAAsB,EAAE;UAC7C,IAAIa,sBAAsB,IAAIA,sBAAsB,CAACK,aAAa,EAAE;YAChEK,OAAO,CAACU,MAAM,CAAC;cACXJ,IAAI;cACJK,SAAS,EAAE;YACf,CAAC,CAAC;UACN;QAEJ,CAAC,MAAM;UAAE;UACL,MAAMG,iBAAiB,GAAG,CAAC,CAACR,IAAI,CAACO,MAAM,CAACA,MAAM,CAACE,MAAM;UACrD,MAAMC,kBAAkB,GAAG5C,QAAQ,CAACoC,mBAAmB,CAACF,IAAI,CAACO,MAAM,CAACI,KAAK,CAAC;UAE1E,IAAI,CAACH,iBAAiB,IAAIxB,sBAAsB,IAAIA,sBAAsB,CAACE,KAAK,EAAE;YAC9EQ,OAAO,CAACU,MAAM,CAAC;cACXJ,IAAI;cACJK,SAAS,EAAE;YACf,CAAC,CAAC;YACF;UACJ;UAEA,IAAIG,iBAAiB,IAAIxB,sBAAsB,EAAE;YAC7C,IACK0B,kBAAkB,KAAK,SAAS,IAAI1B,sBAAsB,CAACG,WAAW,IACtEuB,kBAAkB,KAAK,SAAS,IAAI1B,sBAAsB,CAACI,SAAU,EACxE;cACEM,OAAO,CAACU,MAAM,CAAC;gBACXJ,IAAI;gBACJK,SAAS,EAAE;cACf,CAAC,CAAC;YACN;UACJ;QACJ;MACJ;IACJ;IAEA,OAAO;MACHO,oBAAoBA,CAACZ,IAAI,EAAE;QACvB,IAAIA,IAAI,CAACa,QAAQ,EAAE;UACfd,iBAAiB,CAACC,IAAI,CAACa,QAAQ,CAAC;QACpC;MACJ,CAAC;MAEDC,wBAAwBA,CAACd,IAAI,EAAE;QAC3B,IAAIhB,sBAAsB,IAAIA,sBAAsB,CAACC,MAAM,EAAE;UACzDS,OAAO,CAACU,MAAM,CAAC;YACXJ,IAAI;YACJK,SAAS,EAAE;UACf,CAAC,CAAC;QACN;MACJ,CAAC;MAEDU,sBAAsBA,CAACf,IAAI,EAAE;QACzB,MAAMgB,WAAW,GAAGhB,IAAI,CAACgB,WAAW;QAEpC,IAAIA,WAAW,EAAE;UACb,IAAIA,WAAW,CAAC7C,IAAI,KAAK,qBAAqB,IAAI6C,WAAW,CAAC7C,IAAI,KAAK,kBAAkB,EAAE;YACvF4B,iBAAiB,CAACiB,WAAW,CAACC,EAAE,CAAC;UACrC,CAAC,MAAM,IAAID,WAAW,CAAC7C,IAAI,KAAK,qBAAqB,EAAE;YACnD2B,UAAU,CAACoB,oBAAoB,CAACF,WAAW,CAAC,CACvCG,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAChB,MAAM,KAAKS,WAAW,CAAC,CAAC,CACpDG,GAAG,CAACI,CAAC,IAAIA,CAAC,CAACtB,IAAI,CAAC,CAAC;YAAA,CACjBuB,OAAO,CAACzB,iBAAiB,CAAC;UACnC;QACJ,CAAC,MAAM;UACHC,IAAI,CAACyB,UAAU,CACVN,GAAG,CAACO,CAAC,IAAIA,CAAC,CAACb,QAAQ,CAAC,CACpBW,OAAO,CAACzB,iBAAiB,CAAC;QACnC;MACJ;IACJ,CAAC;EACL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}