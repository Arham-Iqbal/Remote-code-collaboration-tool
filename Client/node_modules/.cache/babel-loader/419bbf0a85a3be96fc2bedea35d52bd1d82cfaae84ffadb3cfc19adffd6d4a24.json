{"ast":null,"code":"/**\n * @fileoverview Rule to flag when the same variable is declared more then once.\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow variable redeclaration\",\n      recommended: true,\n      url: \"https://eslint.org/docs/latest/rules/no-redeclare\"\n    },\n    messages: {\n      redeclared: \"'{{id}}' is already defined.\",\n      redeclaredAsBuiltin: \"'{{id}}' is already defined as a built-in global variable.\",\n      redeclaredBySyntax: \"'{{id}}' is already defined by a variable declaration.\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        builtinGlobals: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n  create(context) {\n    const options = {\n      builtinGlobals: Boolean(context.options.length === 0 || context.options[0].builtinGlobals)\n    };\n    const sourceCode = context.sourceCode;\n\n    /**\n     * Iterate declarations of a given variable.\n     * @param {escope.variable} variable The variable object to iterate declarations.\n     * @returns {IterableIterator<{type:string,node:ASTNode,loc:SourceLocation}>} The declarations.\n     */\n    function* iterateDeclarations(variable) {\n      if (options.builtinGlobals && (variable.eslintImplicitGlobalSetting === \"readonly\" || variable.eslintImplicitGlobalSetting === \"writable\")) {\n        yield {\n          type: \"builtin\"\n        };\n      }\n      for (const id of variable.identifiers) {\n        yield {\n          type: \"syntax\",\n          node: id,\n          loc: id.loc\n        };\n      }\n      if (variable.eslintExplicitGlobalComments) {\n        for (const comment of variable.eslintExplicitGlobalComments) {\n          yield {\n            type: \"comment\",\n            node: comment,\n            loc: astUtils.getNameLocationInGlobalDirectiveComment(sourceCode, comment, variable.name)\n          };\n        }\n      }\n    }\n\n    /**\n     * Find variables in a given scope and flag redeclared ones.\n     * @param {Scope} scope An eslint-scope scope object.\n     * @returns {void}\n     * @private\n     */\n    function findVariablesInScope(scope) {\n      for (const variable of scope.variables) {\n        const [declaration, ...extraDeclarations] = iterateDeclarations(variable);\n        if (extraDeclarations.length === 0) {\n          continue;\n        }\n\n        /*\n         * If the type of a declaration is different from the type of\n         * the first declaration, it shows the location of the first\n         * declaration.\n         */\n        const detailMessageId = declaration.type === \"builtin\" ? \"redeclaredAsBuiltin\" : \"redeclaredBySyntax\";\n        const data = {\n          id: variable.name\n        };\n\n        // Report extra declarations.\n        for (const {\n          type,\n          node,\n          loc\n        } of extraDeclarations) {\n          const messageId = type === declaration.type ? \"redeclared\" : detailMessageId;\n          context.report({\n            node,\n            loc,\n            messageId,\n            data\n          });\n        }\n      }\n    }\n\n    /**\n     * Find variables in the current scope.\n     * @param {ASTNode} node The node of the current scope.\n     * @returns {void}\n     * @private\n     */\n    function checkForBlock(node) {\n      const scope = sourceCode.getScope(node);\n\n      /*\n       * In ES5, some node type such as `BlockStatement` doesn't have that scope.\n       * `scope.block` is a different node in such a case.\n       */\n      if (scope.block === node) {\n        findVariablesInScope(scope);\n      }\n    }\n    return {\n      Program(node) {\n        const scope = sourceCode.getScope(node);\n        findVariablesInScope(scope);\n\n        // Node.js or ES modules has a special scope.\n        if (scope.type === \"global\" && scope.childScopes[0] &&\n        // The special scope's block is the Program node.\n        scope.block === scope.childScopes[0].block) {\n          findVariablesInScope(scope.childScopes[0]);\n        }\n      },\n      FunctionDeclaration: checkForBlock,\n      FunctionExpression: checkForBlock,\n      ArrowFunctionExpression: checkForBlock,\n      StaticBlock: checkForBlock,\n      BlockStatement: checkForBlock,\n      ForStatement: checkForBlock,\n      ForInStatement: checkForBlock,\n      ForOfStatement: checkForBlock,\n      SwitchStatement: checkForBlock\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","messages","redeclared","redeclaredAsBuiltin","redeclaredBySyntax","schema","properties","builtinGlobals","default","additionalProperties","create","context","options","Boolean","length","sourceCode","iterateDeclarations","variable","eslintImplicitGlobalSetting","id","identifiers","node","loc","eslintExplicitGlobalComments","comment","getNameLocationInGlobalDirectiveComment","name","findVariablesInScope","scope","variables","declaration","extraDeclarations","detailMessageId","data","messageId","report","checkForBlock","getScope","block","Program","childScopes","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","StaticBlock","BlockStatement","ForStatement","ForInStatement","ForOfStatement","SwitchStatement"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-redeclare.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag when the same variable is declared more then once.\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow variable redeclaration\",\n            recommended: true,\n            url: \"https://eslint.org/docs/latest/rules/no-redeclare\"\n        },\n\n        messages: {\n            redeclared: \"'{{id}}' is already defined.\",\n            redeclaredAsBuiltin: \"'{{id}}' is already defined as a built-in global variable.\",\n            redeclaredBySyntax: \"'{{id}}' is already defined by a variable declaration.\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    builtinGlobals: { type: \"boolean\", default: true }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create(context) {\n        const options = {\n            builtinGlobals: Boolean(\n                context.options.length === 0 ||\n                context.options[0].builtinGlobals\n            )\n        };\n        const sourceCode = context.sourceCode;\n\n        /**\n         * Iterate declarations of a given variable.\n         * @param {escope.variable} variable The variable object to iterate declarations.\n         * @returns {IterableIterator<{type:string,node:ASTNode,loc:SourceLocation}>} The declarations.\n         */\n        function *iterateDeclarations(variable) {\n            if (options.builtinGlobals && (\n                variable.eslintImplicitGlobalSetting === \"readonly\" ||\n                variable.eslintImplicitGlobalSetting === \"writable\"\n            )) {\n                yield { type: \"builtin\" };\n            }\n\n            for (const id of variable.identifiers) {\n                yield { type: \"syntax\", node: id, loc: id.loc };\n            }\n\n            if (variable.eslintExplicitGlobalComments) {\n                for (const comment of variable.eslintExplicitGlobalComments) {\n                    yield {\n                        type: \"comment\",\n                        node: comment,\n                        loc: astUtils.getNameLocationInGlobalDirectiveComment(\n                            sourceCode,\n                            comment,\n                            variable.name\n                        )\n                    };\n                }\n            }\n        }\n\n        /**\n         * Find variables in a given scope and flag redeclared ones.\n         * @param {Scope} scope An eslint-scope scope object.\n         * @returns {void}\n         * @private\n         */\n        function findVariablesInScope(scope) {\n            for (const variable of scope.variables) {\n                const [\n                    declaration,\n                    ...extraDeclarations\n                ] = iterateDeclarations(variable);\n\n                if (extraDeclarations.length === 0) {\n                    continue;\n                }\n\n                /*\n                 * If the type of a declaration is different from the type of\n                 * the first declaration, it shows the location of the first\n                 * declaration.\n                 */\n                const detailMessageId = declaration.type === \"builtin\"\n                    ? \"redeclaredAsBuiltin\"\n                    : \"redeclaredBySyntax\";\n                const data = { id: variable.name };\n\n                // Report extra declarations.\n                for (const { type, node, loc } of extraDeclarations) {\n                    const messageId = type === declaration.type\n                        ? \"redeclared\"\n                        : detailMessageId;\n\n                    context.report({ node, loc, messageId, data });\n                }\n            }\n        }\n\n        /**\n         * Find variables in the current scope.\n         * @param {ASTNode} node The node of the current scope.\n         * @returns {void}\n         * @private\n         */\n        function checkForBlock(node) {\n            const scope = sourceCode.getScope(node);\n\n            /*\n             * In ES5, some node type such as `BlockStatement` doesn't have that scope.\n             * `scope.block` is a different node in such a case.\n             */\n            if (scope.block === node) {\n                findVariablesInScope(scope);\n            }\n        }\n\n        return {\n            Program(node) {\n                const scope = sourceCode.getScope(node);\n\n                findVariablesInScope(scope);\n\n                // Node.js or ES modules has a special scope.\n                if (\n                    scope.type === \"global\" &&\n                    scope.childScopes[0] &&\n\n                    // The special scope's block is the Program node.\n                    scope.block === scope.childScopes[0].block\n                ) {\n                    findVariablesInScope(scope.childScopes[0]);\n                }\n            },\n\n            FunctionDeclaration: checkForBlock,\n            FunctionExpression: checkForBlock,\n            ArrowFunctionExpression: checkForBlock,\n\n            StaticBlock: checkForBlock,\n\n            BlockStatement: checkForBlock,\n            ForStatement: checkForBlock,\n            ForInStatement: checkForBlock,\n            ForOfStatement: checkForBlock,\n            SwitchStatement: checkForBlock\n        };\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}