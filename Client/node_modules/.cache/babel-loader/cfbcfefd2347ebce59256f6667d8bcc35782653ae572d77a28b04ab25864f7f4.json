{"ast":null,"code":"/**\n * @fileoverview Rule to flag comparison where left part is the same as the right\n * part.\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"Disallow comparisons where both sides are exactly the same\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/no-self-compare\"\n    },\n    schema: [],\n    messages: {\n      comparingToSelf: \"Comparing to itself is potentially pointless.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.sourceCode;\n\n    /**\n     * Determines whether two nodes are composed of the same tokens.\n     * @param {ASTNode} nodeA The first node\n     * @param {ASTNode} nodeB The second node\n     * @returns {boolean} true if the nodes have identical token representations\n     */\n    function hasSameTokens(nodeA, nodeB) {\n      const tokensA = sourceCode.getTokens(nodeA);\n      const tokensB = sourceCode.getTokens(nodeB);\n      return tokensA.length === tokensB.length && tokensA.every((token, index) => token.type === tokensB[index].type && token.value === tokensB[index].value);\n    }\n    return {\n      BinaryExpression(node) {\n        const operators = new Set([\"===\", \"==\", \"!==\", \"!=\", \">\", \"<\", \">=\", \"<=\"]);\n        if (operators.has(node.operator) && hasSameTokens(node.left, node.right)) {\n          context.report({\n            node,\n            messageId: \"comparingToSelf\"\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","recommended","url","schema","messages","comparingToSelf","create","context","sourceCode","hasSameTokens","nodeA","nodeB","tokensA","getTokens","tokensB","length","every","token","index","value","BinaryExpression","node","operators","Set","has","operator","left","right","report","messageId"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-self-compare.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag comparison where left part is the same as the right\n * part.\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"Disallow comparisons where both sides are exactly the same\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-self-compare\"\n        },\n\n        schema: [],\n\n        messages: {\n            comparingToSelf: \"Comparing to itself is potentially pointless.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.sourceCode;\n\n        /**\n         * Determines whether two nodes are composed of the same tokens.\n         * @param {ASTNode} nodeA The first node\n         * @param {ASTNode} nodeB The second node\n         * @returns {boolean} true if the nodes have identical token representations\n         */\n        function hasSameTokens(nodeA, nodeB) {\n            const tokensA = sourceCode.getTokens(nodeA);\n            const tokensB = sourceCode.getTokens(nodeB);\n\n            return tokensA.length === tokensB.length &&\n                tokensA.every((token, index) => token.type === tokensB[index].type && token.value === tokensB[index].value);\n        }\n\n        return {\n\n            BinaryExpression(node) {\n                const operators = new Set([\"===\", \"==\", \"!==\", \"!=\", \">\", \"<\", \">=\", \"<=\"]);\n\n                if (operators.has(node.operator) && hasSameTokens(node.left, node.right)) {\n                    context.report({ node, messageId: \"comparingToSelf\" });\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;;AAEA;AACAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,SAAS;IAEfC,IAAI,EAAE;MACFC,WAAW,EAAE,4DAA4D;MACzEC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,eAAe,EAAE;IACrB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACC,UAAU;;IAErC;AACR;AACA;AACA;AACA;AACA;IACQ,SAASC,aAAaA,CAACC,KAAK,EAAEC,KAAK,EAAE;MACjC,MAAMC,OAAO,GAAGJ,UAAU,CAACK,SAAS,CAACH,KAAK,CAAC;MAC3C,MAAMI,OAAO,GAAGN,UAAU,CAACK,SAAS,CAACF,KAAK,CAAC;MAE3C,OAAOC,OAAO,CAACG,MAAM,KAAKD,OAAO,CAACC,MAAM,IACpCH,OAAO,CAACI,KAAK,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAKD,KAAK,CAACnB,IAAI,KAAKgB,OAAO,CAACI,KAAK,CAAC,CAACpB,IAAI,IAAImB,KAAK,CAACE,KAAK,KAAKL,OAAO,CAACI,KAAK,CAAC,CAACC,KAAK,CAAC;IACnH;IAEA,OAAO;MAEHC,gBAAgBA,CAACC,IAAI,EAAE;QACnB,MAAMC,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAE3E,IAAID,SAAS,CAACE,GAAG,CAACH,IAAI,CAACI,QAAQ,CAAC,IAAIhB,aAAa,CAACY,IAAI,CAACK,IAAI,EAAEL,IAAI,CAACM,KAAK,CAAC,EAAE;UACtEpB,OAAO,CAACqB,MAAM,CAAC;YAAEP,IAAI;YAAEQ,SAAS,EAAE;UAAkB,CAAC,CAAC;QAC1D;MACJ;IACJ,CAAC;EAEL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}