{"ast":null,"code":"/**\n * @fileoverview Rule to check spacing between template tags and their literals\n * @author Jonathan Wilsson\n * @deprecated in ESLint v8.53.0\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    deprecated: true,\n    replacedBy: [],\n    type: \"layout\",\n    docs: {\n      description: \"Require or disallow spacing between template tags and their literals\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/template-tag-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }],\n    messages: {\n      unexpected: \"Unexpected space between template tag and template literal.\",\n      missing: \"Missing space between template tag and template literal.\"\n    }\n  },\n  create(context) {\n    const never = context.options[0] !== \"always\";\n    const sourceCode = context.sourceCode;\n\n    /**\n     * Check if a space is present between a template tag and its literal\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n    function checkSpacing(node) {\n      const tagToken = sourceCode.getTokenBefore(node.quasi);\n      const literalToken = sourceCode.getFirstToken(node.quasi);\n      const hasWhitespace = sourceCode.isSpaceBetweenTokens(tagToken, literalToken);\n      if (never && hasWhitespace) {\n        context.report({\n          node,\n          loc: {\n            start: tagToken.loc.end,\n            end: literalToken.loc.start\n          },\n          messageId: \"unexpected\",\n          fix(fixer) {\n            const comments = sourceCode.getCommentsBefore(node.quasi);\n\n            // Don't fix anything if there's a single line comment after the template tag\n            if (comments.some(comment => comment.type === \"Line\")) {\n              return null;\n            }\n            return fixer.replaceTextRange([tagToken.range[1], literalToken.range[0]], comments.reduce((text, comment) => text + sourceCode.getText(comment), \"\"));\n          }\n        });\n      } else if (!never && !hasWhitespace) {\n        context.report({\n          node,\n          loc: {\n            start: node.loc.start,\n            end: literalToken.loc.start\n          },\n          messageId: \"missing\",\n          fix(fixer) {\n            return fixer.insertTextAfter(tagToken, \" \");\n          }\n        });\n      }\n    }\n    return {\n      TaggedTemplateExpression: checkSpacing\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","deprecated","replacedBy","type","docs","description","recommended","url","fixable","schema","enum","messages","unexpected","missing","create","context","never","options","sourceCode","checkSpacing","node","tagToken","getTokenBefore","quasi","literalToken","getFirstToken","hasWhitespace","isSpaceBetweenTokens","report","loc","start","end","messageId","fix","fixer","comments","getCommentsBefore","some","comment","replaceTextRange","range","reduce","text","getText","insertTextAfter","TaggedTemplateExpression"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/template-tag-spacing.js"],"sourcesContent":["/**\n * @fileoverview Rule to check spacing between template tags and their literals\n * @author Jonathan Wilsson\n * @deprecated in ESLint v8.53.0\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        deprecated: true,\n        replacedBy: [],\n        type: \"layout\",\n\n        docs: {\n            description: \"Require or disallow spacing between template tags and their literals\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/template-tag-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            { enum: [\"always\", \"never\"] }\n        ],\n        messages: {\n            unexpected: \"Unexpected space between template tag and template literal.\",\n            missing: \"Missing space between template tag and template literal.\"\n        }\n    },\n\n    create(context) {\n        const never = context.options[0] !== \"always\";\n        const sourceCode = context.sourceCode;\n\n        /**\n         * Check if a space is present between a template tag and its literal\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkSpacing(node) {\n            const tagToken = sourceCode.getTokenBefore(node.quasi);\n            const literalToken = sourceCode.getFirstToken(node.quasi);\n            const hasWhitespace = sourceCode.isSpaceBetweenTokens(tagToken, literalToken);\n\n            if (never && hasWhitespace) {\n                context.report({\n                    node,\n                    loc: {\n                        start: tagToken.loc.end,\n                        end: literalToken.loc.start\n                    },\n                    messageId: \"unexpected\",\n                    fix(fixer) {\n                        const comments = sourceCode.getCommentsBefore(node.quasi);\n\n                        // Don't fix anything if there's a single line comment after the template tag\n                        if (comments.some(comment => comment.type === \"Line\")) {\n                            return null;\n                        }\n\n                        return fixer.replaceTextRange(\n                            [tagToken.range[1], literalToken.range[0]],\n                            comments.reduce((text, comment) => text + sourceCode.getText(comment), \"\")\n                        );\n                    }\n                });\n            } else if (!never && !hasWhitespace) {\n                context.report({\n                    node,\n                    loc: {\n                        start: node.loc.start,\n                        end: literalToken.loc.start\n                    },\n                    messageId: \"missing\",\n                    fix(fixer) {\n                        return fixer.insertTextAfter(tagToken, \" \");\n                    }\n                });\n            }\n        }\n\n        return {\n            TaggedTemplateExpression: checkSpacing\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;;AAEA;AACAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,UAAU,EAAE,IAAI;IAChBC,UAAU,EAAE,EAAE;IACdC,IAAI,EAAE,QAAQ;IAEdC,IAAI,EAAE;MACFC,WAAW,EAAE,sEAAsE;MACnFC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,OAAO,EAAE,YAAY;IAErBC,MAAM,EAAE,CACJ;MAAEC,IAAI,EAAE,CAAC,QAAQ,EAAE,OAAO;IAAE,CAAC,CAChC;IACDC,QAAQ,EAAE;MACNC,UAAU,EAAE,6DAA6D;MACzEC,OAAO,EAAE;IACb;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,KAAK,GAAGD,OAAO,CAACE,OAAO,CAAC,CAAC,CAAC,KAAK,QAAQ;IAC7C,MAAMC,UAAU,GAAGH,OAAO,CAACG,UAAU;;IAErC;AACR;AACA;AACA;AACA;AACA;IACQ,SAASC,YAAYA,CAACC,IAAI,EAAE;MACxB,MAAMC,QAAQ,GAAGH,UAAU,CAACI,cAAc,CAACF,IAAI,CAACG,KAAK,CAAC;MACtD,MAAMC,YAAY,GAAGN,UAAU,CAACO,aAAa,CAACL,IAAI,CAACG,KAAK,CAAC;MACzD,MAAMG,aAAa,GAAGR,UAAU,CAACS,oBAAoB,CAACN,QAAQ,EAAEG,YAAY,CAAC;MAE7E,IAAIR,KAAK,IAAIU,aAAa,EAAE;QACxBX,OAAO,CAACa,MAAM,CAAC;UACXR,IAAI;UACJS,GAAG,EAAE;YACDC,KAAK,EAAET,QAAQ,CAACQ,GAAG,CAACE,GAAG;YACvBA,GAAG,EAAEP,YAAY,CAACK,GAAG,CAACC;UAC1B,CAAC;UACDE,SAAS,EAAE,YAAY;UACvBC,GAAGA,CAACC,KAAK,EAAE;YACP,MAAMC,QAAQ,GAAGjB,UAAU,CAACkB,iBAAiB,CAAChB,IAAI,CAACG,KAAK,CAAC;;YAEzD;YACA,IAAIY,QAAQ,CAACE,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACnC,IAAI,KAAK,MAAM,CAAC,EAAE;cACnD,OAAO,IAAI;YACf;YAEA,OAAO+B,KAAK,CAACK,gBAAgB,CACzB,CAAClB,QAAQ,CAACmB,KAAK,CAAC,CAAC,CAAC,EAAEhB,YAAY,CAACgB,KAAK,CAAC,CAAC,CAAC,CAAC,EAC1CL,QAAQ,CAACM,MAAM,CAAC,CAACC,IAAI,EAAEJ,OAAO,KAAKI,IAAI,GAAGxB,UAAU,CAACyB,OAAO,CAACL,OAAO,CAAC,EAAE,EAAE,CAC7E,CAAC;UACL;QACJ,CAAC,CAAC;MACN,CAAC,MAAM,IAAI,CAACtB,KAAK,IAAI,CAACU,aAAa,EAAE;QACjCX,OAAO,CAACa,MAAM,CAAC;UACXR,IAAI;UACJS,GAAG,EAAE;YACDC,KAAK,EAAEV,IAAI,CAACS,GAAG,CAACC,KAAK;YACrBC,GAAG,EAAEP,YAAY,CAACK,GAAG,CAACC;UAC1B,CAAC;UACDE,SAAS,EAAE,SAAS;UACpBC,GAAGA,CAACC,KAAK,EAAE;YACP,OAAOA,KAAK,CAACU,eAAe,CAACvB,QAAQ,EAAE,GAAG,CAAC;UAC/C;QACJ,CAAC,CAAC;MACN;IACJ;IAEA,OAAO;MACHwB,wBAAwB,EAAE1B;IAC9B,CAAC;EACL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}