{"ast":null,"code":"/**\n * @fileoverview Comma spacing - validates spacing before and after comma\n * @author Vignesh Anand aka vegetableman.\n * @deprecated in ESLint v8.53.0\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    deprecated: true,\n    replacedBy: [],\n    type: \"layout\",\n    docs: {\n      description: \"Enforce consistent spacing before and after commas\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/comma-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      type: \"object\",\n      properties: {\n        before: {\n          type: \"boolean\",\n          default: false\n        },\n        after: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      missing: \"A space is required {{loc}} ','.\",\n      unexpected: \"There should be no space {{loc}} ','.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.sourceCode;\n    const tokensAndComments = sourceCode.tokensAndComments;\n    const options = {\n      before: context.options[0] ? context.options[0].before : false,\n      after: context.options[0] ? context.options[0].after : true\n    };\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    // list of comma tokens to ignore for the check of leading whitespace\n    const commaTokensToIgnore = [];\n\n    /**\n     * Reports a spacing error with an appropriate message.\n     * @param {ASTNode} node The binary expression node to report.\n     * @param {string} loc Is the error \"before\" or \"after\" the comma?\n     * @param {ASTNode} otherNode The node at the left or right of `node`\n     * @returns {void}\n     * @private\n     */\n    function report(node, loc, otherNode) {\n      context.report({\n        node,\n        fix(fixer) {\n          if (options[loc]) {\n            if (loc === \"before\") {\n              return fixer.insertTextBefore(node, \" \");\n            }\n            return fixer.insertTextAfter(node, \" \");\n          }\n          let start, end;\n          const newText = \"\";\n          if (loc === \"before\") {\n            start = otherNode.range[1];\n            end = node.range[0];\n          } else {\n            start = node.range[1];\n            end = otherNode.range[0];\n          }\n          return fixer.replaceTextRange([start, end], newText);\n        },\n        messageId: options[loc] ? \"missing\" : \"unexpected\",\n        data: {\n          loc\n        }\n      });\n    }\n\n    /**\n     * Adds null elements of the given ArrayExpression or ArrayPattern node to the ignore list.\n     * @param {ASTNode} node An ArrayExpression or ArrayPattern node.\n     * @returns {void}\n     */\n    function addNullElementsToIgnoreList(node) {\n      let previousToken = sourceCode.getFirstToken(node);\n      node.elements.forEach(element => {\n        let token;\n        if (element === null) {\n          token = sourceCode.getTokenAfter(previousToken);\n          if (astUtils.isCommaToken(token)) {\n            commaTokensToIgnore.push(token);\n          }\n        } else {\n          token = sourceCode.getTokenAfter(element);\n        }\n        previousToken = token;\n      });\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n      \"Program:exit\"() {\n        tokensAndComments.forEach((token, i) => {\n          if (!astUtils.isCommaToken(token)) {\n            return;\n          }\n          const previousToken = tokensAndComments[i - 1];\n          const nextToken = tokensAndComments[i + 1];\n          if (previousToken && !astUtils.isCommaToken(previousToken) &&\n          // ignore spacing between two commas\n\n          /*\n           * `commaTokensToIgnore` are ending commas of `null` elements (array holes/elisions).\n           * In addition to spacing between two commas, this can also ignore:\n           *\n           *   - Spacing after `[` (controlled by array-bracket-spacing)\n           *       Example: [ , ]\n           *                 ^\n           *   - Spacing after a comment (for backwards compatibility, this was possibly unintentional)\n           *       Example: [a, /* * / ,]\n           *                          ^\n           */\n          !commaTokensToIgnore.includes(token) && astUtils.isTokenOnSameLine(previousToken, token) && options.before !== sourceCode.isSpaceBetweenTokens(previousToken, token)) {\n            report(token, \"before\", previousToken);\n          }\n          if (nextToken && !astUtils.isCommaToken(nextToken) &&\n          // ignore spacing between two commas\n          !astUtils.isClosingParenToken(nextToken) &&\n          // controlled by space-in-parens\n          !astUtils.isClosingBracketToken(nextToken) &&\n          // controlled by array-bracket-spacing\n          !astUtils.isClosingBraceToken(nextToken) &&\n          // controlled by object-curly-spacing\n          !(!options.after && nextToken.type === \"Line\") &&\n          // special case, allow space before line comment\n          astUtils.isTokenOnSameLine(token, nextToken) && options.after !== sourceCode.isSpaceBetweenTokens(token, nextToken)) {\n            report(token, \"after\", nextToken);\n          }\n        });\n      },\n      ArrayExpression: addNullElementsToIgnoreList,\n      ArrayPattern: addNullElementsToIgnoreList\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","deprecated","replacedBy","type","docs","description","recommended","url","fixable","schema","properties","before","default","after","additionalProperties","messages","missing","unexpected","create","context","sourceCode","tokensAndComments","options","commaTokensToIgnore","report","node","loc","otherNode","fix","fixer","insertTextBefore","insertTextAfter","start","end","newText","range","replaceTextRange","messageId","data","addNullElementsToIgnoreList","previousToken","getFirstToken","elements","forEach","element","token","getTokenAfter","isCommaToken","push","Program:exit","i","nextToken","includes","isTokenOnSameLine","isSpaceBetweenTokens","isClosingParenToken","isClosingBracketToken","isClosingBraceToken","ArrayExpression","ArrayPattern"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/comma-spacing.js"],"sourcesContent":["/**\n * @fileoverview Comma spacing - validates spacing before and after comma\n * @author Vignesh Anand aka vegetableman.\n * @deprecated in ESLint v8.53.0\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        deprecated: true,\n        replacedBy: [],\n        type: \"layout\",\n\n        docs: {\n            description: \"Enforce consistent spacing before and after commas\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/comma-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    before: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    after: {\n                        type: \"boolean\",\n                        default: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            missing: \"A space is required {{loc}} ','.\",\n            unexpected: \"There should be no space {{loc}} ','.\"\n        }\n    },\n\n    create(context) {\n\n        const sourceCode = context.sourceCode;\n        const tokensAndComments = sourceCode.tokensAndComments;\n\n        const options = {\n            before: context.options[0] ? context.options[0].before : false,\n            after: context.options[0] ? context.options[0].after : true\n        };\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        // list of comma tokens to ignore for the check of leading whitespace\n        const commaTokensToIgnore = [];\n\n        /**\n         * Reports a spacing error with an appropriate message.\n         * @param {ASTNode} node The binary expression node to report.\n         * @param {string} loc Is the error \"before\" or \"after\" the comma?\n         * @param {ASTNode} otherNode The node at the left or right of `node`\n         * @returns {void}\n         * @private\n         */\n        function report(node, loc, otherNode) {\n            context.report({\n                node,\n                fix(fixer) {\n                    if (options[loc]) {\n                        if (loc === \"before\") {\n                            return fixer.insertTextBefore(node, \" \");\n                        }\n                        return fixer.insertTextAfter(node, \" \");\n\n                    }\n                    let start, end;\n                    const newText = \"\";\n\n                    if (loc === \"before\") {\n                        start = otherNode.range[1];\n                        end = node.range[0];\n                    } else {\n                        start = node.range[1];\n                        end = otherNode.range[0];\n                    }\n\n                    return fixer.replaceTextRange([start, end], newText);\n\n                },\n                messageId: options[loc] ? \"missing\" : \"unexpected\",\n                data: {\n                    loc\n                }\n            });\n        }\n\n        /**\n         * Adds null elements of the given ArrayExpression or ArrayPattern node to the ignore list.\n         * @param {ASTNode} node An ArrayExpression or ArrayPattern node.\n         * @returns {void}\n         */\n        function addNullElementsToIgnoreList(node) {\n            let previousToken = sourceCode.getFirstToken(node);\n\n            node.elements.forEach(element => {\n                let token;\n\n                if (element === null) {\n                    token = sourceCode.getTokenAfter(previousToken);\n\n                    if (astUtils.isCommaToken(token)) {\n                        commaTokensToIgnore.push(token);\n                    }\n                } else {\n                    token = sourceCode.getTokenAfter(element);\n                }\n\n                previousToken = token;\n            });\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            \"Program:exit\"() {\n                tokensAndComments.forEach((token, i) => {\n\n                    if (!astUtils.isCommaToken(token)) {\n                        return;\n                    }\n\n                    const previousToken = tokensAndComments[i - 1];\n                    const nextToken = tokensAndComments[i + 1];\n\n                    if (\n                        previousToken &&\n                        !astUtils.isCommaToken(previousToken) && // ignore spacing between two commas\n\n                        /*\n                         * `commaTokensToIgnore` are ending commas of `null` elements (array holes/elisions).\n                         * In addition to spacing between two commas, this can also ignore:\n                         *\n                         *   - Spacing after `[` (controlled by array-bracket-spacing)\n                         *       Example: [ , ]\n                         *                 ^\n                         *   - Spacing after a comment (for backwards compatibility, this was possibly unintentional)\n                         *       Example: [a, /* * / ,]\n                         *                          ^\n                         */\n                        !commaTokensToIgnore.includes(token) &&\n\n                        astUtils.isTokenOnSameLine(previousToken, token) &&\n                        options.before !== sourceCode.isSpaceBetweenTokens(previousToken, token)\n                    ) {\n                        report(token, \"before\", previousToken);\n                    }\n\n                    if (\n                        nextToken &&\n                        !astUtils.isCommaToken(nextToken) && // ignore spacing between two commas\n                        !astUtils.isClosingParenToken(nextToken) && // controlled by space-in-parens\n                        !astUtils.isClosingBracketToken(nextToken) && // controlled by array-bracket-spacing\n                        !astUtils.isClosingBraceToken(nextToken) && // controlled by object-curly-spacing\n                        !(!options.after && nextToken.type === \"Line\") && // special case, allow space before line comment\n                        astUtils.isTokenOnSameLine(token, nextToken) &&\n                        options.after !== sourceCode.isSpaceBetweenTokens(token, nextToken)\n                    ) {\n                        report(token, \"after\", nextToken);\n                    }\n                });\n            },\n            ArrayExpression: addNullElementsToIgnoreList,\n            ArrayPattern: addNullElementsToIgnoreList\n\n        };\n\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}