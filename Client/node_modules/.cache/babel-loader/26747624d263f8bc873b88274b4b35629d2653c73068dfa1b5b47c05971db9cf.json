{"ast":null,"code":"/**\n * @fileoverview Disallows or enforces spaces inside computed properties.\n * @author Jamund Ferguson\n * @deprecated in ESLint v8.53.0\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    deprecated: true,\n    replacedBy: [],\n    type: \"layout\",\n    docs: {\n      description: \"Enforce consistent spacing inside computed property brackets\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/computed-property-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }, {\n      type: \"object\",\n      properties: {\n        enforceForClassMembers: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpectedSpaceBefore: \"There should be no space before '{{tokenValue}}'.\",\n      unexpectedSpaceAfter: \"There should be no space after '{{tokenValue}}'.\",\n      missingSpaceBefore: \"A space is required before '{{tokenValue}}'.\",\n      missingSpaceAfter: \"A space is required after '{{tokenValue}}'.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.sourceCode;\n    const propertyNameMustBeSpaced = context.options[0] === \"always\"; // default is \"never\"\n    const enforceForClassMembers = !context.options[1] || context.options[1].enforceForClassMembers;\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Reports that there shouldn't be a space after the first token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @param {Token} tokenAfter The token after `token`.\n     * @returns {void}\n     */\n    function reportNoBeginningSpace(node, token, tokenAfter) {\n      context.report({\n        node,\n        loc: {\n          start: token.loc.end,\n          end: tokenAfter.loc.start\n        },\n        messageId: \"unexpectedSpaceAfter\",\n        data: {\n          tokenValue: token.value\n        },\n        fix(fixer) {\n          return fixer.removeRange([token.range[1], tokenAfter.range[0]]);\n        }\n      });\n    }\n\n    /**\n     * Reports that there shouldn't be a space before the last token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @param {Token} tokenBefore The token before `token`.\n     * @returns {void}\n     */\n    function reportNoEndingSpace(node, token, tokenBefore) {\n      context.report({\n        node,\n        loc: {\n          start: tokenBefore.loc.end,\n          end: token.loc.start\n        },\n        messageId: \"unexpectedSpaceBefore\",\n        data: {\n          tokenValue: token.value\n        },\n        fix(fixer) {\n          return fixer.removeRange([tokenBefore.range[1], token.range[0]]);\n        }\n      });\n    }\n\n    /**\n     * Reports that there should be a space after the first token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n    function reportRequiredBeginningSpace(node, token) {\n      context.report({\n        node,\n        loc: token.loc,\n        messageId: \"missingSpaceAfter\",\n        data: {\n          tokenValue: token.value\n        },\n        fix(fixer) {\n          return fixer.insertTextAfter(token, \" \");\n        }\n      });\n    }\n\n    /**\n     * Reports that there should be a space before the last token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n    function reportRequiredEndingSpace(node, token) {\n      context.report({\n        node,\n        loc: token.loc,\n        messageId: \"missingSpaceBefore\",\n        data: {\n          tokenValue: token.value\n        },\n        fix(fixer) {\n          return fixer.insertTextBefore(token, \" \");\n        }\n      });\n    }\n\n    /**\n     * Returns a function that checks the spacing of a node on the property name\n     * that was passed in.\n     * @param {string} propertyName The property on the node to check for spacing\n     * @returns {Function} A function that will check spacing on a node\n     */\n    function checkSpacing(propertyName) {\n      return function (node) {\n        if (!node.computed) {\n          return;\n        }\n        const property = node[propertyName];\n        const before = sourceCode.getTokenBefore(property, astUtils.isOpeningBracketToken),\n          first = sourceCode.getTokenAfter(before, {\n            includeComments: true\n          }),\n          after = sourceCode.getTokenAfter(property, astUtils.isClosingBracketToken),\n          last = sourceCode.getTokenBefore(after, {\n            includeComments: true\n          });\n        if (astUtils.isTokenOnSameLine(before, first)) {\n          if (propertyNameMustBeSpaced) {\n            if (!sourceCode.isSpaceBetweenTokens(before, first) && astUtils.isTokenOnSameLine(before, first)) {\n              reportRequiredBeginningSpace(node, before);\n            }\n          } else {\n            if (sourceCode.isSpaceBetweenTokens(before, first)) {\n              reportNoBeginningSpace(node, before, first);\n            }\n          }\n        }\n        if (astUtils.isTokenOnSameLine(last, after)) {\n          if (propertyNameMustBeSpaced) {\n            if (!sourceCode.isSpaceBetweenTokens(last, after) && astUtils.isTokenOnSameLine(last, after)) {\n              reportRequiredEndingSpace(node, after);\n            }\n          } else {\n            if (sourceCode.isSpaceBetweenTokens(last, after)) {\n              reportNoEndingSpace(node, after, last);\n            }\n          }\n        }\n      };\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    const listeners = {\n      Property: checkSpacing(\"key\"),\n      MemberExpression: checkSpacing(\"property\")\n    };\n    if (enforceForClassMembers) {\n      listeners.MethodDefinition = listeners.PropertyDefinition = listeners.Property;\n    }\n    return listeners;\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","deprecated","replacedBy","type","docs","description","recommended","url","fixable","schema","enum","properties","enforceForClassMembers","default","additionalProperties","messages","unexpectedSpaceBefore","unexpectedSpaceAfter","missingSpaceBefore","missingSpaceAfter","create","context","sourceCode","propertyNameMustBeSpaced","options","reportNoBeginningSpace","node","token","tokenAfter","report","loc","start","end","messageId","data","tokenValue","value","fix","fixer","removeRange","range","reportNoEndingSpace","tokenBefore","reportRequiredBeginningSpace","insertTextAfter","reportRequiredEndingSpace","insertTextBefore","checkSpacing","propertyName","computed","property","before","getTokenBefore","isOpeningBracketToken","first","getTokenAfter","includeComments","after","isClosingBracketToken","last","isTokenOnSameLine","isSpaceBetweenTokens","listeners","Property","MemberExpression","MethodDefinition","PropertyDefinition"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/computed-property-spacing.js"],"sourcesContent":["/**\n * @fileoverview Disallows or enforces spaces inside computed properties.\n * @author Jamund Ferguson\n * @deprecated in ESLint v8.53.0\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        deprecated: true,\n        replacedBy: [],\n        type: \"layout\",\n\n        docs: {\n            description: \"Enforce consistent spacing inside computed property brackets\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/computed-property-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                enum: [\"always\", \"never\"]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    enforceForClassMembers: {\n                        type: \"boolean\",\n                        default: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpectedSpaceBefore: \"There should be no space before '{{tokenValue}}'.\",\n            unexpectedSpaceAfter: \"There should be no space after '{{tokenValue}}'.\",\n\n            missingSpaceBefore: \"A space is required before '{{tokenValue}}'.\",\n            missingSpaceAfter: \"A space is required after '{{tokenValue}}'.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.sourceCode;\n        const propertyNameMustBeSpaced = context.options[0] === \"always\"; // default is \"never\"\n        const enforceForClassMembers = !context.options[1] || context.options[1].enforceForClassMembers;\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Reports that there shouldn't be a space after the first token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @param {Token} tokenAfter The token after `token`.\n         * @returns {void}\n         */\n        function reportNoBeginningSpace(node, token, tokenAfter) {\n            context.report({\n                node,\n                loc: { start: token.loc.end, end: tokenAfter.loc.start },\n                messageId: \"unexpectedSpaceAfter\",\n                data: {\n                    tokenValue: token.value\n                },\n                fix(fixer) {\n                    return fixer.removeRange([token.range[1], tokenAfter.range[0]]);\n                }\n            });\n        }\n\n        /**\n         * Reports that there shouldn't be a space before the last token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @param {Token} tokenBefore The token before `token`.\n         * @returns {void}\n         */\n        function reportNoEndingSpace(node, token, tokenBefore) {\n            context.report({\n                node,\n                loc: { start: tokenBefore.loc.end, end: token.loc.start },\n                messageId: \"unexpectedSpaceBefore\",\n                data: {\n                    tokenValue: token.value\n                },\n                fix(fixer) {\n                    return fixer.removeRange([tokenBefore.range[1], token.range[0]]);\n                }\n            });\n        }\n\n        /**\n         * Reports that there should be a space after the first token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportRequiredBeginningSpace(node, token) {\n            context.report({\n                node,\n                loc: token.loc,\n                messageId: \"missingSpaceAfter\",\n                data: {\n                    tokenValue: token.value\n                },\n                fix(fixer) {\n                    return fixer.insertTextAfter(token, \" \");\n                }\n            });\n        }\n\n        /**\n         * Reports that there should be a space before the last token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportRequiredEndingSpace(node, token) {\n            context.report({\n                node,\n                loc: token.loc,\n                messageId: \"missingSpaceBefore\",\n                data: {\n                    tokenValue: token.value\n                },\n                fix(fixer) {\n                    return fixer.insertTextBefore(token, \" \");\n                }\n            });\n        }\n\n        /**\n         * Returns a function that checks the spacing of a node on the property name\n         * that was passed in.\n         * @param {string} propertyName The property on the node to check for spacing\n         * @returns {Function} A function that will check spacing on a node\n         */\n        function checkSpacing(propertyName) {\n            return function(node) {\n                if (!node.computed) {\n                    return;\n                }\n\n                const property = node[propertyName];\n\n                const before = sourceCode.getTokenBefore(property, astUtils.isOpeningBracketToken),\n                    first = sourceCode.getTokenAfter(before, { includeComments: true }),\n                    after = sourceCode.getTokenAfter(property, astUtils.isClosingBracketToken),\n                    last = sourceCode.getTokenBefore(after, { includeComments: true });\n\n                if (astUtils.isTokenOnSameLine(before, first)) {\n                    if (propertyNameMustBeSpaced) {\n                        if (!sourceCode.isSpaceBetweenTokens(before, first) && astUtils.isTokenOnSameLine(before, first)) {\n                            reportRequiredBeginningSpace(node, before);\n                        }\n                    } else {\n                        if (sourceCode.isSpaceBetweenTokens(before, first)) {\n                            reportNoBeginningSpace(node, before, first);\n                        }\n                    }\n                }\n\n                if (astUtils.isTokenOnSameLine(last, after)) {\n                    if (propertyNameMustBeSpaced) {\n                        if (!sourceCode.isSpaceBetweenTokens(last, after) && astUtils.isTokenOnSameLine(last, after)) {\n                            reportRequiredEndingSpace(node, after);\n                        }\n                    } else {\n                        if (sourceCode.isSpaceBetweenTokens(last, after)) {\n                            reportNoEndingSpace(node, after, last);\n                        }\n                    }\n                }\n            };\n        }\n\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        const listeners = {\n            Property: checkSpacing(\"key\"),\n            MemberExpression: checkSpacing(\"property\")\n        };\n\n        if (enforceForClassMembers) {\n            listeners.MethodDefinition =\n                listeners.PropertyDefinition = listeners.Property;\n        }\n\n        return listeners;\n\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}