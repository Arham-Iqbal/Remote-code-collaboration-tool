{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of ternary operators.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow ternary operators\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/no-ternary\"\n    },\n    schema: [],\n    messages: {\n      noTernaryOperator: \"Ternary operator used.\"\n    }\n  },\n  create(context) {\n    return {\n      ConditionalExpression(node) {\n        context.report({\n          node,\n          messageId: \"noTernaryOperator\"\n        });\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","recommended","url","schema","messages","noTernaryOperator","create","context","ConditionalExpression","node","report","messageId"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-ternary.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag use of ternary operators.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow ternary operators\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-ternary\"\n        },\n\n        schema: [],\n\n        messages: {\n            noTernaryOperator: \"Ternary operator used.\"\n        }\n    },\n\n    create(context) {\n\n        return {\n\n            ConditionalExpression(node) {\n                context.report({ node, messageId: \"noTernaryOperator\" });\n            }\n\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;;AAEA;AACAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,4BAA4B;MACzCC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,iBAAiB,EAAE;IACvB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ,OAAO;MAEHC,qBAAqBA,CAACC,IAAI,EAAE;QACxBF,OAAO,CAACG,MAAM,CAAC;UAAED,IAAI;UAAEE,SAAS,EAAE;QAAoB,CAAC,CAAC;MAC5D;IAEJ,CAAC;EAEL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}