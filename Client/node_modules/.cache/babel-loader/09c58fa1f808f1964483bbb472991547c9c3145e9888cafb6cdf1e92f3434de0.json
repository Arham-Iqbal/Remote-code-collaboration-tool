{"ast":null,"code":"/**\n * @fileoverview Rule to flag when using constructor for wrapper objects\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst {\n  getVariableByName\n} = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow `new` operators with the `String`, `Number`, and `Boolean` objects\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/no-new-wrappers\"\n    },\n    schema: [],\n    messages: {\n      noConstructor: \"Do not use {{fn}} as a constructor.\"\n    }\n  },\n  create(context) {\n    const {\n      sourceCode\n    } = context;\n    return {\n      NewExpression(node) {\n        const wrapperObjects = [\"String\", \"Number\", \"Boolean\"];\n        const {\n          name\n        } = node.callee;\n        if (wrapperObjects.includes(name)) {\n          const variable = getVariableByName(sourceCode.getScope(node), name);\n          if (variable && variable.identifiers.length === 0) {\n            context.report({\n              node,\n              messageId: \"noConstructor\",\n              data: {\n                fn: name\n              }\n            });\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["getVariableByName","require","module","exports","meta","type","docs","description","recommended","url","schema","messages","noConstructor","create","context","sourceCode","NewExpression","node","wrapperObjects","name","callee","includes","variable","getScope","identifiers","length","report","messageId","data","fn"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-new-wrappers.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag when using constructor for wrapper objects\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst { getVariableByName } = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow `new` operators with the `String`, `Number`, and `Boolean` objects\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-new-wrappers\"\n        },\n\n        schema: [],\n\n        messages: {\n            noConstructor: \"Do not use {{fn}} as a constructor.\"\n        }\n    },\n\n    create(context) {\n        const { sourceCode } = context;\n\n        return {\n\n            NewExpression(node) {\n                const wrapperObjects = [\"String\", \"Number\", \"Boolean\"];\n                const { name } = node.callee;\n\n                if (wrapperObjects.includes(name)) {\n                    const variable = getVariableByName(sourceCode.getScope(node), name);\n\n                    if (variable && variable.identifiers.length === 0) {\n                        context.report({\n                            node,\n                            messageId: \"noConstructor\",\n                            data: { fn: name }\n                        });\n                    }\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAM;EAAEA;AAAkB,CAAC,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAE1D;AACA;AACA;;AAEA;AACAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,6EAA6E;MAC1FC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,aAAa,EAAE;IACnB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAM;MAAEC;IAAW,CAAC,GAAGD,OAAO;IAE9B,OAAO;MAEHE,aAAaA,CAACC,IAAI,EAAE;QAChB,MAAMC,cAAc,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,CAAC;QACtD,MAAM;UAAEC;QAAK,CAAC,GAAGF,IAAI,CAACG,MAAM;QAE5B,IAAIF,cAAc,CAACG,QAAQ,CAACF,IAAI,CAAC,EAAE;UAC/B,MAAMG,QAAQ,GAAGtB,iBAAiB,CAACe,UAAU,CAACQ,QAAQ,CAACN,IAAI,CAAC,EAAEE,IAAI,CAAC;UAEnE,IAAIG,QAAQ,IAAIA,QAAQ,CAACE,WAAW,CAACC,MAAM,KAAK,CAAC,EAAE;YAC/CX,OAAO,CAACY,MAAM,CAAC;cACXT,IAAI;cACJU,SAAS,EAAE,eAAe;cAC1BC,IAAI,EAAE;gBAAEC,EAAE,EAAEV;cAAK;YACrB,CAAC,CAAC;UACN;QACJ;MACJ;IACJ,CAAC;EAEL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}