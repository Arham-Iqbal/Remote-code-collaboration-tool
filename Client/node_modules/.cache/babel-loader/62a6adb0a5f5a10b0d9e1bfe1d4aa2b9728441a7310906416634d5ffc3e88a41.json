{"ast":null,"code":"/**\n * @fileoverview A rule to ensure consistent quotes used in jsx syntax.\n * @author Mathias Schreck <https://github.com/lo1tuma>\n * @deprecated in ESLint v8.53.0\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\nconst QUOTE_SETTINGS = {\n  \"prefer-double\": {\n    quote: \"\\\"\",\n    description: \"singlequote\",\n    convert(str) {\n      return str.replace(/'/gu, \"\\\"\");\n    }\n  },\n  \"prefer-single\": {\n    quote: \"'\",\n    description: \"doublequote\",\n    convert(str) {\n      return str.replace(/\"/gu, \"'\");\n    }\n  }\n};\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    deprecated: true,\n    replacedBy: [],\n    type: \"layout\",\n    docs: {\n      description: \"Enforce the consistent use of either double or single quotes in JSX attributes\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/jsx-quotes\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"prefer-single\", \"prefer-double\"]\n    }],\n    messages: {\n      unexpected: \"Unexpected usage of {{description}}.\"\n    }\n  },\n  create(context) {\n    const quoteOption = context.options[0] || \"prefer-double\",\n      setting = QUOTE_SETTINGS[quoteOption];\n\n    /**\n     * Checks if the given string literal node uses the expected quotes\n     * @param {ASTNode} node A string literal node.\n     * @returns {boolean} Whether or not the string literal used the expected quotes.\n     * @public\n     */\n    function usesExpectedQuotes(node) {\n      return node.value.includes(setting.quote) || astUtils.isSurroundedBy(node.raw, setting.quote);\n    }\n    return {\n      JSXAttribute(node) {\n        const attributeValue = node.value;\n        if (attributeValue && astUtils.isStringLiteral(attributeValue) && !usesExpectedQuotes(attributeValue)) {\n          context.report({\n            node: attributeValue,\n            messageId: \"unexpected\",\n            data: {\n              description: setting.description\n            },\n            fix(fixer) {\n              return fixer.replaceText(attributeValue, setting.convert(attributeValue.raw));\n            }\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","QUOTE_SETTINGS","quote","description","convert","str","replace","module","exports","meta","deprecated","replacedBy","type","docs","recommended","url","fixable","schema","enum","messages","unexpected","create","context","quoteOption","options","setting","usesExpectedQuotes","node","value","includes","isSurroundedBy","raw","JSXAttribute","attributeValue","isStringLiteral","report","messageId","data","fix","fixer","replaceText"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/jsx-quotes.js"],"sourcesContent":["/**\n * @fileoverview A rule to ensure consistent quotes used in jsx syntax.\n * @author Mathias Schreck <https://github.com/lo1tuma>\n * @deprecated in ESLint v8.53.0\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\nconst QUOTE_SETTINGS = {\n    \"prefer-double\": {\n        quote: \"\\\"\",\n        description: \"singlequote\",\n        convert(str) {\n            return str.replace(/'/gu, \"\\\"\");\n        }\n    },\n    \"prefer-single\": {\n        quote: \"'\",\n        description: \"doublequote\",\n        convert(str) {\n            return str.replace(/\"/gu, \"'\");\n        }\n    }\n};\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        deprecated: true,\n        replacedBy: [],\n        type: \"layout\",\n\n        docs: {\n            description: \"Enforce the consistent use of either double or single quotes in JSX attributes\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/jsx-quotes\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                enum: [\"prefer-single\", \"prefer-double\"]\n            }\n        ],\n        messages: {\n            unexpected: \"Unexpected usage of {{description}}.\"\n        }\n    },\n\n    create(context) {\n        const quoteOption = context.options[0] || \"prefer-double\",\n            setting = QUOTE_SETTINGS[quoteOption];\n\n        /**\n         * Checks if the given string literal node uses the expected quotes\n         * @param {ASTNode} node A string literal node.\n         * @returns {boolean} Whether or not the string literal used the expected quotes.\n         * @public\n         */\n        function usesExpectedQuotes(node) {\n            return node.value.includes(setting.quote) || astUtils.isSurroundedBy(node.raw, setting.quote);\n        }\n\n        return {\n            JSXAttribute(node) {\n                const attributeValue = node.value;\n\n                if (attributeValue && astUtils.isStringLiteral(attributeValue) && !usesExpectedQuotes(attributeValue)) {\n                    context.report({\n                        node: attributeValue,\n                        messageId: \"unexpected\",\n                        data: {\n                            description: setting.description\n                        },\n                        fix(fixer) {\n                            return fixer.replaceText(attributeValue, setting.convert(attributeValue.raw));\n                        }\n                    });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;;AAEA,MAAMC,cAAc,GAAG;EACnB,eAAe,EAAE;IACbC,KAAK,EAAE,IAAI;IACXC,WAAW,EAAE,aAAa;IAC1BC,OAAOA,CAACC,GAAG,EAAE;MACT,OAAOA,GAAG,CAACC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC;IACnC;EACJ,CAAC;EACD,eAAe,EAAE;IACbJ,KAAK,EAAE,GAAG;IACVC,WAAW,EAAE,aAAa;IAC1BC,OAAOA,CAACC,GAAG,EAAE;MACT,OAAOA,GAAG,CAACC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;IAClC;EACJ;AACJ,CAAC;;AAED;AACA;AACA;;AAEA;AACAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,UAAU,EAAE,IAAI;IAChBC,UAAU,EAAE,EAAE;IACdC,IAAI,EAAE,QAAQ;IAEdC,IAAI,EAAE;MACFV,WAAW,EAAE,gFAAgF;MAC7FW,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,OAAO,EAAE,YAAY;IAErBC,MAAM,EAAE,CACJ;MACIC,IAAI,EAAE,CAAC,eAAe,EAAE,eAAe;IAC3C,CAAC,CACJ;IACDC,QAAQ,EAAE;MACNC,UAAU,EAAE;IAChB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,WAAW,GAAGD,OAAO,CAACE,OAAO,CAAC,CAAC,CAAC,IAAI,eAAe;MACrDC,OAAO,GAAGxB,cAAc,CAACsB,WAAW,CAAC;;IAEzC;AACR;AACA;AACA;AACA;AACA;IACQ,SAASG,kBAAkBA,CAACC,IAAI,EAAE;MAC9B,OAAOA,IAAI,CAACC,KAAK,CAACC,QAAQ,CAACJ,OAAO,CAACvB,KAAK,CAAC,IAAIH,QAAQ,CAAC+B,cAAc,CAACH,IAAI,CAACI,GAAG,EAAEN,OAAO,CAACvB,KAAK,CAAC;IACjG;IAEA,OAAO;MACH8B,YAAYA,CAACL,IAAI,EAAE;QACf,MAAMM,cAAc,GAAGN,IAAI,CAACC,KAAK;QAEjC,IAAIK,cAAc,IAAIlC,QAAQ,CAACmC,eAAe,CAACD,cAAc,CAAC,IAAI,CAACP,kBAAkB,CAACO,cAAc,CAAC,EAAE;UACnGX,OAAO,CAACa,MAAM,CAAC;YACXR,IAAI,EAAEM,cAAc;YACpBG,SAAS,EAAE,YAAY;YACvBC,IAAI,EAAE;cACFlC,WAAW,EAAEsB,OAAO,CAACtB;YACzB,CAAC;YACDmC,GAAGA,CAACC,KAAK,EAAE;cACP,OAAOA,KAAK,CAACC,WAAW,CAACP,cAAc,EAAER,OAAO,CAACrB,OAAO,CAAC6B,cAAc,CAACF,GAAG,CAAC,CAAC;YACjF;UACJ,CAAC,CAAC;QACN;MACJ;IACJ,CAAC;EACL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}