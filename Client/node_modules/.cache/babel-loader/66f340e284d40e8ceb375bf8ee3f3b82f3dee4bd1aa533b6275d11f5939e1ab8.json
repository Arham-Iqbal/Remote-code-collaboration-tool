{"ast":null,"code":"/**\n * @fileoverview Utility for caching lint results.\n * @author Kevin Partington\n */\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\nconst assert = require(\"assert\");\nconst fs = require(\"fs\");\nconst fileEntryCache = require(\"file-entry-cache\");\nconst stringify = require(\"json-stable-stringify-without-jsonify\");\nconst pkg = require(\"../../package.json\");\nconst hash = require(\"./hash\");\nconst debug = require(\"debug\")(\"eslint:lint-result-cache\");\n\n//-----------------------------------------------------------------------------\n// Helpers\n//-----------------------------------------------------------------------------\n\nconst configHashCache = new WeakMap();\nconst nodeVersion = process && process.version;\nconst validCacheStrategies = [\"metadata\", \"content\"];\nconst invalidCacheStrategyErrorMessage = `Cache strategy must be one of: ${validCacheStrategies.map(strategy => `\"${strategy}\"`).join(\", \")}`;\n\n/**\n * Tests whether a provided cacheStrategy is valid\n * @param {string} cacheStrategy The cache strategy to use\n * @returns {boolean} true if `cacheStrategy` is one of `validCacheStrategies`; false otherwise\n */\nfunction isValidCacheStrategy(cacheStrategy) {\n  return validCacheStrategies.includes(cacheStrategy);\n}\n\n/**\n * Calculates the hash of the config\n * @param {ConfigArray} config The config.\n * @returns {string} The hash of the config\n */\nfunction hashOfConfigFor(config) {\n  if (!configHashCache.has(config)) {\n    configHashCache.set(config, hash(`${pkg.version}_${nodeVersion}_${stringify(config)}`));\n  }\n  return configHashCache.get(config);\n}\n\n//-----------------------------------------------------------------------------\n// Public Interface\n//-----------------------------------------------------------------------------\n\n/**\n * Lint result cache. This wraps around the file-entry-cache module,\n * transparently removing properties that are difficult or expensive to\n * serialize and adding them back in on retrieval.\n */\nclass LintResultCache {\n  /**\n   * Creates a new LintResultCache instance.\n   * @param {string} cacheFileLocation The cache file location.\n   * @param {\"metadata\" | \"content\"} cacheStrategy The cache strategy to use.\n   */\n  constructor(cacheFileLocation, cacheStrategy) {\n    assert(cacheFileLocation, \"Cache file location is required\");\n    assert(cacheStrategy, \"Cache strategy is required\");\n    assert(isValidCacheStrategy(cacheStrategy), invalidCacheStrategyErrorMessage);\n    debug(`Caching results to ${cacheFileLocation}`);\n    const useChecksum = cacheStrategy === \"content\";\n    debug(`Using \"${cacheStrategy}\" strategy to detect changes`);\n    this.fileEntryCache = fileEntryCache.create(cacheFileLocation, void 0, useChecksum);\n    this.cacheFileLocation = cacheFileLocation;\n  }\n\n  /**\n   * Retrieve cached lint results for a given file path, if present in the\n   * cache. If the file is present and has not been changed, rebuild any\n   * missing result information.\n   * @param {string} filePath The file for which to retrieve lint results.\n   * @param {ConfigArray} config The config of the file.\n   * @returns {Object|null} The rebuilt lint results, or null if the file is\n   *   changed or not in the filesystem.\n   */\n  getCachedLintResults(filePath, config) {\n    /*\n     * Cached lint results are valid if and only if:\n     * 1. The file is present in the filesystem\n     * 2. The file has not changed since the time it was previously linted\n     * 3. The ESLint configuration has not changed since the time the file\n     *    was previously linted\n     * If any of these are not true, we will not reuse the lint results.\n     */\n    const fileDescriptor = this.fileEntryCache.getFileDescriptor(filePath);\n    const hashOfConfig = hashOfConfigFor(config);\n    const changed = fileDescriptor.changed || fileDescriptor.meta.hashOfConfig !== hashOfConfig;\n    if (fileDescriptor.notFound) {\n      debug(`File not found on the file system: ${filePath}`);\n      return null;\n    }\n    if (changed) {\n      debug(`Cache entry not found or no longer valid: ${filePath}`);\n      return null;\n    }\n    const cachedResults = fileDescriptor.meta.results;\n\n    // Just in case, not sure if this can ever happen.\n    if (!cachedResults) {\n      return cachedResults;\n    }\n\n    /*\n     * Shallow clone the object to ensure that any properties added or modified afterwards\n     * will not be accidentally stored in the cache file when `reconcile()` is called.\n     * https://github.com/eslint/eslint/issues/13507\n     * All intentional changes to the cache file must be done through `setCachedLintResults()`.\n     */\n    const results = {\n      ...cachedResults\n    };\n\n    // If source is present but null, need to reread the file from the filesystem.\n    if (results.source === null) {\n      debug(`Rereading cached result source from filesystem: ${filePath}`);\n      results.source = fs.readFileSync(filePath, \"utf-8\");\n    }\n    return results;\n  }\n\n  /**\n   * Set the cached lint results for a given file path, after removing any\n   * information that will be both unnecessary and difficult to serialize.\n   * Avoids caching results with an \"output\" property (meaning fixes were\n   * applied), to prevent potentially incorrect results if fixes are not\n   * written to disk.\n   * @param {string} filePath The file for which to set lint results.\n   * @param {ConfigArray} config The config of the file.\n   * @param {Object} result The lint result to be set for the file.\n   * @returns {void}\n   */\n  setCachedLintResults(filePath, config, result) {\n    if (result && Object.prototype.hasOwnProperty.call(result, \"output\")) {\n      return;\n    }\n    const fileDescriptor = this.fileEntryCache.getFileDescriptor(filePath);\n    if (fileDescriptor && !fileDescriptor.notFound) {\n      debug(`Updating cached result: ${filePath}`);\n\n      // Serialize the result, except that we want to remove the file source if present.\n      const resultToSerialize = Object.assign({}, result);\n\n      /*\n       * Set result.source to null.\n       * In `getCachedLintResults`, if source is explicitly null, we will\n       * read the file from the filesystem to set the value again.\n       */\n      if (Object.prototype.hasOwnProperty.call(resultToSerialize, \"source\")) {\n        resultToSerialize.source = null;\n      }\n      fileDescriptor.meta.results = resultToSerialize;\n      fileDescriptor.meta.hashOfConfig = hashOfConfigFor(config);\n    }\n  }\n\n  /**\n   * Persists the in-memory cache to disk.\n   * @returns {void}\n   */\n  reconcile() {\n    debug(`Persisting cached results: ${this.cacheFileLocation}`);\n    this.fileEntryCache.reconcile();\n  }\n}\nmodule.exports = LintResultCache;","map":{"version":3,"names":["assert","require","fs","fileEntryCache","stringify","pkg","hash","debug","configHashCache","WeakMap","nodeVersion","process","version","validCacheStrategies","invalidCacheStrategyErrorMessage","map","strategy","join","isValidCacheStrategy","cacheStrategy","includes","hashOfConfigFor","config","has","set","get","LintResultCache","constructor","cacheFileLocation","useChecksum","create","getCachedLintResults","filePath","fileDescriptor","getFileDescriptor","hashOfConfig","changed","meta","notFound","cachedResults","results","source","readFileSync","setCachedLintResults","result","Object","prototype","hasOwnProperty","call","resultToSerialize","assign","reconcile","module","exports"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/cli-engine/lint-result-cache.js"],"sourcesContent":["/**\n * @fileoverview Utility for caching lint results.\n * @author Kevin Partington\n */\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\n\nconst assert = require(\"assert\");\nconst fs = require(\"fs\");\nconst fileEntryCache = require(\"file-entry-cache\");\nconst stringify = require(\"json-stable-stringify-without-jsonify\");\nconst pkg = require(\"../../package.json\");\nconst hash = require(\"./hash\");\n\nconst debug = require(\"debug\")(\"eslint:lint-result-cache\");\n\n//-----------------------------------------------------------------------------\n// Helpers\n//-----------------------------------------------------------------------------\n\nconst configHashCache = new WeakMap();\nconst nodeVersion = process && process.version;\n\nconst validCacheStrategies = [\"metadata\", \"content\"];\nconst invalidCacheStrategyErrorMessage = `Cache strategy must be one of: ${validCacheStrategies\n    .map(strategy => `\"${strategy}\"`)\n    .join(\", \")}`;\n\n/**\n * Tests whether a provided cacheStrategy is valid\n * @param {string} cacheStrategy The cache strategy to use\n * @returns {boolean} true if `cacheStrategy` is one of `validCacheStrategies`; false otherwise\n */\nfunction isValidCacheStrategy(cacheStrategy) {\n    return (\n        validCacheStrategies.includes(cacheStrategy)\n    );\n}\n\n/**\n * Calculates the hash of the config\n * @param {ConfigArray} config The config.\n * @returns {string} The hash of the config\n */\nfunction hashOfConfigFor(config) {\n    if (!configHashCache.has(config)) {\n        configHashCache.set(config, hash(`${pkg.version}_${nodeVersion}_${stringify(config)}`));\n    }\n\n    return configHashCache.get(config);\n}\n\n//-----------------------------------------------------------------------------\n// Public Interface\n//-----------------------------------------------------------------------------\n\n/**\n * Lint result cache. This wraps around the file-entry-cache module,\n * transparently removing properties that are difficult or expensive to\n * serialize and adding them back in on retrieval.\n */\nclass LintResultCache {\n\n    /**\n     * Creates a new LintResultCache instance.\n     * @param {string} cacheFileLocation The cache file location.\n     * @param {\"metadata\" | \"content\"} cacheStrategy The cache strategy to use.\n     */\n    constructor(cacheFileLocation, cacheStrategy) {\n        assert(cacheFileLocation, \"Cache file location is required\");\n        assert(cacheStrategy, \"Cache strategy is required\");\n        assert(\n            isValidCacheStrategy(cacheStrategy),\n            invalidCacheStrategyErrorMessage\n        );\n\n        debug(`Caching results to ${cacheFileLocation}`);\n\n        const useChecksum = cacheStrategy === \"content\";\n\n        debug(\n            `Using \"${cacheStrategy}\" strategy to detect changes`\n        );\n\n        this.fileEntryCache = fileEntryCache.create(\n            cacheFileLocation,\n            void 0,\n            useChecksum\n        );\n        this.cacheFileLocation = cacheFileLocation;\n    }\n\n    /**\n     * Retrieve cached lint results for a given file path, if present in the\n     * cache. If the file is present and has not been changed, rebuild any\n     * missing result information.\n     * @param {string} filePath The file for which to retrieve lint results.\n     * @param {ConfigArray} config The config of the file.\n     * @returns {Object|null} The rebuilt lint results, or null if the file is\n     *   changed or not in the filesystem.\n     */\n    getCachedLintResults(filePath, config) {\n\n        /*\n         * Cached lint results are valid if and only if:\n         * 1. The file is present in the filesystem\n         * 2. The file has not changed since the time it was previously linted\n         * 3. The ESLint configuration has not changed since the time the file\n         *    was previously linted\n         * If any of these are not true, we will not reuse the lint results.\n         */\n        const fileDescriptor = this.fileEntryCache.getFileDescriptor(filePath);\n        const hashOfConfig = hashOfConfigFor(config);\n        const changed =\n            fileDescriptor.changed ||\n            fileDescriptor.meta.hashOfConfig !== hashOfConfig;\n\n        if (fileDescriptor.notFound) {\n            debug(`File not found on the file system: ${filePath}`);\n            return null;\n        }\n\n        if (changed) {\n            debug(`Cache entry not found or no longer valid: ${filePath}`);\n            return null;\n        }\n\n        const cachedResults = fileDescriptor.meta.results;\n\n        // Just in case, not sure if this can ever happen.\n        if (!cachedResults) {\n            return cachedResults;\n        }\n\n        /*\n         * Shallow clone the object to ensure that any properties added or modified afterwards\n         * will not be accidentally stored in the cache file when `reconcile()` is called.\n         * https://github.com/eslint/eslint/issues/13507\n         * All intentional changes to the cache file must be done through `setCachedLintResults()`.\n         */\n        const results = { ...cachedResults };\n\n        // If source is present but null, need to reread the file from the filesystem.\n        if (results.source === null) {\n            debug(`Rereading cached result source from filesystem: ${filePath}`);\n            results.source = fs.readFileSync(filePath, \"utf-8\");\n        }\n\n        return results;\n    }\n\n    /**\n     * Set the cached lint results for a given file path, after removing any\n     * information that will be both unnecessary and difficult to serialize.\n     * Avoids caching results with an \"output\" property (meaning fixes were\n     * applied), to prevent potentially incorrect results if fixes are not\n     * written to disk.\n     * @param {string} filePath The file for which to set lint results.\n     * @param {ConfigArray} config The config of the file.\n     * @param {Object} result The lint result to be set for the file.\n     * @returns {void}\n     */\n    setCachedLintResults(filePath, config, result) {\n        if (result && Object.prototype.hasOwnProperty.call(result, \"output\")) {\n            return;\n        }\n\n        const fileDescriptor = this.fileEntryCache.getFileDescriptor(filePath);\n\n        if (fileDescriptor && !fileDescriptor.notFound) {\n            debug(`Updating cached result: ${filePath}`);\n\n            // Serialize the result, except that we want to remove the file source if present.\n            const resultToSerialize = Object.assign({}, result);\n\n            /*\n             * Set result.source to null.\n             * In `getCachedLintResults`, if source is explicitly null, we will\n             * read the file from the filesystem to set the value again.\n             */\n            if (Object.prototype.hasOwnProperty.call(resultToSerialize, \"source\")) {\n                resultToSerialize.source = null;\n            }\n\n            fileDescriptor.meta.results = resultToSerialize;\n            fileDescriptor.meta.hashOfConfig = hashOfConfigFor(config);\n        }\n    }\n\n    /**\n     * Persists the in-memory cache to disk.\n     * @returns {void}\n     */\n    reconcile() {\n        debug(`Persisting cached results: ${this.cacheFileLocation}`);\n        this.fileEntryCache.reconcile();\n    }\n}\n\nmodule.exports = LintResultCache;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}