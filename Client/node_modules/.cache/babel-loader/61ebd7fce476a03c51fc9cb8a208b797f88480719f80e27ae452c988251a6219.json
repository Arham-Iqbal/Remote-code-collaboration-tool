{"ast":null,"code":"/**\n * @fileoverview A rule to set the maximum number of statements in a function.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\nconst {\n  upperCaseFirst\n} = require(\"../shared/string-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Enforce a maximum number of statements allowed in function blocks\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/max-statements\"\n    },\n    schema: [{\n      oneOf: [{\n        type: \"integer\",\n        minimum: 0\n      }, {\n        type: \"object\",\n        properties: {\n          maximum: {\n            type: \"integer\",\n            minimum: 0\n          },\n          max: {\n            type: \"integer\",\n            minimum: 0\n          }\n        },\n        additionalProperties: false\n      }]\n    }, {\n      type: \"object\",\n      properties: {\n        ignoreTopLevelFunctions: {\n          type: \"boolean\"\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      exceed: \"{{name}} has too many statements ({{count}}). Maximum allowed is {{max}}.\"\n    }\n  },\n  create(context) {\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    const functionStack = [],\n      option = context.options[0],\n      ignoreTopLevelFunctions = context.options[1] && context.options[1].ignoreTopLevelFunctions || false,\n      topLevelFunctions = [];\n    let maxStatements = 10;\n    if (typeof option === \"object\" && (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))) {\n      maxStatements = option.maximum || option.max;\n    } else if (typeof option === \"number\") {\n      maxStatements = option;\n    }\n\n    /**\n     * Reports a node if it has too many statements\n     * @param {ASTNode} node node to evaluate\n     * @param {int} count Number of statements in node\n     * @param {int} max Maximum number of statements allowed\n     * @returns {void}\n     * @private\n     */\n    function reportIfTooManyStatements(node, count, max) {\n      if (count > max) {\n        const name = upperCaseFirst(astUtils.getFunctionNameWithKind(node));\n        context.report({\n          node,\n          messageId: \"exceed\",\n          data: {\n            name,\n            count,\n            max\n          }\n        });\n      }\n    }\n\n    /**\n     * When parsing a new function, store it in our function stack\n     * @returns {void}\n     * @private\n     */\n    function startFunction() {\n      functionStack.push(0);\n    }\n\n    /**\n     * Evaluate the node at the end of function\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n    function endFunction(node) {\n      const count = functionStack.pop();\n\n      /*\n       * This rule does not apply to class static blocks, but we have to track them so\n       * that statements in them do not count as statements in the enclosing function.\n       */\n      if (node.type === \"StaticBlock\") {\n        return;\n      }\n      if (ignoreTopLevelFunctions && functionStack.length === 0) {\n        topLevelFunctions.push({\n          node,\n          count\n        });\n      } else {\n        reportIfTooManyStatements(node, count, maxStatements);\n      }\n    }\n\n    /**\n     * Increment the count of the functions\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n    function countStatements(node) {\n      functionStack[functionStack.length - 1] += node.body.length;\n    }\n\n    //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n    return {\n      FunctionDeclaration: startFunction,\n      FunctionExpression: startFunction,\n      ArrowFunctionExpression: startFunction,\n      StaticBlock: startFunction,\n      BlockStatement: countStatements,\n      \"FunctionDeclaration:exit\": endFunction,\n      \"FunctionExpression:exit\": endFunction,\n      \"ArrowFunctionExpression:exit\": endFunction,\n      \"StaticBlock:exit\": endFunction,\n      \"Program:exit\"() {\n        if (topLevelFunctions.length === 1) {\n          return;\n        }\n        topLevelFunctions.forEach(element => {\n          const count = element.count;\n          const node = element.node;\n          reportIfTooManyStatements(node, count, maxStatements);\n        });\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","upperCaseFirst","module","exports","meta","type","docs","description","recommended","url","schema","oneOf","minimum","properties","maximum","max","additionalProperties","ignoreTopLevelFunctions","messages","exceed","create","context","functionStack","option","options","topLevelFunctions","maxStatements","Object","prototype","hasOwnProperty","call","reportIfTooManyStatements","node","count","name","getFunctionNameWithKind","report","messageId","data","startFunction","push","endFunction","pop","length","countStatements","body","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","StaticBlock","BlockStatement","Program:exit","forEach","element"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/max-statements.js"],"sourcesContent":["/**\n * @fileoverview A rule to set the maximum number of statements in a function.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\nconst { upperCaseFirst } = require(\"../shared/string-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Enforce a maximum number of statements allowed in function blocks\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/max-statements\"\n        },\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        type: \"integer\",\n                        minimum: 0\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            maximum: {\n                                type: \"integer\",\n                                minimum: 0\n                            },\n                            max: {\n                                type: \"integer\",\n                                minimum: 0\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    ignoreTopLevelFunctions: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n        messages: {\n            exceed: \"{{name}} has too many statements ({{count}}). Maximum allowed is {{max}}.\"\n        }\n    },\n\n    create(context) {\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        const functionStack = [],\n            option = context.options[0],\n            ignoreTopLevelFunctions = context.options[1] && context.options[1].ignoreTopLevelFunctions || false,\n            topLevelFunctions = [];\n        let maxStatements = 10;\n\n        if (\n            typeof option === \"object\" &&\n            (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))\n        ) {\n            maxStatements = option.maximum || option.max;\n        } else if (typeof option === \"number\") {\n            maxStatements = option;\n        }\n\n        /**\n         * Reports a node if it has too many statements\n         * @param {ASTNode} node node to evaluate\n         * @param {int} count Number of statements in node\n         * @param {int} max Maximum number of statements allowed\n         * @returns {void}\n         * @private\n         */\n        function reportIfTooManyStatements(node, count, max) {\n            if (count > max) {\n                const name = upperCaseFirst(astUtils.getFunctionNameWithKind(node));\n\n                context.report({\n                    node,\n                    messageId: \"exceed\",\n                    data: { name, count, max }\n                });\n            }\n        }\n\n        /**\n         * When parsing a new function, store it in our function stack\n         * @returns {void}\n         * @private\n         */\n        function startFunction() {\n            functionStack.push(0);\n        }\n\n        /**\n         * Evaluate the node at the end of function\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function endFunction(node) {\n            const count = functionStack.pop();\n\n            /*\n             * This rule does not apply to class static blocks, but we have to track them so\n             * that statements in them do not count as statements in the enclosing function.\n             */\n            if (node.type === \"StaticBlock\") {\n                return;\n            }\n\n            if (ignoreTopLevelFunctions && functionStack.length === 0) {\n                topLevelFunctions.push({ node, count });\n            } else {\n                reportIfTooManyStatements(node, count, maxStatements);\n            }\n        }\n\n        /**\n         * Increment the count of the functions\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function countStatements(node) {\n            functionStack[functionStack.length - 1] += node.body.length;\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            FunctionDeclaration: startFunction,\n            FunctionExpression: startFunction,\n            ArrowFunctionExpression: startFunction,\n            StaticBlock: startFunction,\n\n            BlockStatement: countStatements,\n\n            \"FunctionDeclaration:exit\": endFunction,\n            \"FunctionExpression:exit\": endFunction,\n            \"ArrowFunctionExpression:exit\": endFunction,\n            \"StaticBlock:exit\": endFunction,\n\n            \"Program:exit\"() {\n                if (topLevelFunctions.length === 1) {\n                    return;\n                }\n\n                topLevelFunctions.forEach(element => {\n                    const count = element.count;\n                    const node = element.node;\n\n                    reportIfTooManyStatements(node, count, maxStatements);\n                });\n            }\n        };\n\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}