{"ast":null,"code":"/**\n * @fileoverview Rule to enforce spacing around colons of switch statements.\n * @author Toru Nagashima\n * @deprecated in ESLint v8.53.0\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    deprecated: true,\n    replacedBy: [],\n    type: \"layout\",\n    docs: {\n      description: \"Enforce spacing around colons of switch statements\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/switch-colon-spacing\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        before: {\n          type: \"boolean\",\n          default: false\n        },\n        after: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    fixable: \"whitespace\",\n    messages: {\n      expectedBefore: \"Expected space(s) before this colon.\",\n      expectedAfter: \"Expected space(s) after this colon.\",\n      unexpectedBefore: \"Unexpected space(s) before this colon.\",\n      unexpectedAfter: \"Unexpected space(s) after this colon.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.sourceCode;\n    const options = context.options[0] || {};\n    const beforeSpacing = options.before === true; // false by default\n    const afterSpacing = options.after !== false; // true by default\n\n    /**\n     * Check whether the spacing between the given 2 tokens is valid or not.\n     * @param {Token} left The left token to check.\n     * @param {Token} right The right token to check.\n     * @param {boolean} expected The expected spacing to check. `true` if there should be a space.\n     * @returns {boolean} `true` if the spacing between the tokens is valid.\n     */\n    function isValidSpacing(left, right, expected) {\n      return astUtils.isClosingBraceToken(right) || !astUtils.isTokenOnSameLine(left, right) || sourceCode.isSpaceBetweenTokens(left, right) === expected;\n    }\n\n    /**\n     * Check whether comments exist between the given 2 tokens.\n     * @param {Token} left The left token to check.\n     * @param {Token} right The right token to check.\n     * @returns {boolean} `true` if comments exist between the given 2 tokens.\n     */\n    function commentsExistBetween(left, right) {\n      return sourceCode.getFirstTokenBetween(left, right, {\n        includeComments: true,\n        filter: astUtils.isCommentToken\n      }) !== null;\n    }\n\n    /**\n     * Fix the spacing between the given 2 tokens.\n     * @param {RuleFixer} fixer The fixer to fix.\n     * @param {Token} left The left token of fix range.\n     * @param {Token} right The right token of fix range.\n     * @param {boolean} spacing The spacing style. `true` if there should be a space.\n     * @returns {Fix|null} The fix object.\n     */\n    function fix(fixer, left, right, spacing) {\n      if (commentsExistBetween(left, right)) {\n        return null;\n      }\n      if (spacing) {\n        return fixer.insertTextAfter(left, \" \");\n      }\n      return fixer.removeRange([left.range[1], right.range[0]]);\n    }\n    return {\n      SwitchCase(node) {\n        const colonToken = astUtils.getSwitchCaseColonToken(node, sourceCode);\n        const beforeToken = sourceCode.getTokenBefore(colonToken);\n        const afterToken = sourceCode.getTokenAfter(colonToken);\n        if (!isValidSpacing(beforeToken, colonToken, beforeSpacing)) {\n          context.report({\n            node,\n            loc: colonToken.loc,\n            messageId: beforeSpacing ? \"expectedBefore\" : \"unexpectedBefore\",\n            fix: fixer => fix(fixer, beforeToken, colonToken, beforeSpacing)\n          });\n        }\n        if (!isValidSpacing(colonToken, afterToken, afterSpacing)) {\n          context.report({\n            node,\n            loc: colonToken.loc,\n            messageId: afterSpacing ? \"expectedAfter\" : \"unexpectedAfter\",\n            fix: fixer => fix(fixer, colonToken, afterToken, afterSpacing)\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","deprecated","replacedBy","type","docs","description","recommended","url","schema","properties","before","default","after","additionalProperties","fixable","messages","expectedBefore","expectedAfter","unexpectedBefore","unexpectedAfter","create","context","sourceCode","options","beforeSpacing","afterSpacing","isValidSpacing","left","right","expected","isClosingBraceToken","isTokenOnSameLine","isSpaceBetweenTokens","commentsExistBetween","getFirstTokenBetween","includeComments","filter","isCommentToken","fix","fixer","spacing","insertTextAfter","removeRange","range","SwitchCase","node","colonToken","getSwitchCaseColonToken","beforeToken","getTokenBefore","afterToken","getTokenAfter","report","loc","messageId"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/switch-colon-spacing.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce spacing around colons of switch statements.\n * @author Toru Nagashima\n * @deprecated in ESLint v8.53.0\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        deprecated: true,\n        replacedBy: [],\n        type: \"layout\",\n\n        docs: {\n            description: \"Enforce spacing around colons of switch statements\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/switch-colon-spacing\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    before: { type: \"boolean\", default: false },\n                    after: { type: \"boolean\", default: true }\n                },\n                additionalProperties: false\n            }\n        ],\n        fixable: \"whitespace\",\n        messages: {\n            expectedBefore: \"Expected space(s) before this colon.\",\n            expectedAfter: \"Expected space(s) after this colon.\",\n            unexpectedBefore: \"Unexpected space(s) before this colon.\",\n            unexpectedAfter: \"Unexpected space(s) after this colon.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.sourceCode;\n        const options = context.options[0] || {};\n        const beforeSpacing = options.before === true; // false by default\n        const afterSpacing = options.after !== false; // true by default\n\n        /**\n         * Check whether the spacing between the given 2 tokens is valid or not.\n         * @param {Token} left The left token to check.\n         * @param {Token} right The right token to check.\n         * @param {boolean} expected The expected spacing to check. `true` if there should be a space.\n         * @returns {boolean} `true` if the spacing between the tokens is valid.\n         */\n        function isValidSpacing(left, right, expected) {\n            return (\n                astUtils.isClosingBraceToken(right) ||\n                !astUtils.isTokenOnSameLine(left, right) ||\n                sourceCode.isSpaceBetweenTokens(left, right) === expected\n            );\n        }\n\n        /**\n         * Check whether comments exist between the given 2 tokens.\n         * @param {Token} left The left token to check.\n         * @param {Token} right The right token to check.\n         * @returns {boolean} `true` if comments exist between the given 2 tokens.\n         */\n        function commentsExistBetween(left, right) {\n            return sourceCode.getFirstTokenBetween(\n                left,\n                right,\n                {\n                    includeComments: true,\n                    filter: astUtils.isCommentToken\n                }\n            ) !== null;\n        }\n\n        /**\n         * Fix the spacing between the given 2 tokens.\n         * @param {RuleFixer} fixer The fixer to fix.\n         * @param {Token} left The left token of fix range.\n         * @param {Token} right The right token of fix range.\n         * @param {boolean} spacing The spacing style. `true` if there should be a space.\n         * @returns {Fix|null} The fix object.\n         */\n        function fix(fixer, left, right, spacing) {\n            if (commentsExistBetween(left, right)) {\n                return null;\n            }\n            if (spacing) {\n                return fixer.insertTextAfter(left, \" \");\n            }\n            return fixer.removeRange([left.range[1], right.range[0]]);\n        }\n\n        return {\n            SwitchCase(node) {\n                const colonToken = astUtils.getSwitchCaseColonToken(node, sourceCode);\n                const beforeToken = sourceCode.getTokenBefore(colonToken);\n                const afterToken = sourceCode.getTokenAfter(colonToken);\n\n                if (!isValidSpacing(beforeToken, colonToken, beforeSpacing)) {\n                    context.report({\n                        node,\n                        loc: colonToken.loc,\n                        messageId: beforeSpacing ? \"expectedBefore\" : \"unexpectedBefore\",\n                        fix: fixer => fix(fixer, beforeToken, colonToken, beforeSpacing)\n                    });\n                }\n                if (!isValidSpacing(colonToken, afterToken, afterSpacing)) {\n                    context.report({\n                        node,\n                        loc: colonToken.loc,\n                        messageId: afterSpacing ? \"expectedAfter\" : \"unexpectedAfter\",\n                        fix: fixer => fix(fixer, colonToken, afterToken, afterSpacing)\n                    });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}