{"ast":null,"code":"/**\n * @fileoverview Rule to flag labels that are the same as an identifier\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow labels that share a name with a variable\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/no-label-var\"\n    },\n    schema: [],\n    messages: {\n      identifierClashWithLabel: \"Found identifier with same name as label.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.sourceCode;\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Check if the identifier is present inside current scope\n     * @param {Object} scope current scope\n     * @param {string} name To evaluate\n     * @returns {boolean} True if its present\n     * @private\n     */\n    function findIdentifier(scope, name) {\n      return astUtils.getVariableByName(scope, name) !== null;\n    }\n\n    //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n    return {\n      LabeledStatement(node) {\n        // Fetch the innermost scope.\n        const scope = sourceCode.getScope(node);\n\n        /*\n         * Recursively find the identifier walking up the scope, starting\n         * with the innermost scope.\n         */\n        if (findIdentifier(scope, node.label.name)) {\n          context.report({\n            node,\n            messageId: \"identifierClashWithLabel\"\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","messages","identifierClashWithLabel","create","context","sourceCode","findIdentifier","scope","name","getVariableByName","LabeledStatement","node","getScope","label","report","messageId"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-label-var.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag labels that are the same as an identifier\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow labels that share a name with a variable\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-label-var\"\n        },\n\n        schema: [],\n\n        messages: {\n            identifierClashWithLabel: \"Found identifier with same name as label.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.sourceCode;\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Check if the identifier is present inside current scope\n         * @param {Object} scope current scope\n         * @param {string} name To evaluate\n         * @returns {boolean} True if its present\n         * @private\n         */\n        function findIdentifier(scope, name) {\n            return astUtils.getVariableByName(scope, name) !== null;\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n\n            LabeledStatement(node) {\n\n                // Fetch the innermost scope.\n                const scope = sourceCode.getScope(node);\n\n                /*\n                 * Recursively find the identifier walking up the scope, starting\n                 * with the innermost scope.\n                 */\n                if (findIdentifier(scope, node.label.name)) {\n                    context.report({\n                        node,\n                        messageId: \"identifierClashWithLabel\"\n                    });\n                }\n            }\n\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;;AAEA;AACAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,mDAAmD;MAChEC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,wBAAwB,EAAE;IAC9B;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACC,UAAU;;IAErC;IACA;IACA;;IAEA;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,SAASC,cAAcA,CAACC,KAAK,EAAEC,IAAI,EAAE;MACjC,OAAOlB,QAAQ,CAACmB,iBAAiB,CAACF,KAAK,EAAEC,IAAI,CAAC,KAAK,IAAI;IAC3D;;IAEA;IACA;IACA;;IAEA,OAAO;MAEHE,gBAAgBA,CAACC,IAAI,EAAE;QAEnB;QACA,MAAMJ,KAAK,GAAGF,UAAU,CAACO,QAAQ,CAACD,IAAI,CAAC;;QAEvC;AAChB;AACA;AACA;QACgB,IAAIL,cAAc,CAACC,KAAK,EAAEI,IAAI,CAACE,KAAK,CAACL,IAAI,CAAC,EAAE;UACxCJ,OAAO,CAACU,MAAM,CAAC;YACXH,IAAI;YACJI,SAAS,EAAE;UACf,CAAC,CAAC;QACN;MACJ;IAEJ,CAAC;EAEL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}