{"ast":null,"code":"/**\n * @fileoverview Rule to disallow use of the new operator with global non-constructor functions\n * @author Sosuke Suzuki\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\nconst nonConstructorGlobalFunctionNames = [\"Symbol\", \"BigInt\"];\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"Disallow `new` operators with global non-constructor functions\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor\"\n    },\n    schema: [],\n    messages: {\n      noNewNonconstructor: \"`{{name}}` cannot be called as a constructor.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.sourceCode;\n    return {\n      \"Program:exit\"(node) {\n        const globalScope = sourceCode.getScope(node);\n        for (const nonConstructorName of nonConstructorGlobalFunctionNames) {\n          const variable = globalScope.set.get(nonConstructorName);\n          if (variable && variable.defs.length === 0) {\n            variable.references.forEach(ref => {\n              const idNode = ref.identifier;\n              const parent = idNode.parent;\n              if (parent && parent.type === \"NewExpression\" && parent.callee === idNode) {\n                context.report({\n                  node: idNode,\n                  messageId: \"noNewNonconstructor\",\n                  data: {\n                    name: nonConstructorName\n                  }\n                });\n              }\n            });\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["nonConstructorGlobalFunctionNames","module","exports","meta","type","docs","description","recommended","url","schema","messages","noNewNonconstructor","create","context","sourceCode","Program:exit","node","globalScope","getScope","nonConstructorName","variable","set","get","defs","length","references","forEach","ref","idNode","identifier","parent","callee","report","messageId","data","name"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-new-native-nonconstructor.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow use of the new operator with global non-constructor functions\n * @author Sosuke Suzuki\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst nonConstructorGlobalFunctionNames = [\"Symbol\", \"BigInt\"];\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"Disallow `new` operators with global non-constructor functions\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor\"\n        },\n\n        schema: [],\n\n        messages: {\n            noNewNonconstructor: \"`{{name}}` cannot be called as a constructor.\"\n        }\n    },\n\n    create(context) {\n\n        const sourceCode = context.sourceCode;\n\n        return {\n            \"Program:exit\"(node) {\n                const globalScope = sourceCode.getScope(node);\n\n                for (const nonConstructorName of nonConstructorGlobalFunctionNames) {\n                    const variable = globalScope.set.get(nonConstructorName);\n\n                    if (variable && variable.defs.length === 0) {\n                        variable.references.forEach(ref => {\n                            const idNode = ref.identifier;\n                            const parent = idNode.parent;\n\n                            if (parent && parent.type === \"NewExpression\" && parent.callee === idNode) {\n                                context.report({\n                                    node: idNode,\n                                    messageId: \"noNewNonconstructor\",\n                                    data: { name: nonConstructorName }\n                                });\n                            }\n                        });\n                    }\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,iCAAiC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC;;AAE9D;AACA;AACA;;AAEA;AACAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,SAAS;IAEfC,IAAI,EAAE;MACFC,WAAW,EAAE,gEAAgE;MAC7EC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,mBAAmB,EAAE;IACzB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ,MAAMC,UAAU,GAAGD,OAAO,CAACC,UAAU;IAErC,OAAO;MACH,cAAcC,CAACC,IAAI,EAAE;QACjB,MAAMC,WAAW,GAAGH,UAAU,CAACI,QAAQ,CAACF,IAAI,CAAC;QAE7C,KAAK,MAAMG,kBAAkB,IAAInB,iCAAiC,EAAE;UAChE,MAAMoB,QAAQ,GAAGH,WAAW,CAACI,GAAG,CAACC,GAAG,CAACH,kBAAkB,CAAC;UAExD,IAAIC,QAAQ,IAAIA,QAAQ,CAACG,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;YACxCJ,QAAQ,CAACK,UAAU,CAACC,OAAO,CAACC,GAAG,IAAI;cAC/B,MAAMC,MAAM,GAAGD,GAAG,CAACE,UAAU;cAC7B,MAAMC,MAAM,GAAGF,MAAM,CAACE,MAAM;cAE5B,IAAIA,MAAM,IAAIA,MAAM,CAAC1B,IAAI,KAAK,eAAe,IAAI0B,MAAM,CAACC,MAAM,KAAKH,MAAM,EAAE;gBACvEf,OAAO,CAACmB,MAAM,CAAC;kBACXhB,IAAI,EAAEY,MAAM;kBACZK,SAAS,EAAE,qBAAqB;kBAChCC,IAAI,EAAE;oBAAEC,IAAI,EAAEhB;kBAAmB;gBACrC,CAAC,CAAC;cACN;YACJ,CAAC,CAAC;UACN;QACJ;MACJ;IACJ,CAAC;EAEL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}