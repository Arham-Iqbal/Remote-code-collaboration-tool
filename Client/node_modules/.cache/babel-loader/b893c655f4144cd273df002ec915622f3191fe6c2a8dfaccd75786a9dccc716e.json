{"ast":null,"code":"/**\n * @fileoverview Rule to check for jsdoc presence.\n * @author Gyandeep Singh\n * @deprecated in ESLint v5.10.0\n */\n\"use strict\";\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Require JSDoc comments\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/require-jsdoc\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        require: {\n          type: \"object\",\n          properties: {\n            ClassDeclaration: {\n              type: \"boolean\",\n              default: false\n            },\n            MethodDefinition: {\n              type: \"boolean\",\n              default: false\n            },\n            FunctionDeclaration: {\n              type: \"boolean\",\n              default: true\n            },\n            ArrowFunctionExpression: {\n              type: \"boolean\",\n              default: false\n            },\n            FunctionExpression: {\n              type: \"boolean\",\n              default: false\n            }\n          },\n          additionalProperties: false,\n          default: {}\n        }\n      },\n      additionalProperties: false\n    }],\n    deprecated: true,\n    replacedBy: [],\n    messages: {\n      missingJSDocComment: \"Missing JSDoc comment.\"\n    }\n  },\n  create(context) {\n    const source = context.sourceCode;\n    const DEFAULT_OPTIONS = {\n      FunctionDeclaration: true,\n      MethodDefinition: false,\n      ClassDeclaration: false,\n      ArrowFunctionExpression: false,\n      FunctionExpression: false\n    };\n    const options = Object.assign(DEFAULT_OPTIONS, context.options[0] && context.options[0].require);\n\n    /**\n     * Report the error message\n     * @param {ASTNode} node node to report\n     * @returns {void}\n     */\n    function report(node) {\n      context.report({\n        node,\n        messageId: \"missingJSDocComment\"\n      });\n    }\n\n    /**\n     * Check if the jsdoc comment is present or not.\n     * @param {ASTNode} node node to examine\n     * @returns {void}\n     */\n    function checkJsDoc(node) {\n      const jsdocComment = source.getJSDocComment(node);\n      if (!jsdocComment) {\n        report(node);\n      }\n    }\n    return {\n      FunctionDeclaration(node) {\n        if (options.FunctionDeclaration) {\n          checkJsDoc(node);\n        }\n      },\n      FunctionExpression(node) {\n        if (options.MethodDefinition && node.parent.type === \"MethodDefinition\" || options.FunctionExpression && (node.parent.type === \"VariableDeclarator\" || node.parent.type === \"Property\" && node === node.parent.value)) {\n          checkJsDoc(node);\n        }\n      },\n      ClassDeclaration(node) {\n        if (options.ClassDeclaration) {\n          checkJsDoc(node);\n        }\n      },\n      ArrowFunctionExpression(node) {\n        if (options.ArrowFunctionExpression && node.parent.type === \"VariableDeclarator\") {\n          checkJsDoc(node);\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","recommended","url","schema","properties","require","ClassDeclaration","default","MethodDefinition","FunctionDeclaration","ArrowFunctionExpression","FunctionExpression","additionalProperties","deprecated","replacedBy","messages","missingJSDocComment","create","context","source","sourceCode","DEFAULT_OPTIONS","options","Object","assign","report","node","messageId","checkJsDoc","jsdocComment","getJSDocComment","parent","value"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/require-jsdoc.js"],"sourcesContent":["/**\n * @fileoverview Rule to check for jsdoc presence.\n * @author Gyandeep Singh\n * @deprecated in ESLint v5.10.0\n */\n\"use strict\";\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Require JSDoc comments\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/require-jsdoc\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    require: {\n                        type: \"object\",\n                        properties: {\n                            ClassDeclaration: {\n                                type: \"boolean\",\n                                default: false\n                            },\n                            MethodDefinition: {\n                                type: \"boolean\",\n                                default: false\n                            },\n                            FunctionDeclaration: {\n                                type: \"boolean\",\n                                default: true\n                            },\n                            ArrowFunctionExpression: {\n                                type: \"boolean\",\n                                default: false\n                            },\n                            FunctionExpression: {\n                                type: \"boolean\",\n                                default: false\n                            }\n                        },\n                        additionalProperties: false,\n                        default: {}\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        deprecated: true,\n        replacedBy: [],\n\n        messages: {\n            missingJSDocComment: \"Missing JSDoc comment.\"\n        }\n    },\n\n    create(context) {\n        const source = context.sourceCode;\n        const DEFAULT_OPTIONS = {\n            FunctionDeclaration: true,\n            MethodDefinition: false,\n            ClassDeclaration: false,\n            ArrowFunctionExpression: false,\n            FunctionExpression: false\n        };\n        const options = Object.assign(DEFAULT_OPTIONS, context.options[0] && context.options[0].require);\n\n        /**\n         * Report the error message\n         * @param {ASTNode} node node to report\n         * @returns {void}\n         */\n        function report(node) {\n            context.report({ node, messageId: \"missingJSDocComment\" });\n        }\n\n        /**\n         * Check if the jsdoc comment is present or not.\n         * @param {ASTNode} node node to examine\n         * @returns {void}\n         */\n        function checkJsDoc(node) {\n            const jsdocComment = source.getJSDocComment(node);\n\n            if (!jsdocComment) {\n                report(node);\n            }\n        }\n\n        return {\n            FunctionDeclaration(node) {\n                if (options.FunctionDeclaration) {\n                    checkJsDoc(node);\n                }\n            },\n            FunctionExpression(node) {\n                if (\n                    (options.MethodDefinition && node.parent.type === \"MethodDefinition\") ||\n                    (options.FunctionExpression && (node.parent.type === \"VariableDeclarator\" || (node.parent.type === \"Property\" && node === node.parent.value)))\n                ) {\n                    checkJsDoc(node);\n                }\n            },\n            ClassDeclaration(node) {\n                if (options.ClassDeclaration) {\n                    checkJsDoc(node);\n                }\n            },\n            ArrowFunctionExpression(node) {\n                if (options.ArrowFunctionExpression && node.parent.type === \"VariableDeclarator\") {\n                    checkJsDoc(node);\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}