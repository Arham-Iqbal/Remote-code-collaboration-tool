{"ast":null,"code":"/**\n * @fileoverview Rule to disallow assignments to native objects or read-only global variables\n * @author Ilya Volodin\n * @deprecated in ESLint v3.3.0\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow assignments to native objects or read-only global variables\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/no-native-reassign\"\n    },\n    deprecated: true,\n    replacedBy: [\"no-global-assign\"],\n    schema: [{\n      type: \"object\",\n      properties: {\n        exceptions: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          },\n          uniqueItems: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      nativeReassign: \"Read-only global '{{name}}' should not be modified.\"\n    }\n  },\n  create(context) {\n    const config = context.options[0];\n    const exceptions = config && config.exceptions || [];\n    const sourceCode = context.sourceCode;\n\n    /**\n     * Reports write references.\n     * @param {Reference} reference A reference to check.\n     * @param {int} index The index of the reference in the references.\n     * @param {Reference[]} references The array that the reference belongs to.\n     * @returns {void}\n     */\n    function checkReference(reference, index, references) {\n      const identifier = reference.identifier;\n      if (reference.init === false && reference.isWrite() && (\n      /*\n       * Destructuring assignments can have multiple default value,\n       * so possibly there are multiple writeable references for the same identifier.\n       */\n      index === 0 || references[index - 1].identifier !== identifier)) {\n        context.report({\n          node: identifier,\n          messageId: \"nativeReassign\",\n          data: identifier\n        });\n      }\n    }\n\n    /**\n     * Reports write references if a given variable is read-only builtin.\n     * @param {Variable} variable A variable to check.\n     * @returns {void}\n     */\n    function checkVariable(variable) {\n      if (variable.writeable === false && !exceptions.includes(variable.name)) {\n        variable.references.forEach(checkReference);\n      }\n    }\n    return {\n      Program(node) {\n        const globalScope = sourceCode.getScope(node);\n        globalScope.variables.forEach(checkVariable);\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","recommended","url","deprecated","replacedBy","schema","properties","exceptions","items","uniqueItems","additionalProperties","messages","nativeReassign","create","context","config","options","sourceCode","checkReference","reference","index","references","identifier","init","isWrite","report","node","messageId","data","checkVariable","variable","writeable","includes","name","forEach","Program","globalScope","getScope","variables"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-native-reassign.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow assignments to native objects or read-only global variables\n * @author Ilya Volodin\n * @deprecated in ESLint v3.3.0\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow assignments to native objects or read-only global variables\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-native-reassign\"\n        },\n\n        deprecated: true,\n\n        replacedBy: [\"no-global-assign\"],\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    exceptions: {\n                        type: \"array\",\n                        items: { type: \"string\" },\n                        uniqueItems: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            nativeReassign: \"Read-only global '{{name}}' should not be modified.\"\n        }\n    },\n\n    create(context) {\n        const config = context.options[0];\n        const exceptions = (config && config.exceptions) || [];\n        const sourceCode = context.sourceCode;\n\n        /**\n         * Reports write references.\n         * @param {Reference} reference A reference to check.\n         * @param {int} index The index of the reference in the references.\n         * @param {Reference[]} references The array that the reference belongs to.\n         * @returns {void}\n         */\n        function checkReference(reference, index, references) {\n            const identifier = reference.identifier;\n\n            if (reference.init === false &&\n                reference.isWrite() &&\n\n                /*\n                 * Destructuring assignments can have multiple default value,\n                 * so possibly there are multiple writeable references for the same identifier.\n                 */\n                (index === 0 || references[index - 1].identifier !== identifier)\n            ) {\n                context.report({\n                    node: identifier,\n                    messageId: \"nativeReassign\",\n                    data: identifier\n                });\n            }\n        }\n\n        /**\n         * Reports write references if a given variable is read-only builtin.\n         * @param {Variable} variable A variable to check.\n         * @returns {void}\n         */\n        function checkVariable(variable) {\n            if (variable.writeable === false && !exceptions.includes(variable.name)) {\n                variable.references.forEach(checkReference);\n            }\n        }\n\n        return {\n            Program(node) {\n                const globalScope = sourceCode.getScope(node);\n\n                globalScope.variables.forEach(checkVariable);\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;;AAEA;AACAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,sEAAsE;MACnFC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,UAAU,EAAE,IAAI;IAEhBC,UAAU,EAAE,CAAC,kBAAkB,CAAC;IAEhCC,MAAM,EAAE,CACJ;MACIP,IAAI,EAAE,QAAQ;MACdQ,UAAU,EAAE;QACRC,UAAU,EAAE;UACRT,IAAI,EAAE,OAAO;UACbU,KAAK,EAAE;YAAEV,IAAI,EAAE;UAAS,CAAC;UACzBW,WAAW,EAAE;QACjB;MACJ,CAAC;MACDC,oBAAoB,EAAE;IAC1B,CAAC,CACJ;IAEDC,QAAQ,EAAE;MACNC,cAAc,EAAE;IACpB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,MAAM,GAAGD,OAAO,CAACE,OAAO,CAAC,CAAC,CAAC;IACjC,MAAMT,UAAU,GAAIQ,MAAM,IAAIA,MAAM,CAACR,UAAU,IAAK,EAAE;IACtD,MAAMU,UAAU,GAAGH,OAAO,CAACG,UAAU;;IAErC;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,SAASC,cAAcA,CAACC,SAAS,EAAEC,KAAK,EAAEC,UAAU,EAAE;MAClD,MAAMC,UAAU,GAAGH,SAAS,CAACG,UAAU;MAEvC,IAAIH,SAAS,CAACI,IAAI,KAAK,KAAK,IACxBJ,SAAS,CAACK,OAAO,CAAC,CAAC;MAEnB;AAChB;AACA;AACA;MACiBJ,KAAK,KAAK,CAAC,IAAIC,UAAU,CAACD,KAAK,GAAG,CAAC,CAAC,CAACE,UAAU,KAAKA,UAAU,CAAC,EAClE;QACER,OAAO,CAACW,MAAM,CAAC;UACXC,IAAI,EAAEJ,UAAU;UAChBK,SAAS,EAAE,gBAAgB;UAC3BC,IAAI,EAAEN;QACV,CAAC,CAAC;MACN;IACJ;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASO,aAAaA,CAACC,QAAQ,EAAE;MAC7B,IAAIA,QAAQ,CAACC,SAAS,KAAK,KAAK,IAAI,CAACxB,UAAU,CAACyB,QAAQ,CAACF,QAAQ,CAACG,IAAI,CAAC,EAAE;QACrEH,QAAQ,CAACT,UAAU,CAACa,OAAO,CAAChB,cAAc,CAAC;MAC/C;IACJ;IAEA,OAAO;MACHiB,OAAOA,CAACT,IAAI,EAAE;QACV,MAAMU,WAAW,GAAGnB,UAAU,CAACoB,QAAQ,CAACX,IAAI,CAAC;QAE7CU,WAAW,CAACE,SAAS,CAACJ,OAAO,CAACL,aAAa,CAAC;MAChD;IACJ,CAAC;EACL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}