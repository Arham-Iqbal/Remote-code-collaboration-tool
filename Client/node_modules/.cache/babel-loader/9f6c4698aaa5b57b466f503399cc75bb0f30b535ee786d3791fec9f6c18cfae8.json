{"ast":null,"code":"/**\n * @fileoverview Rule to enforce the use of `u` flag on RegExp.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst {\n  CALL,\n  CONSTRUCT,\n  ReferenceTracker,\n  getStringIfConstant\n} = require(\"@eslint-community/eslint-utils\");\nconst astUtils = require(\"./utils/ast-utils.js\");\nconst {\n  isValidWithUnicodeFlag\n} = require(\"./utils/regular-expressions\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Enforce the use of `u` or `v` flag on RegExp\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/require-unicode-regexp\"\n    },\n    hasSuggestions: true,\n    messages: {\n      addUFlag: \"Add the 'u' flag.\",\n      requireUFlag: \"Use the 'u' flag.\"\n    },\n    schema: []\n  },\n  create(context) {\n    const sourceCode = context.sourceCode;\n    return {\n      \"Literal[regex]\"(node) {\n        const flags = node.regex.flags || \"\";\n        if (!flags.includes(\"u\") && !flags.includes(\"v\")) {\n          context.report({\n            messageId: \"requireUFlag\",\n            node,\n            suggest: isValidWithUnicodeFlag(context.languageOptions.ecmaVersion, node.regex.pattern) ? [{\n              fix(fixer) {\n                return fixer.insertTextAfter(node, \"u\");\n              },\n              messageId: \"addUFlag\"\n            }] : null\n          });\n        }\n      },\n      Program(node) {\n        const scope = sourceCode.getScope(node);\n        const tracker = new ReferenceTracker(scope);\n        const trackMap = {\n          RegExp: {\n            [CALL]: true,\n            [CONSTRUCT]: true\n          }\n        };\n        for (const {\n          node: refNode\n        } of tracker.iterateGlobalReferences(trackMap)) {\n          const [patternNode, flagsNode] = refNode.arguments;\n          if (patternNode && patternNode.type === \"SpreadElement\") {\n            continue;\n          }\n          const pattern = getStringIfConstant(patternNode, scope);\n          const flags = getStringIfConstant(flagsNode, scope);\n          if (!flagsNode || typeof flags === \"string\" && !flags.includes(\"u\") && !flags.includes(\"v\")) {\n            context.report({\n              messageId: \"requireUFlag\",\n              node: refNode,\n              suggest: typeof pattern === \"string\" && isValidWithUnicodeFlag(context.languageOptions.ecmaVersion, pattern) ? [{\n                fix(fixer) {\n                  if (flagsNode) {\n                    if (flagsNode.type === \"Literal\" && typeof flagsNode.value === \"string\" || flagsNode.type === \"TemplateLiteral\") {\n                      const flagsNodeText = sourceCode.getText(flagsNode);\n                      return fixer.replaceText(flagsNode, [flagsNodeText.slice(0, flagsNodeText.length - 1), flagsNodeText.slice(flagsNodeText.length - 1)].join(\"u\"));\n                    }\n\n                    // We intentionally don't suggest concatenating + \"u\" to non-literals\n                    return null;\n                  }\n                  const penultimateToken = sourceCode.getLastToken(refNode, {\n                    skip: 1\n                  }); // skip closing parenthesis\n\n                  return fixer.insertTextAfter(penultimateToken, astUtils.isCommaToken(penultimateToken) ? ' \"u\",' : ', \"u\"');\n                },\n                messageId: \"addUFlag\"\n              }] : null\n            });\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["CALL","CONSTRUCT","ReferenceTracker","getStringIfConstant","require","astUtils","isValidWithUnicodeFlag","module","exports","meta","type","docs","description","recommended","url","hasSuggestions","messages","addUFlag","requireUFlag","schema","create","context","sourceCode","Literal[regex]","node","flags","regex","includes","report","messageId","suggest","languageOptions","ecmaVersion","pattern","fix","fixer","insertTextAfter","Program","scope","getScope","tracker","trackMap","RegExp","refNode","iterateGlobalReferences","patternNode","flagsNode","arguments","value","flagsNodeText","getText","replaceText","slice","length","join","penultimateToken","getLastToken","skip","isCommaToken"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/require-unicode-regexp.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce the use of `u` flag on RegExp.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst {\n    CALL,\n    CONSTRUCT,\n    ReferenceTracker,\n    getStringIfConstant\n} = require(\"@eslint-community/eslint-utils\");\nconst astUtils = require(\"./utils/ast-utils.js\");\nconst { isValidWithUnicodeFlag } = require(\"./utils/regular-expressions\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Enforce the use of `u` or `v` flag on RegExp\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/require-unicode-regexp\"\n        },\n\n        hasSuggestions: true,\n\n        messages: {\n            addUFlag: \"Add the 'u' flag.\",\n            requireUFlag: \"Use the 'u' flag.\"\n        },\n\n        schema: []\n    },\n\n    create(context) {\n\n        const sourceCode = context.sourceCode;\n\n        return {\n            \"Literal[regex]\"(node) {\n                const flags = node.regex.flags || \"\";\n\n                if (!flags.includes(\"u\") && !flags.includes(\"v\")) {\n                    context.report({\n                        messageId: \"requireUFlag\",\n                        node,\n                        suggest: isValidWithUnicodeFlag(context.languageOptions.ecmaVersion, node.regex.pattern)\n                            ? [\n                                {\n                                    fix(fixer) {\n                                        return fixer.insertTextAfter(node, \"u\");\n                                    },\n                                    messageId: \"addUFlag\"\n                                }\n                            ]\n                            : null\n                    });\n                }\n            },\n\n            Program(node) {\n                const scope = sourceCode.getScope(node);\n                const tracker = new ReferenceTracker(scope);\n                const trackMap = {\n                    RegExp: { [CALL]: true, [CONSTRUCT]: true }\n                };\n\n                for (const { node: refNode } of tracker.iterateGlobalReferences(trackMap)) {\n                    const [patternNode, flagsNode] = refNode.arguments;\n\n                    if (patternNode && patternNode.type === \"SpreadElement\") {\n                        continue;\n                    }\n                    const pattern = getStringIfConstant(patternNode, scope);\n                    const flags = getStringIfConstant(flagsNode, scope);\n\n                    if (!flagsNode || (typeof flags === \"string\" && !flags.includes(\"u\") && !flags.includes(\"v\"))) {\n                        context.report({\n                            messageId: \"requireUFlag\",\n                            node: refNode,\n                            suggest: typeof pattern === \"string\" && isValidWithUnicodeFlag(context.languageOptions.ecmaVersion, pattern)\n                                ? [\n                                    {\n                                        fix(fixer) {\n                                            if (flagsNode) {\n                                                if ((flagsNode.type === \"Literal\" && typeof flagsNode.value === \"string\") || flagsNode.type === \"TemplateLiteral\") {\n                                                    const flagsNodeText = sourceCode.getText(flagsNode);\n\n                                                    return fixer.replaceText(flagsNode, [\n                                                        flagsNodeText.slice(0, flagsNodeText.length - 1),\n                                                        flagsNodeText.slice(flagsNodeText.length - 1)\n                                                    ].join(\"u\"));\n                                                }\n\n                                                // We intentionally don't suggest concatenating + \"u\" to non-literals\n                                                return null;\n                                            }\n\n                                            const penultimateToken = sourceCode.getLastToken(refNode, { skip: 1 }); // skip closing parenthesis\n\n                                            return fixer.insertTextAfter(\n                                                penultimateToken,\n                                                astUtils.isCommaToken(penultimateToken)\n                                                    ? ' \"u\",'\n                                                    : ', \"u\"'\n                                            );\n                                        },\n                                        messageId: \"addUFlag\"\n                                    }\n                                ]\n                                : null\n                        });\n                    }\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}