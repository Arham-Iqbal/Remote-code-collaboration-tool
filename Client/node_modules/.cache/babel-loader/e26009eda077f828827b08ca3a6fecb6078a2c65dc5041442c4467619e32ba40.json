{"ast":null,"code":"/**\n * @fileoverview Rule to enforce declarations in program or function body root.\n * @author Brandon Mills\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst validParent = new Set([\"Program\", \"StaticBlock\", \"ExportNamedDeclaration\", \"ExportDefaultDeclaration\"]);\nconst validBlockStatementParent = new Set([\"FunctionDeclaration\", \"FunctionExpression\", \"ArrowFunctionExpression\"]);\n\n/**\n * Finds the nearest enclosing context where this rule allows declarations and returns its description.\n * @param {ASTNode} node Node to search from.\n * @returns {string} Description. One of \"program\", \"function body\", \"class static block body\".\n */\nfunction getAllowedBodyDescription(node) {\n  let {\n    parent\n  } = node;\n  while (parent) {\n    if (parent.type === \"StaticBlock\") {\n      return \"class static block body\";\n    }\n    if (astUtils.isFunction(parent)) {\n      return \"function body\";\n    }\n    ({\n      parent\n    } = parent);\n  }\n  return \"program\";\n}\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"Disallow variable or `function` declarations in nested blocks\",\n      recommended: true,\n      url: \"https://eslint.org/docs/latest/rules/no-inner-declarations\"\n    },\n    schema: [{\n      enum: [\"functions\", \"both\"]\n    }],\n    messages: {\n      moveDeclToRoot: \"Move {{type}} declaration to {{body}} root.\"\n    }\n  },\n  create(context) {\n    /**\n     * Ensure that a given node is at a program or function body's root.\n     * @param {ASTNode} node Declaration node to check.\n     * @returns {void}\n     */\n    function check(node) {\n      const parent = node.parent;\n      if (parent.type === \"BlockStatement\" && validBlockStatementParent.has(parent.parent.type)) {\n        return;\n      }\n      if (validParent.has(parent.type)) {\n        return;\n      }\n      context.report({\n        node,\n        messageId: \"moveDeclToRoot\",\n        data: {\n          type: node.type === \"FunctionDeclaration\" ? \"function\" : \"variable\",\n          body: getAllowedBodyDescription(node)\n        }\n      });\n    }\n    return {\n      FunctionDeclaration: check,\n      VariableDeclaration(node) {\n        if (context.options[0] === \"both\" && node.kind === \"var\") {\n          check(node);\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","validParent","Set","validBlockStatementParent","getAllowedBodyDescription","node","parent","type","isFunction","module","exports","meta","docs","description","recommended","url","schema","enum","messages","moveDeclToRoot","create","context","check","has","report","messageId","data","body","FunctionDeclaration","VariableDeclaration","options","kind"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-inner-declarations.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce declarations in program or function body root.\n * @author Brandon Mills\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst validParent = new Set([\"Program\", \"StaticBlock\", \"ExportNamedDeclaration\", \"ExportDefaultDeclaration\"]);\nconst validBlockStatementParent = new Set([\"FunctionDeclaration\", \"FunctionExpression\", \"ArrowFunctionExpression\"]);\n\n/**\n * Finds the nearest enclosing context where this rule allows declarations and returns its description.\n * @param {ASTNode} node Node to search from.\n * @returns {string} Description. One of \"program\", \"function body\", \"class static block body\".\n */\nfunction getAllowedBodyDescription(node) {\n    let { parent } = node;\n\n    while (parent) {\n\n        if (parent.type === \"StaticBlock\") {\n            return \"class static block body\";\n        }\n\n        if (astUtils.isFunction(parent)) {\n            return \"function body\";\n        }\n\n        ({ parent } = parent);\n    }\n\n    return \"program\";\n}\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"Disallow variable or `function` declarations in nested blocks\",\n            recommended: true,\n            url: \"https://eslint.org/docs/latest/rules/no-inner-declarations\"\n        },\n\n        schema: [\n            {\n                enum: [\"functions\", \"both\"]\n            }\n        ],\n\n        messages: {\n            moveDeclToRoot: \"Move {{type}} declaration to {{body}} root.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Ensure that a given node is at a program or function body's root.\n         * @param {ASTNode} node Declaration node to check.\n         * @returns {void}\n         */\n        function check(node) {\n            const parent = node.parent;\n\n            if (\n                parent.type === \"BlockStatement\" && validBlockStatementParent.has(parent.parent.type)\n            ) {\n                return;\n            }\n\n            if (validParent.has(parent.type)) {\n                return;\n            }\n\n            context.report({\n                node,\n                messageId: \"moveDeclToRoot\",\n                data: {\n                    type: (node.type === \"FunctionDeclaration\" ? \"function\" : \"variable\"),\n                    body: getAllowedBodyDescription(node)\n                }\n            });\n        }\n\n\n        return {\n\n            FunctionDeclaration: check,\n            VariableDeclaration(node) {\n                if (context.options[0] === \"both\" && node.kind === \"var\") {\n                    check(node);\n                }\n            }\n\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;;AAEA,MAAMC,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC,SAAS,EAAE,aAAa,EAAE,wBAAwB,EAAE,0BAA0B,CAAC,CAAC;AAC7G,MAAMC,yBAAyB,GAAG,IAAID,GAAG,CAAC,CAAC,qBAAqB,EAAE,oBAAoB,EAAE,yBAAyB,CAAC,CAAC;;AAEnH;AACA;AACA;AACA;AACA;AACA,SAASE,yBAAyBA,CAACC,IAAI,EAAE;EACrC,IAAI;IAAEC;EAAO,CAAC,GAAGD,IAAI;EAErB,OAAOC,MAAM,EAAE;IAEX,IAAIA,MAAM,CAACC,IAAI,KAAK,aAAa,EAAE;MAC/B,OAAO,yBAAyB;IACpC;IAEA,IAAIR,QAAQ,CAACS,UAAU,CAACF,MAAM,CAAC,EAAE;MAC7B,OAAO,eAAe;IAC1B;IAEA,CAAC;MAAEA;IAAO,CAAC,GAAGA,MAAM;EACxB;EAEA,OAAO,SAAS;AACpB;;AAEA;AACAG,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFJ,IAAI,EAAE,SAAS;IAEfK,IAAI,EAAE;MACFC,WAAW,EAAE,+DAA+D;MAC5EC,WAAW,EAAE,IAAI;MACjBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,CACJ;MACIC,IAAI,EAAE,CAAC,WAAW,EAAE,MAAM;IAC9B,CAAC,CACJ;IAEDC,QAAQ,EAAE;MACNC,cAAc,EAAE;IACpB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ;AACR;AACA;AACA;AACA;IACQ,SAASC,KAAKA,CAACjB,IAAI,EAAE;MACjB,MAAMC,MAAM,GAAGD,IAAI,CAACC,MAAM;MAE1B,IACIA,MAAM,CAACC,IAAI,KAAK,gBAAgB,IAAIJ,yBAAyB,CAACoB,GAAG,CAACjB,MAAM,CAACA,MAAM,CAACC,IAAI,CAAC,EACvF;QACE;MACJ;MAEA,IAAIN,WAAW,CAACsB,GAAG,CAACjB,MAAM,CAACC,IAAI,CAAC,EAAE;QAC9B;MACJ;MAEAc,OAAO,CAACG,MAAM,CAAC;QACXnB,IAAI;QACJoB,SAAS,EAAE,gBAAgB;QAC3BC,IAAI,EAAE;UACFnB,IAAI,EAAGF,IAAI,CAACE,IAAI,KAAK,qBAAqB,GAAG,UAAU,GAAG,UAAW;UACrEoB,IAAI,EAAEvB,yBAAyB,CAACC,IAAI;QACxC;MACJ,CAAC,CAAC;IACN;IAGA,OAAO;MAEHuB,mBAAmB,EAAEN,KAAK;MAC1BO,mBAAmBA,CAACxB,IAAI,EAAE;QACtB,IAAIgB,OAAO,CAACS,OAAO,CAAC,CAAC,CAAC,KAAK,MAAM,IAAIzB,IAAI,CAAC0B,IAAI,KAAK,KAAK,EAAE;UACtDT,KAAK,CAACjB,IAAI,CAAC;QACf;MACJ;IAEJ,CAAC;EAEL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}