{"ast":null,"code":"/**\n * @fileoverview Restrict usage of specified node modules.\n * @author Christian Schulz\n * @deprecated in ESLint v7.0.0\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst ignore = require(\"ignore\");\nconst arrayOfStrings = {\n  type: \"array\",\n  items: {\n    type: \"string\"\n  },\n  uniqueItems: true\n};\nconst arrayOfStringsOrObjects = {\n  type: \"array\",\n  items: {\n    anyOf: [{\n      type: \"string\"\n    }, {\n      type: \"object\",\n      properties: {\n        name: {\n          type: \"string\"\n        },\n        message: {\n          type: \"string\",\n          minLength: 1\n        }\n      },\n      additionalProperties: false,\n      required: [\"name\"]\n    }]\n  },\n  uniqueItems: true\n};\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    deprecated: true,\n    replacedBy: [],\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow specified modules when loaded by `require`\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/no-restricted-modules\"\n    },\n    schema: {\n      anyOf: [arrayOfStringsOrObjects, {\n        type: \"array\",\n        items: {\n          type: \"object\",\n          properties: {\n            paths: arrayOfStringsOrObjects,\n            patterns: arrayOfStrings\n          },\n          additionalProperties: false\n        },\n        additionalItems: false\n      }]\n    },\n    messages: {\n      defaultMessage: \"'{{name}}' module is restricted from being used.\",\n      // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period\n      customMessage: \"'{{name}}' module is restricted from being used. {{customMessage}}\",\n      patternMessage: \"'{{name}}' module is restricted from being used by a pattern.\"\n    }\n  },\n  create(context) {\n    const options = Array.isArray(context.options) ? context.options : [];\n    const isPathAndPatternsObject = typeof options[0] === \"object\" && (Object.prototype.hasOwnProperty.call(options[0], \"paths\") || Object.prototype.hasOwnProperty.call(options[0], \"patterns\"));\n    const restrictedPaths = (isPathAndPatternsObject ? options[0].paths : context.options) || [];\n    const restrictedPatterns = (isPathAndPatternsObject ? options[0].patterns : []) || [];\n    const restrictedPathMessages = restrictedPaths.reduce((memo, importName) => {\n      if (typeof importName === \"string\") {\n        memo[importName] = null;\n      } else {\n        memo[importName.name] = importName.message;\n      }\n      return memo;\n    }, {});\n\n    // if no imports are restricted we don't need to check\n    if (Object.keys(restrictedPaths).length === 0 && restrictedPatterns.length === 0) {\n      return {};\n    }\n\n    // relative paths are supported for this rule\n    const ig = ignore({\n      allowRelativePaths: true\n    }).add(restrictedPatterns);\n\n    /**\n     * Function to check if a node is a string literal.\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} If the node is a string literal.\n     */\n    function isStringLiteral(node) {\n      return node && node.type === \"Literal\" && typeof node.value === \"string\";\n    }\n\n    /**\n     * Function to check if a node is a require call.\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} If the node is a require call.\n     */\n    function isRequireCall(node) {\n      return node.callee.type === \"Identifier\" && node.callee.name === \"require\";\n    }\n\n    /**\n     * Extract string from Literal or TemplateLiteral node\n     * @param {ASTNode} node The node to extract from\n     * @returns {string|null} Extracted string or null if node doesn't represent a string\n     */\n    function getFirstArgumentString(node) {\n      if (isStringLiteral(node)) {\n        return node.value.trim();\n      }\n      if (astUtils.isStaticTemplateLiteral(node)) {\n        return node.quasis[0].value.cooked.trim();\n      }\n      return null;\n    }\n\n    /**\n     * Report a restricted path.\n     * @param {node} node representing the restricted path reference\n     * @param {string} name restricted path\n     * @returns {void}\n     * @private\n     */\n    function reportPath(node, name) {\n      const customMessage = restrictedPathMessages[name];\n      const messageId = customMessage ? \"customMessage\" : \"defaultMessage\";\n      context.report({\n        node,\n        messageId,\n        data: {\n          name,\n          customMessage\n        }\n      });\n    }\n\n    /**\n     * Check if the given name is a restricted path name\n     * @param {string} name name of a variable\n     * @returns {boolean} whether the variable is a restricted path or not\n     * @private\n     */\n    function isRestrictedPath(name) {\n      return Object.prototype.hasOwnProperty.call(restrictedPathMessages, name);\n    }\n    return {\n      CallExpression(node) {\n        if (isRequireCall(node)) {\n          // node has arguments\n          if (node.arguments.length) {\n            const name = getFirstArgumentString(node.arguments[0]);\n\n            // if first argument is a string literal or a static string template literal\n            if (name) {\n              // check if argument value is in restricted modules array\n              if (isRestrictedPath(name)) {\n                reportPath(node, name);\n              }\n              if (restrictedPatterns.length > 0 && ig.ignores(name)) {\n                context.report({\n                  node,\n                  messageId: \"patternMessage\",\n                  data: {\n                    name\n                  }\n                });\n              }\n            }\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","ignore","arrayOfStrings","type","items","uniqueItems","arrayOfStringsOrObjects","anyOf","properties","name","message","minLength","additionalProperties","required","module","exports","meta","deprecated","replacedBy","docs","description","recommended","url","schema","paths","patterns","additionalItems","messages","defaultMessage","customMessage","patternMessage","create","context","options","Array","isArray","isPathAndPatternsObject","Object","prototype","hasOwnProperty","call","restrictedPaths","restrictedPatterns","restrictedPathMessages","reduce","memo","importName","keys","length","ig","allowRelativePaths","add","isStringLiteral","node","value","isRequireCall","callee","getFirstArgumentString","trim","isStaticTemplateLiteral","quasis","cooked","reportPath","messageId","report","data","isRestrictedPath","CallExpression","arguments","ignores"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-restricted-modules.js"],"sourcesContent":["/**\n * @fileoverview Restrict usage of specified node modules.\n * @author Christian Schulz\n * @deprecated in ESLint v7.0.0\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst ignore = require(\"ignore\");\n\nconst arrayOfStrings = {\n    type: \"array\",\n    items: { type: \"string\" },\n    uniqueItems: true\n};\n\nconst arrayOfStringsOrObjects = {\n    type: \"array\",\n    items: {\n        anyOf: [\n            { type: \"string\" },\n            {\n                type: \"object\",\n                properties: {\n                    name: { type: \"string\" },\n                    message: {\n                        type: \"string\",\n                        minLength: 1\n                    }\n                },\n                additionalProperties: false,\n                required: [\"name\"]\n            }\n        ]\n    },\n    uniqueItems: true\n};\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        deprecated: true,\n\n        replacedBy: [],\n\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow specified modules when loaded by `require`\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-restricted-modules\"\n        },\n\n        schema: {\n            anyOf: [\n                arrayOfStringsOrObjects,\n                {\n                    type: \"array\",\n                    items: {\n                        type: \"object\",\n                        properties: {\n                            paths: arrayOfStringsOrObjects,\n                            patterns: arrayOfStrings\n                        },\n                        additionalProperties: false\n                    },\n                    additionalItems: false\n                }\n            ]\n        },\n\n        messages: {\n            defaultMessage: \"'{{name}}' module is restricted from being used.\",\n            // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period\n            customMessage: \"'{{name}}' module is restricted from being used. {{customMessage}}\",\n            patternMessage: \"'{{name}}' module is restricted from being used by a pattern.\"\n        }\n    },\n\n    create(context) {\n        const options = Array.isArray(context.options) ? context.options : [];\n        const isPathAndPatternsObject =\n            typeof options[0] === \"object\" &&\n            (Object.prototype.hasOwnProperty.call(options[0], \"paths\") || Object.prototype.hasOwnProperty.call(options[0], \"patterns\"));\n\n        const restrictedPaths = (isPathAndPatternsObject ? options[0].paths : context.options) || [];\n        const restrictedPatterns = (isPathAndPatternsObject ? options[0].patterns : []) || [];\n\n        const restrictedPathMessages = restrictedPaths.reduce((memo, importName) => {\n            if (typeof importName === \"string\") {\n                memo[importName] = null;\n            } else {\n                memo[importName.name] = importName.message;\n            }\n            return memo;\n        }, {});\n\n        // if no imports are restricted we don't need to check\n        if (Object.keys(restrictedPaths).length === 0 && restrictedPatterns.length === 0) {\n            return {};\n        }\n\n        // relative paths are supported for this rule\n        const ig = ignore({ allowRelativePaths: true }).add(restrictedPatterns);\n\n\n        /**\n         * Function to check if a node is a string literal.\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} If the node is a string literal.\n         */\n        function isStringLiteral(node) {\n            return node && node.type === \"Literal\" && typeof node.value === \"string\";\n        }\n\n        /**\n         * Function to check if a node is a require call.\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} If the node is a require call.\n         */\n        function isRequireCall(node) {\n            return node.callee.type === \"Identifier\" && node.callee.name === \"require\";\n        }\n\n        /**\n         * Extract string from Literal or TemplateLiteral node\n         * @param {ASTNode} node The node to extract from\n         * @returns {string|null} Extracted string or null if node doesn't represent a string\n         */\n        function getFirstArgumentString(node) {\n            if (isStringLiteral(node)) {\n                return node.value.trim();\n            }\n\n            if (astUtils.isStaticTemplateLiteral(node)) {\n                return node.quasis[0].value.cooked.trim();\n            }\n\n            return null;\n        }\n\n        /**\n         * Report a restricted path.\n         * @param {node} node representing the restricted path reference\n         * @param {string} name restricted path\n         * @returns {void}\n         * @private\n         */\n        function reportPath(node, name) {\n            const customMessage = restrictedPathMessages[name];\n            const messageId = customMessage\n                ? \"customMessage\"\n                : \"defaultMessage\";\n\n            context.report({\n                node,\n                messageId,\n                data: {\n                    name,\n                    customMessage\n                }\n            });\n        }\n\n        /**\n         * Check if the given name is a restricted path name\n         * @param {string} name name of a variable\n         * @returns {boolean} whether the variable is a restricted path or not\n         * @private\n         */\n        function isRestrictedPath(name) {\n            return Object.prototype.hasOwnProperty.call(restrictedPathMessages, name);\n        }\n\n        return {\n            CallExpression(node) {\n                if (isRequireCall(node)) {\n\n                    // node has arguments\n                    if (node.arguments.length) {\n                        const name = getFirstArgumentString(node.arguments[0]);\n\n                        // if first argument is a string literal or a static string template literal\n                        if (name) {\n\n                            // check if argument value is in restricted modules array\n                            if (isRestrictedPath(name)) {\n                                reportPath(node, name);\n                            }\n\n                            if (restrictedPatterns.length > 0 && ig.ignores(name)) {\n                                context.report({\n                                    node,\n                                    messageId: \"patternMessage\",\n                                    data: { name }\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}