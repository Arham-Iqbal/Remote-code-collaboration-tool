{"ast":null,"code":"/**\n * @fileoverview require default case in switch statements\n * @author Aliaksei Shytkin\n */\n\"use strict\";\n\nconst DEFAULT_COMMENT_PATTERN = /^no default$/iu;\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Require `default` cases in `switch` statements\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/default-case\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        commentPattern: {\n          type: \"string\"\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      missingDefaultCase: \"Expected a default case.\"\n    }\n  },\n  create(context) {\n    const options = context.options[0] || {};\n    const commentPattern = options.commentPattern ? new RegExp(options.commentPattern, \"u\") : DEFAULT_COMMENT_PATTERN;\n    const sourceCode = context.sourceCode;\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Shortcut to get last element of array\n     * @param {*[]} collection Array\n     * @returns {any} Last element\n     */\n    function last(collection) {\n      return collection[collection.length - 1];\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n      SwitchStatement(node) {\n        if (!node.cases.length) {\n          /*\n           * skip check of empty switch because there is no easy way\n           * to extract comments inside it now\n           */\n          return;\n        }\n        const hasDefault = node.cases.some(v => v.test === null);\n        if (!hasDefault) {\n          let comment;\n          const lastCase = last(node.cases);\n          const comments = sourceCode.getCommentsAfter(lastCase);\n          if (comments.length) {\n            comment = last(comments);\n          }\n          if (!comment || !commentPattern.test(comment.value.trim())) {\n            context.report({\n              node,\n              messageId: \"missingDefaultCase\"\n            });\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["DEFAULT_COMMENT_PATTERN","module","exports","meta","type","docs","description","recommended","url","schema","properties","commentPattern","additionalProperties","messages","missingDefaultCase","create","context","options","RegExp","sourceCode","last","collection","length","SwitchStatement","node","cases","hasDefault","some","v","test","comment","lastCase","comments","getCommentsAfter","value","trim","report","messageId"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/default-case.js"],"sourcesContent":["/**\n * @fileoverview require default case in switch statements\n * @author Aliaksei Shytkin\n */\n\"use strict\";\n\nconst DEFAULT_COMMENT_PATTERN = /^no default$/iu;\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Require `default` cases in `switch` statements\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/default-case\"\n        },\n\n        schema: [{\n            type: \"object\",\n            properties: {\n                commentPattern: {\n                    type: \"string\"\n                }\n            },\n            additionalProperties: false\n        }],\n\n        messages: {\n            missingDefaultCase: \"Expected a default case.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options[0] || {};\n        const commentPattern = options.commentPattern\n            ? new RegExp(options.commentPattern, \"u\")\n            : DEFAULT_COMMENT_PATTERN;\n\n        const sourceCode = context.sourceCode;\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Shortcut to get last element of array\n         * @param {*[]} collection Array\n         * @returns {any} Last element\n         */\n        function last(collection) {\n            return collection[collection.length - 1];\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n\n            SwitchStatement(node) {\n\n                if (!node.cases.length) {\n\n                    /*\n                     * skip check of empty switch because there is no easy way\n                     * to extract comments inside it now\n                     */\n                    return;\n                }\n\n                const hasDefault = node.cases.some(v => v.test === null);\n\n                if (!hasDefault) {\n\n                    let comment;\n\n                    const lastCase = last(node.cases);\n                    const comments = sourceCode.getCommentsAfter(lastCase);\n\n                    if (comments.length) {\n                        comment = last(comments);\n                    }\n\n                    if (!comment || !commentPattern.test(comment.value.trim())) {\n                        context.report({ node, messageId: \"missingDefaultCase\" });\n                    }\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,MAAMA,uBAAuB,GAAG,gBAAgB;;AAEhD;AACA;AACA;;AAEA;AACAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,gDAAgD;MAC7DC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,CAAC;MACLL,IAAI,EAAE,QAAQ;MACdM,UAAU,EAAE;QACRC,cAAc,EAAE;UACZP,IAAI,EAAE;QACV;MACJ,CAAC;MACDQ,oBAAoB,EAAE;IAC1B,CAAC,CAAC;IAEFC,QAAQ,EAAE;MACNC,kBAAkB,EAAE;IACxB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,OAAO,GAAGD,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACxC,MAAMN,cAAc,GAAGM,OAAO,CAACN,cAAc,GACvC,IAAIO,MAAM,CAACD,OAAO,CAACN,cAAc,EAAE,GAAG,CAAC,GACvCX,uBAAuB;IAE7B,MAAMmB,UAAU,GAAGH,OAAO,CAACG,UAAU;;IAErC;IACA;IACA;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASC,IAAIA,CAACC,UAAU,EAAE;MACtB,OAAOA,UAAU,CAACA,UAAU,CAACC,MAAM,GAAG,CAAC,CAAC;IAC5C;;IAEA;IACA;IACA;;IAEA,OAAO;MAEHC,eAAeA,CAACC,IAAI,EAAE;QAElB,IAAI,CAACA,IAAI,CAACC,KAAK,CAACH,MAAM,EAAE;UAEpB;AACpB;AACA;AACA;UACoB;QACJ;QAEA,MAAMI,UAAU,GAAGF,IAAI,CAACC,KAAK,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAK,IAAI,CAAC;QAExD,IAAI,CAACH,UAAU,EAAE;UAEb,IAAII,OAAO;UAEX,MAAMC,QAAQ,GAAGX,IAAI,CAACI,IAAI,CAACC,KAAK,CAAC;UACjC,MAAMO,QAAQ,GAAGb,UAAU,CAACc,gBAAgB,CAACF,QAAQ,CAAC;UAEtD,IAAIC,QAAQ,CAACV,MAAM,EAAE;YACjBQ,OAAO,GAAGV,IAAI,CAACY,QAAQ,CAAC;UAC5B;UAEA,IAAI,CAACF,OAAO,IAAI,CAACnB,cAAc,CAACkB,IAAI,CAACC,OAAO,CAACI,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE;YACxDnB,OAAO,CAACoB,MAAM,CAAC;cAAEZ,IAAI;cAAEa,SAAS,EAAE;YAAqB,CAAC,CAAC;UAC7D;QACJ;MACJ;IACJ,CAAC;EACL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}