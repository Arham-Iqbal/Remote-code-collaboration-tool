{"ast":null,"code":"/**\n * @fileoverview Rule to flag when using new Function\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst callMethods = new Set([\"apply\", \"bind\", \"call\"]);\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow `new` operators with the `Function` object\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/no-new-func\"\n    },\n    schema: [],\n    messages: {\n      noFunctionConstructor: \"The Function constructor is eval.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.sourceCode;\n    return {\n      \"Program:exit\"(node) {\n        const globalScope = sourceCode.getScope(node);\n        const variable = globalScope.set.get(\"Function\");\n        if (variable && variable.defs.length === 0) {\n          variable.references.forEach(ref => {\n            const idNode = ref.identifier;\n            const {\n              parent\n            } = idNode;\n            let evalNode;\n            if (parent) {\n              if (idNode === parent.callee && (parent.type === \"NewExpression\" || parent.type === \"CallExpression\")) {\n                evalNode = parent;\n              } else if (parent.type === \"MemberExpression\" && idNode === parent.object && callMethods.has(astUtils.getStaticPropertyName(parent))) {\n                const maybeCallee = parent.parent.type === \"ChainExpression\" ? parent.parent : parent;\n                if (maybeCallee.parent.type === \"CallExpression\" && maybeCallee.parent.callee === maybeCallee) {\n                  evalNode = maybeCallee.parent;\n                }\n              }\n            }\n            if (evalNode) {\n              context.report({\n                node: evalNode,\n                messageId: \"noFunctionConstructor\"\n              });\n            }\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","callMethods","Set","module","exports","meta","type","docs","description","recommended","url","schema","messages","noFunctionConstructor","create","context","sourceCode","Program:exit","node","globalScope","getScope","variable","set","get","defs","length","references","forEach","ref","idNode","identifier","parent","evalNode","callee","object","has","getStaticPropertyName","maybeCallee","report","messageId"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-new-func.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag when using new Function\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst callMethods = new Set([\"apply\", \"bind\", \"call\"]);\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow `new` operators with the `Function` object\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-new-func\"\n        },\n\n        schema: [],\n\n        messages: {\n            noFunctionConstructor: \"The Function constructor is eval.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.sourceCode;\n\n        return {\n            \"Program:exit\"(node) {\n                const globalScope = sourceCode.getScope(node);\n                const variable = globalScope.set.get(\"Function\");\n\n                if (variable && variable.defs.length === 0) {\n                    variable.references.forEach(ref => {\n                        const idNode = ref.identifier;\n                        const { parent } = idNode;\n                        let evalNode;\n\n                        if (parent) {\n                            if (idNode === parent.callee && (\n                                parent.type === \"NewExpression\" ||\n                                parent.type === \"CallExpression\"\n                            )) {\n                                evalNode = parent;\n                            } else if (\n                                parent.type === \"MemberExpression\" &&\n                                idNode === parent.object &&\n                                callMethods.has(astUtils.getStaticPropertyName(parent))\n                            ) {\n                                const maybeCallee = parent.parent.type === \"ChainExpression\" ? parent.parent : parent;\n\n                                if (maybeCallee.parent.type === \"CallExpression\" && maybeCallee.parent.callee === maybeCallee) {\n                                    evalNode = maybeCallee.parent;\n                                }\n                            }\n                        }\n\n                        if (evalNode) {\n                            context.report({\n                                node: evalNode,\n                                messageId: \"noFunctionConstructor\"\n                            });\n                        }\n                    });\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;;AAEA,MAAMC,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;;AAEtD;AACA;AACA;;AAEA;AACAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,qDAAqD;MAClEC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,qBAAqB,EAAE;IAC3B;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACC,UAAU;IAErC,OAAO;MACH,cAAcC,CAACC,IAAI,EAAE;QACjB,MAAMC,WAAW,GAAGH,UAAU,CAACI,QAAQ,CAACF,IAAI,CAAC;QAC7C,MAAMG,QAAQ,GAAGF,WAAW,CAACG,GAAG,CAACC,GAAG,CAAC,UAAU,CAAC;QAEhD,IAAIF,QAAQ,IAAIA,QAAQ,CAACG,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;UACxCJ,QAAQ,CAACK,UAAU,CAACC,OAAO,CAACC,GAAG,IAAI;YAC/B,MAAMC,MAAM,GAAGD,GAAG,CAACE,UAAU;YAC7B,MAAM;cAAEC;YAAO,CAAC,GAAGF,MAAM;YACzB,IAAIG,QAAQ;YAEZ,IAAID,MAAM,EAAE;cACR,IAAIF,MAAM,KAAKE,MAAM,CAACE,MAAM,KACxBF,MAAM,CAACzB,IAAI,KAAK,eAAe,IAC/ByB,MAAM,CAACzB,IAAI,KAAK,gBAAgB,CACnC,EAAE;gBACC0B,QAAQ,GAAGD,MAAM;cACrB,CAAC,MAAM,IACHA,MAAM,CAACzB,IAAI,KAAK,kBAAkB,IAClCuB,MAAM,KAAKE,MAAM,CAACG,MAAM,IACxBjC,WAAW,CAACkC,GAAG,CAACpC,QAAQ,CAACqC,qBAAqB,CAACL,MAAM,CAAC,CAAC,EACzD;gBACE,MAAMM,WAAW,GAAGN,MAAM,CAACA,MAAM,CAACzB,IAAI,KAAK,iBAAiB,GAAGyB,MAAM,CAACA,MAAM,GAAGA,MAAM;gBAErF,IAAIM,WAAW,CAACN,MAAM,CAACzB,IAAI,KAAK,gBAAgB,IAAI+B,WAAW,CAACN,MAAM,CAACE,MAAM,KAAKI,WAAW,EAAE;kBAC3FL,QAAQ,GAAGK,WAAW,CAACN,MAAM;gBACjC;cACJ;YACJ;YAEA,IAAIC,QAAQ,EAAE;cACVjB,OAAO,CAACuB,MAAM,CAAC;gBACXpB,IAAI,EAAEc,QAAQ;gBACdO,SAAS,EAAE;cACf,CAAC,CAAC;YACN;UACJ,CAAC,CAAC;QACN;MACJ;IACJ,CAAC;EAEL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}