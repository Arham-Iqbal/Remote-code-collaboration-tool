{"ast":null,"code":"/**\n * @fileoverview Disallow shadowing of NaN, undefined, and Infinity (ES5 section 15.1.1)\n * @author Michael Ficarra\n */\n\"use strict\";\n\n/**\n * Determines if a variable safely shadows undefined.\n * This is the case when a variable named `undefined` is never assigned to a value (i.e. it always shares the same value\n * as the global).\n * @param {eslintScope.Variable} variable The variable to check\n * @returns {boolean} true if this variable safely shadows `undefined`\n */\nfunction safelyShadowsUndefined(variable) {\n  return variable.name === \"undefined\" && variable.references.every(ref => !ref.isWrite()) && variable.defs.every(def => def.node.type === \"VariableDeclarator\" && def.node.init === null);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow identifiers from shadowing restricted names\",\n      recommended: true,\n      url: \"https://eslint.org/docs/latest/rules/no-shadow-restricted-names\"\n    },\n    schema: [],\n    messages: {\n      shadowingRestrictedName: \"Shadowing of global property '{{name}}'.\"\n    }\n  },\n  create(context) {\n    const RESTRICTED = new Set([\"undefined\", \"NaN\", \"Infinity\", \"arguments\", \"eval\"]);\n    const sourceCode = context.sourceCode;\n    return {\n      \"VariableDeclaration, :function, CatchClause\"(node) {\n        for (const variable of sourceCode.getDeclaredVariables(node)) {\n          if (variable.defs.length > 0 && RESTRICTED.has(variable.name) && !safelyShadowsUndefined(variable)) {\n            context.report({\n              node: variable.defs[0].name,\n              messageId: \"shadowingRestrictedName\",\n              data: {\n                name: variable.name\n              }\n            });\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["safelyShadowsUndefined","variable","name","references","every","ref","isWrite","defs","def","node","type","init","module","exports","meta","docs","description","recommended","url","schema","messages","shadowingRestrictedName","create","context","RESTRICTED","Set","sourceCode","VariableDeclaration, :function, CatchClause","getDeclaredVariables","length","has","report","messageId","data"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-shadow-restricted-names.js"],"sourcesContent":["/**\n * @fileoverview Disallow shadowing of NaN, undefined, and Infinity (ES5 section 15.1.1)\n * @author Michael Ficarra\n */\n\"use strict\";\n\n/**\n * Determines if a variable safely shadows undefined.\n * This is the case when a variable named `undefined` is never assigned to a value (i.e. it always shares the same value\n * as the global).\n * @param {eslintScope.Variable} variable The variable to check\n * @returns {boolean} true if this variable safely shadows `undefined`\n */\nfunction safelyShadowsUndefined(variable) {\n    return variable.name === \"undefined\" &&\n        variable.references.every(ref => !ref.isWrite()) &&\n        variable.defs.every(def => def.node.type === \"VariableDeclarator\" && def.node.init === null);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow identifiers from shadowing restricted names\",\n            recommended: true,\n            url: \"https://eslint.org/docs/latest/rules/no-shadow-restricted-names\"\n        },\n\n        schema: [],\n\n        messages: {\n            shadowingRestrictedName: \"Shadowing of global property '{{name}}'.\"\n        }\n    },\n\n    create(context) {\n\n\n        const RESTRICTED = new Set([\"undefined\", \"NaN\", \"Infinity\", \"arguments\", \"eval\"]);\n        const sourceCode = context.sourceCode;\n\n        return {\n            \"VariableDeclaration, :function, CatchClause\"(node) {\n                for (const variable of sourceCode.getDeclaredVariables(node)) {\n                    if (variable.defs.length > 0 && RESTRICTED.has(variable.name) && !safelyShadowsUndefined(variable)) {\n                        context.report({\n                            node: variable.defs[0].name,\n                            messageId: \"shadowingRestrictedName\",\n                            data: {\n                                name: variable.name\n                            }\n                        });\n                    }\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,sBAAsBA,CAACC,QAAQ,EAAE;EACtC,OAAOA,QAAQ,CAACC,IAAI,KAAK,WAAW,IAChCD,QAAQ,CAACE,UAAU,CAACC,KAAK,CAACC,GAAG,IAAI,CAACA,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC,IAChDL,QAAQ,CAACM,IAAI,CAACH,KAAK,CAACI,GAAG,IAAIA,GAAG,CAACC,IAAI,CAACC,IAAI,KAAK,oBAAoB,IAAIF,GAAG,CAACC,IAAI,CAACE,IAAI,KAAK,IAAI,CAAC;AACpG;;AAEA;AACA;AACA;;AAEA;AACAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFJ,IAAI,EAAE,YAAY;IAElBK,IAAI,EAAE;MACFC,WAAW,EAAE,sDAAsD;MACnEC,WAAW,EAAE,IAAI;MACjBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,uBAAuB,EAAE;IAC7B;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAGZ,MAAMC,UAAU,GAAG,IAAIC,GAAG,CAAC,CAAC,WAAW,EAAE,KAAK,EAAE,UAAU,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;IACjF,MAAMC,UAAU,GAAGH,OAAO,CAACG,UAAU;IAErC,OAAO;MACH,6CAA6CC,CAAClB,IAAI,EAAE;QAChD,KAAK,MAAMR,QAAQ,IAAIyB,UAAU,CAACE,oBAAoB,CAACnB,IAAI,CAAC,EAAE;UAC1D,IAAIR,QAAQ,CAACM,IAAI,CAACsB,MAAM,GAAG,CAAC,IAAIL,UAAU,CAACM,GAAG,CAAC7B,QAAQ,CAACC,IAAI,CAAC,IAAI,CAACF,sBAAsB,CAACC,QAAQ,CAAC,EAAE;YAChGsB,OAAO,CAACQ,MAAM,CAAC;cACXtB,IAAI,EAAER,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CAACL,IAAI;cAC3B8B,SAAS,EAAE,yBAAyB;cACpCC,IAAI,EAAE;gBACF/B,IAAI,EAAED,QAAQ,CAACC;cACnB;YACJ,CAAC,CAAC;UACN;QACJ;MACJ;IACJ,CAAC;EAEL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}