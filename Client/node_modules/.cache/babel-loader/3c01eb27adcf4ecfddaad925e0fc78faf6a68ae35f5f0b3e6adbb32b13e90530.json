{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of an empty block statement\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    hasSuggestions: true,\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow empty block statements\",\n      recommended: true,\n      url: \"https://eslint.org/docs/latest/rules/no-empty\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allowEmptyCatch: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpected: \"Empty {{type}} statement.\",\n      suggestComment: \"Add comment inside empty {{type}} statement.\"\n    }\n  },\n  create(context) {\n    const options = context.options[0] || {},\n      allowEmptyCatch = options.allowEmptyCatch || false;\n    const sourceCode = context.sourceCode;\n    return {\n      BlockStatement(node) {\n        // if the body is not empty, we can just return immediately\n        if (node.body.length !== 0) {\n          return;\n        }\n\n        // a function is generally allowed to be empty\n        if (astUtils.isFunction(node.parent)) {\n          return;\n        }\n        if (allowEmptyCatch && node.parent.type === \"CatchClause\") {\n          return;\n        }\n\n        // any other block is only allowed to be empty, if it contains a comment\n        if (sourceCode.getCommentsInside(node).length > 0) {\n          return;\n        }\n        context.report({\n          node,\n          messageId: \"unexpected\",\n          data: {\n            type: \"block\"\n          },\n          suggest: [{\n            messageId: \"suggestComment\",\n            data: {\n              type: \"block\"\n            },\n            fix(fixer) {\n              const range = [node.range[0] + 1, node.range[1] - 1];\n              return fixer.replaceTextRange(range, \" /* empty */ \");\n            }\n          }]\n        });\n      },\n      SwitchStatement(node) {\n        if (typeof node.cases === \"undefined\" || node.cases.length === 0) {\n          context.report({\n            node,\n            messageId: \"unexpected\",\n            data: {\n              type: \"switch\"\n            }\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","hasSuggestions","type","docs","description","recommended","url","schema","properties","allowEmptyCatch","default","additionalProperties","messages","unexpected","suggestComment","create","context","options","sourceCode","BlockStatement","node","body","length","isFunction","parent","getCommentsInside","report","messageId","data","suggest","fix","fixer","range","replaceTextRange","SwitchStatement","cases"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-empty.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag use of an empty block statement\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        hasSuggestions: true,\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow empty block statements\",\n            recommended: true,\n            url: \"https://eslint.org/docs/latest/rules/no-empty\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allowEmptyCatch: {\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpected: \"Empty {{type}} statement.\",\n            suggestComment: \"Add comment inside empty {{type}} statement.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options[0] || {},\n            allowEmptyCatch = options.allowEmptyCatch || false;\n\n        const sourceCode = context.sourceCode;\n\n        return {\n            BlockStatement(node) {\n\n                // if the body is not empty, we can just return immediately\n                if (node.body.length !== 0) {\n                    return;\n                }\n\n                // a function is generally allowed to be empty\n                if (astUtils.isFunction(node.parent)) {\n                    return;\n                }\n\n                if (allowEmptyCatch && node.parent.type === \"CatchClause\") {\n                    return;\n                }\n\n                // any other block is only allowed to be empty, if it contains a comment\n                if (sourceCode.getCommentsInside(node).length > 0) {\n                    return;\n                }\n\n                context.report({\n                    node,\n                    messageId: \"unexpected\",\n                    data: { type: \"block\" },\n                    suggest: [\n                        {\n                            messageId: \"suggestComment\",\n                            data: { type: \"block\" },\n                            fix(fixer) {\n                                const range = [node.range[0] + 1, node.range[1] - 1];\n\n                                return fixer.replaceTextRange(range, \" /* empty */ \");\n                            }\n                        }\n                    ]\n                });\n            },\n\n            SwitchStatement(node) {\n\n                if (typeof node.cases === \"undefined\" || node.cases.length === 0) {\n                    context.report({ node, messageId: \"unexpected\", data: { type: \"switch\" } });\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;;AAEA;AACAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,cAAc,EAAE,IAAI;IACpBC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,iCAAiC;MAC9CC,WAAW,EAAE,IAAI;MACjBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,CACJ;MACIL,IAAI,EAAE,QAAQ;MACdM,UAAU,EAAE;QACRC,eAAe,EAAE;UACbP,IAAI,EAAE,SAAS;UACfQ,OAAO,EAAE;QACb;MACJ,CAAC;MACDC,oBAAoB,EAAE;IAC1B,CAAC,CACJ;IAEDC,QAAQ,EAAE;MACNC,UAAU,EAAE,2BAA2B;MACvCC,cAAc,EAAE;IACpB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,OAAO,GAAGD,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;MACpCR,eAAe,GAAGQ,OAAO,CAACR,eAAe,IAAI,KAAK;IAEtD,MAAMS,UAAU,GAAGF,OAAO,CAACE,UAAU;IAErC,OAAO;MACHC,cAAcA,CAACC,IAAI,EAAE;QAEjB;QACA,IAAIA,IAAI,CAACC,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;UACxB;QACJ;;QAEA;QACA,IAAI1B,QAAQ,CAAC2B,UAAU,CAACH,IAAI,CAACI,MAAM,CAAC,EAAE;UAClC;QACJ;QAEA,IAAIf,eAAe,IAAIW,IAAI,CAACI,MAAM,CAACtB,IAAI,KAAK,aAAa,EAAE;UACvD;QACJ;;QAEA;QACA,IAAIgB,UAAU,CAACO,iBAAiB,CAACL,IAAI,CAAC,CAACE,MAAM,GAAG,CAAC,EAAE;UAC/C;QACJ;QAEAN,OAAO,CAACU,MAAM,CAAC;UACXN,IAAI;UACJO,SAAS,EAAE,YAAY;UACvBC,IAAI,EAAE;YAAE1B,IAAI,EAAE;UAAQ,CAAC;UACvB2B,OAAO,EAAE,CACL;YACIF,SAAS,EAAE,gBAAgB;YAC3BC,IAAI,EAAE;cAAE1B,IAAI,EAAE;YAAQ,CAAC;YACvB4B,GAAGA,CAACC,KAAK,EAAE;cACP,MAAMC,KAAK,GAAG,CAACZ,IAAI,CAACY,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEZ,IAAI,CAACY,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;cAEpD,OAAOD,KAAK,CAACE,gBAAgB,CAACD,KAAK,EAAE,eAAe,CAAC;YACzD;UACJ,CAAC;QAET,CAAC,CAAC;MACN,CAAC;MAEDE,eAAeA,CAACd,IAAI,EAAE;QAElB,IAAI,OAAOA,IAAI,CAACe,KAAK,KAAK,WAAW,IAAIf,IAAI,CAACe,KAAK,CAACb,MAAM,KAAK,CAAC,EAAE;UAC9DN,OAAO,CAACU,MAAM,CAAC;YAAEN,IAAI;YAAEO,SAAS,EAAE,YAAY;YAAEC,IAAI,EAAE;cAAE1B,IAAI,EAAE;YAAS;UAAE,CAAC,CAAC;QAC/E;MACJ;IACJ,CAAC;EAEL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}