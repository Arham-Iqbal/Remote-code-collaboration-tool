{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of unary increment and decrement operators.\n * @author Ian Christian Myers\n * @author Brody McKee (github.com/mrmckeb)\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Determines whether the given node is the update node of a `ForStatement`.\n * @param {ASTNode} node The node to check.\n * @returns {boolean} `true` if the node is `ForStatement` update.\n */\nfunction isForStatementUpdate(node) {\n  const parent = node.parent;\n  return parent.type === \"ForStatement\" && parent.update === node;\n}\n\n/**\n * Determines whether the given node is considered to be a for loop \"afterthought\" by the logic of this rule.\n * In particular, it returns `true` if the given node is either:\n *   - The update node of a `ForStatement`: for (;; i++) {}\n *   - An operand of a sequence expression that is the update node: for (;; foo(), i++) {}\n *   - An operand of a sequence expression that is child of another sequence expression, etc.,\n *     up to the sequence expression that is the update node: for (;; foo(), (bar(), (baz(), i++))) {}\n * @param {ASTNode} node The node to check.\n * @returns {boolean} `true` if the node is a for loop afterthought.\n */\nfunction isForLoopAfterthought(node) {\n  const parent = node.parent;\n  if (parent.type === \"SequenceExpression\") {\n    return isForLoopAfterthought(parent);\n  }\n  return isForStatementUpdate(node);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow the unary operators `++` and `--`\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/no-plusplus\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allowForLoopAfterthoughts: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpectedUnaryOp: \"Unary operator '{{operator}}' used.\"\n    }\n  },\n  create(context) {\n    const config = context.options[0];\n    let allowForLoopAfterthoughts = false;\n    if (typeof config === \"object\") {\n      allowForLoopAfterthoughts = config.allowForLoopAfterthoughts === true;\n    }\n    return {\n      UpdateExpression(node) {\n        if (allowForLoopAfterthoughts && isForLoopAfterthought(node)) {\n          return;\n        }\n        context.report({\n          node,\n          messageId: \"unexpectedUnaryOp\",\n          data: {\n            operator: node.operator\n          }\n        });\n      }\n    };\n  }\n};","map":{"version":3,"names":["isForStatementUpdate","node","parent","type","update","isForLoopAfterthought","module","exports","meta","docs","description","recommended","url","schema","properties","allowForLoopAfterthoughts","default","additionalProperties","messages","unexpectedUnaryOp","create","context","config","options","UpdateExpression","report","messageId","data","operator"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-plusplus.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag use of unary increment and decrement operators.\n * @author Ian Christian Myers\n * @author Brody McKee (github.com/mrmckeb)\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Determines whether the given node is the update node of a `ForStatement`.\n * @param {ASTNode} node The node to check.\n * @returns {boolean} `true` if the node is `ForStatement` update.\n */\nfunction isForStatementUpdate(node) {\n    const parent = node.parent;\n\n    return parent.type === \"ForStatement\" && parent.update === node;\n}\n\n/**\n * Determines whether the given node is considered to be a for loop \"afterthought\" by the logic of this rule.\n * In particular, it returns `true` if the given node is either:\n *   - The update node of a `ForStatement`: for (;; i++) {}\n *   - An operand of a sequence expression that is the update node: for (;; foo(), i++) {}\n *   - An operand of a sequence expression that is child of another sequence expression, etc.,\n *     up to the sequence expression that is the update node: for (;; foo(), (bar(), (baz(), i++))) {}\n * @param {ASTNode} node The node to check.\n * @returns {boolean} `true` if the node is a for loop afterthought.\n */\nfunction isForLoopAfterthought(node) {\n    const parent = node.parent;\n\n    if (parent.type === \"SequenceExpression\") {\n        return isForLoopAfterthought(parent);\n    }\n\n    return isForStatementUpdate(node);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow the unary operators `++` and `--`\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-plusplus\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allowForLoopAfterthoughts: {\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpectedUnaryOp: \"Unary operator '{{operator}}' used.\"\n        }\n    },\n\n    create(context) {\n\n        const config = context.options[0];\n        let allowForLoopAfterthoughts = false;\n\n        if (typeof config === \"object\") {\n            allowForLoopAfterthoughts = config.allowForLoopAfterthoughts === true;\n        }\n\n        return {\n\n            UpdateExpression(node) {\n                if (allowForLoopAfterthoughts && isForLoopAfterthought(node)) {\n                    return;\n                }\n\n                context.report({\n                    node,\n                    messageId: \"unexpectedUnaryOp\",\n                    data: {\n                        operator: node.operator\n                    }\n                });\n            }\n\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASA,oBAAoBA,CAACC,IAAI,EAAE;EAChC,MAAMC,MAAM,GAAGD,IAAI,CAACC,MAAM;EAE1B,OAAOA,MAAM,CAACC,IAAI,KAAK,cAAc,IAAID,MAAM,CAACE,MAAM,KAAKH,IAAI;AACnE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,qBAAqBA,CAACJ,IAAI,EAAE;EACjC,MAAMC,MAAM,GAAGD,IAAI,CAACC,MAAM;EAE1B,IAAIA,MAAM,CAACC,IAAI,KAAK,oBAAoB,EAAE;IACtC,OAAOE,qBAAqB,CAACH,MAAM,CAAC;EACxC;EAEA,OAAOF,oBAAoB,CAACC,IAAI,CAAC;AACrC;;AAEA;AACA;AACA;;AAEA;AACAK,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFL,IAAI,EAAE,YAAY;IAElBM,IAAI,EAAE;MACFC,WAAW,EAAE,4CAA4C;MACzDC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,CACJ;MACIV,IAAI,EAAE,QAAQ;MACdW,UAAU,EAAE;QACRC,yBAAyB,EAAE;UACvBZ,IAAI,EAAE,SAAS;UACfa,OAAO,EAAE;QACb;MACJ,CAAC;MACDC,oBAAoB,EAAE;IAC1B,CAAC,CACJ;IAEDC,QAAQ,EAAE;MACNC,iBAAiB,EAAE;IACvB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ,MAAMC,MAAM,GAAGD,OAAO,CAACE,OAAO,CAAC,CAAC,CAAC;IACjC,IAAIR,yBAAyB,GAAG,KAAK;IAErC,IAAI,OAAOO,MAAM,KAAK,QAAQ,EAAE;MAC5BP,yBAAyB,GAAGO,MAAM,CAACP,yBAAyB,KAAK,IAAI;IACzE;IAEA,OAAO;MAEHS,gBAAgBA,CAACvB,IAAI,EAAE;QACnB,IAAIc,yBAAyB,IAAIV,qBAAqB,CAACJ,IAAI,CAAC,EAAE;UAC1D;QACJ;QAEAoB,OAAO,CAACI,MAAM,CAAC;UACXxB,IAAI;UACJyB,SAAS,EAAE,mBAAmB;UAC9BC,IAAI,EAAE;YACFC,QAAQ,EAAE3B,IAAI,CAAC2B;UACnB;QACJ,CAAC,CAAC;MACN;IAEJ,CAAC;EAEL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}