{"ast":null,"code":"/**\n * @fileoverview Rule to enforce the position of line comments\n * @author Alberto Rodríguez\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"Enforce position of line comments\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/line-comment-position\"\n    },\n    schema: [{\n      oneOf: [{\n        enum: [\"above\", \"beside\"]\n      }, {\n        type: \"object\",\n        properties: {\n          position: {\n            enum: [\"above\", \"beside\"]\n          },\n          ignorePattern: {\n            type: \"string\"\n          },\n          applyDefaultPatterns: {\n            type: \"boolean\"\n          },\n          applyDefaultIgnorePatterns: {\n            type: \"boolean\"\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      above: \"Expected comment to be above code.\",\n      beside: \"Expected comment to be beside code.\"\n    }\n  },\n  create(context) {\n    const options = context.options[0];\n    let above,\n      ignorePattern,\n      applyDefaultIgnorePatterns = true;\n    if (!options || typeof options === \"string\") {\n      above = !options || options === \"above\";\n    } else {\n      above = !options.position || options.position === \"above\";\n      ignorePattern = options.ignorePattern;\n      if (Object.prototype.hasOwnProperty.call(options, \"applyDefaultIgnorePatterns\")) {\n        applyDefaultIgnorePatterns = options.applyDefaultIgnorePatterns;\n      } else {\n        applyDefaultIgnorePatterns = options.applyDefaultPatterns !== false;\n      }\n    }\n    const defaultIgnoreRegExp = astUtils.COMMENTS_IGNORE_PATTERN;\n    const fallThroughRegExp = /^\\s*falls?\\s?through/u;\n    const customIgnoreRegExp = new RegExp(ignorePattern, \"u\");\n    const sourceCode = context.sourceCode;\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n      Program() {\n        const comments = sourceCode.getAllComments();\n        comments.filter(token => token.type === \"Line\").forEach(node => {\n          if (applyDefaultIgnorePatterns && (defaultIgnoreRegExp.test(node.value) || fallThroughRegExp.test(node.value))) {\n            return;\n          }\n          if (ignorePattern && customIgnoreRegExp.test(node.value)) {\n            return;\n          }\n          const previous = sourceCode.getTokenBefore(node, {\n            includeComments: true\n          });\n          const isOnSameLine = previous && previous.loc.end.line === node.loc.start.line;\n          if (above) {\n            if (isOnSameLine) {\n              context.report({\n                node,\n                messageId: \"above\"\n              });\n            }\n          } else {\n            if (!isOnSameLine) {\n              context.report({\n                node,\n                messageId: \"beside\"\n              });\n            }\n          }\n        });\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","oneOf","enum","properties","position","ignorePattern","applyDefaultPatterns","applyDefaultIgnorePatterns","additionalProperties","messages","above","beside","create","context","options","Object","prototype","hasOwnProperty","call","defaultIgnoreRegExp","COMMENTS_IGNORE_PATTERN","fallThroughRegExp","customIgnoreRegExp","RegExp","sourceCode","Program","comments","getAllComments","filter","token","forEach","node","test","value","previous","getTokenBefore","includeComments","isOnSameLine","loc","end","line","start","report","messageId"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/line-comment-position.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce the position of line comments\n * @author Alberto Rodríguez\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"Enforce position of line comments\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/line-comment-position\"\n        },\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        enum: [\"above\", \"beside\"]\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            position: {\n                                enum: [\"above\", \"beside\"]\n                            },\n                            ignorePattern: {\n                                type: \"string\"\n                            },\n                            applyDefaultPatterns: {\n                                type: \"boolean\"\n                            },\n                            applyDefaultIgnorePatterns: {\n                                type: \"boolean\"\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ],\n        messages: {\n            above: \"Expected comment to be above code.\",\n            beside: \"Expected comment to be beside code.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options[0];\n\n        let above,\n            ignorePattern,\n            applyDefaultIgnorePatterns = true;\n\n        if (!options || typeof options === \"string\") {\n            above = !options || options === \"above\";\n\n        } else {\n            above = !options.position || options.position === \"above\";\n            ignorePattern = options.ignorePattern;\n\n            if (Object.prototype.hasOwnProperty.call(options, \"applyDefaultIgnorePatterns\")) {\n                applyDefaultIgnorePatterns = options.applyDefaultIgnorePatterns;\n            } else {\n                applyDefaultIgnorePatterns = options.applyDefaultPatterns !== false;\n            }\n        }\n\n        const defaultIgnoreRegExp = astUtils.COMMENTS_IGNORE_PATTERN;\n        const fallThroughRegExp = /^\\s*falls?\\s?through/u;\n        const customIgnoreRegExp = new RegExp(ignorePattern, \"u\");\n        const sourceCode = context.sourceCode;\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            Program() {\n                const comments = sourceCode.getAllComments();\n\n                comments.filter(token => token.type === \"Line\").forEach(node => {\n                    if (applyDefaultIgnorePatterns && (defaultIgnoreRegExp.test(node.value) || fallThroughRegExp.test(node.value))) {\n                        return;\n                    }\n\n                    if (ignorePattern && customIgnoreRegExp.test(node.value)) {\n                        return;\n                    }\n\n                    const previous = sourceCode.getTokenBefore(node, { includeComments: true });\n                    const isOnSameLine = previous && previous.loc.end.line === node.loc.start.line;\n\n                    if (above) {\n                        if (isOnSameLine) {\n                            context.report({\n                                node,\n                                messageId: \"above\"\n                            });\n                        }\n                    } else {\n                        if (!isOnSameLine) {\n                            context.report({\n                                node,\n                                messageId: \"beside\"\n                            });\n                        }\n                    }\n                });\n            }\n        };\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}