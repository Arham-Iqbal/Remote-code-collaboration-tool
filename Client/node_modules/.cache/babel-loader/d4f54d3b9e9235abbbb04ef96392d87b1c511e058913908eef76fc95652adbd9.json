{"ast":null,"code":"/**\n * @fileoverview Rule to flag when regex literals are not wrapped in parens\n * @author Matt DuVall <http://www.mattduvall.com>\n * @deprecated in ESLint v8.53.0\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    deprecated: true,\n    replacedBy: [],\n    type: \"layout\",\n    docs: {\n      description: \"Require parenthesis around regex literals\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/wrap-regex\"\n    },\n    schema: [],\n    fixable: \"code\",\n    messages: {\n      requireParens: \"Wrap the regexp literal in parens to disambiguate the slash.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.sourceCode;\n    return {\n      Literal(node) {\n        const token = sourceCode.getFirstToken(node),\n          nodeType = token.type;\n        if (nodeType === \"RegularExpression\") {\n          const beforeToken = sourceCode.getTokenBefore(node);\n          const afterToken = sourceCode.getTokenAfter(node);\n          const {\n            parent\n          } = node;\n          if (parent.type === \"MemberExpression\" && parent.object === node && !(beforeToken && beforeToken.value === \"(\" && afterToken && afterToken.value === \")\")) {\n            context.report({\n              node,\n              messageId: \"requireParens\",\n              fix: fixer => fixer.replaceText(node, `(${sourceCode.getText(node)})`)\n            });\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","deprecated","replacedBy","type","docs","description","recommended","url","schema","fixable","messages","requireParens","create","context","sourceCode","Literal","node","token","getFirstToken","nodeType","beforeToken","getTokenBefore","afterToken","getTokenAfter","parent","object","value","report","messageId","fix","fixer","replaceText","getText"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/wrap-regex.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag when regex literals are not wrapped in parens\n * @author Matt DuVall <http://www.mattduvall.com>\n * @deprecated in ESLint v8.53.0\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        deprecated: true,\n        replacedBy: [],\n        type: \"layout\",\n\n        docs: {\n            description: \"Require parenthesis around regex literals\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/wrap-regex\"\n        },\n\n        schema: [],\n        fixable: \"code\",\n\n        messages: {\n            requireParens: \"Wrap the regexp literal in parens to disambiguate the slash.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.sourceCode;\n\n        return {\n\n            Literal(node) {\n                const token = sourceCode.getFirstToken(node),\n                    nodeType = token.type;\n\n                if (nodeType === \"RegularExpression\") {\n                    const beforeToken = sourceCode.getTokenBefore(node);\n                    const afterToken = sourceCode.getTokenAfter(node);\n                    const { parent } = node;\n\n                    if (parent.type === \"MemberExpression\" && parent.object === node &&\n                        !(beforeToken && beforeToken.value === \"(\" && afterToken && afterToken.value === \")\")) {\n                        context.report({\n                            node,\n                            messageId: \"requireParens\",\n                            fix: fixer => fixer.replaceText(node, `(${sourceCode.getText(node)})`)\n                        });\n                    }\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;;AAEA;AACAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,UAAU,EAAE,IAAI;IAChBC,UAAU,EAAE,EAAE;IACdC,IAAI,EAAE,QAAQ;IAEdC,IAAI,EAAE;MACFC,WAAW,EAAE,2CAA2C;MACxDC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IACVC,OAAO,EAAE,MAAM;IAEfC,QAAQ,EAAE;MACNC,aAAa,EAAE;IACnB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACC,UAAU;IAErC,OAAO;MAEHC,OAAOA,CAACC,IAAI,EAAE;QACV,MAAMC,KAAK,GAAGH,UAAU,CAACI,aAAa,CAACF,IAAI,CAAC;UACxCG,QAAQ,GAAGF,KAAK,CAACd,IAAI;QAEzB,IAAIgB,QAAQ,KAAK,mBAAmB,EAAE;UAClC,MAAMC,WAAW,GAAGN,UAAU,CAACO,cAAc,CAACL,IAAI,CAAC;UACnD,MAAMM,UAAU,GAAGR,UAAU,CAACS,aAAa,CAACP,IAAI,CAAC;UACjD,MAAM;YAAEQ;UAAO,CAAC,GAAGR,IAAI;UAEvB,IAAIQ,MAAM,CAACrB,IAAI,KAAK,kBAAkB,IAAIqB,MAAM,CAACC,MAAM,KAAKT,IAAI,IAC5D,EAAEI,WAAW,IAAIA,WAAW,CAACM,KAAK,KAAK,GAAG,IAAIJ,UAAU,IAAIA,UAAU,CAACI,KAAK,KAAK,GAAG,CAAC,EAAE;YACvFb,OAAO,CAACc,MAAM,CAAC;cACXX,IAAI;cACJY,SAAS,EAAE,eAAe;cAC1BC,GAAG,EAAEC,KAAK,IAAIA,KAAK,CAACC,WAAW,CAACf,IAAI,EAAE,IAAIF,UAAU,CAACkB,OAAO,CAAChB,IAAI,CAAC,GAAG;YACzE,CAAC,CAAC;UACN;QACJ;MACJ;IACJ,CAAC;EAEL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}