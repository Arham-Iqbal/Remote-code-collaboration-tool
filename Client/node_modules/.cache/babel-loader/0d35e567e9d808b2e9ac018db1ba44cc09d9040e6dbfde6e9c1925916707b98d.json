{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of duplicate keys in an object.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst GET_KIND = /^(?:init|get)$/u;\nconst SET_KIND = /^(?:init|set)$/u;\n\n/**\n * The class which stores properties' information of an object.\n */\nclass ObjectInfo {\n  /**\n   * @param {ObjectInfo|null} upper The information of the outer object.\n   * @param {ASTNode} node The ObjectExpression node of this information.\n   */\n  constructor(upper, node) {\n    this.upper = upper;\n    this.node = node;\n    this.properties = new Map();\n  }\n\n  /**\n   * Gets the information of the given Property node.\n   * @param {ASTNode} node The Property node to get.\n   * @returns {{get: boolean, set: boolean}} The information of the property.\n   */\n  getPropertyInfo(node) {\n    const name = astUtils.getStaticPropertyName(node);\n    if (!this.properties.has(name)) {\n      this.properties.set(name, {\n        get: false,\n        set: false\n      });\n    }\n    return this.properties.get(name);\n  }\n\n  /**\n   * Checks whether the given property has been defined already or not.\n   * @param {ASTNode} node The Property node to check.\n   * @returns {boolean} `true` if the property has been defined.\n   */\n  isPropertyDefined(node) {\n    const entry = this.getPropertyInfo(node);\n    return GET_KIND.test(node.kind) && entry.get || SET_KIND.test(node.kind) && entry.set;\n  }\n\n  /**\n   * Defines the given property.\n   * @param {ASTNode} node The Property node to define.\n   * @returns {void}\n   */\n  defineProperty(node) {\n    const entry = this.getPropertyInfo(node);\n    if (GET_KIND.test(node.kind)) {\n      entry.get = true;\n    }\n    if (SET_KIND.test(node.kind)) {\n      entry.set = true;\n    }\n  }\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"Disallow duplicate keys in object literals\",\n      recommended: true,\n      url: \"https://eslint.org/docs/latest/rules/no-dupe-keys\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Duplicate key '{{name}}'.\"\n    }\n  },\n  create(context) {\n    let info = null;\n    return {\n      ObjectExpression(node) {\n        info = new ObjectInfo(info, node);\n      },\n      \"ObjectExpression:exit\"() {\n        info = info.upper;\n      },\n      Property(node) {\n        const name = astUtils.getStaticPropertyName(node);\n\n        // Skip destructuring.\n        if (node.parent.type !== \"ObjectExpression\") {\n          return;\n        }\n\n        // Skip if the name is not static.\n        if (name === null) {\n          return;\n        }\n\n        // Reports if the name is defined already.\n        if (info.isPropertyDefined(node)) {\n          context.report({\n            node: info.node,\n            loc: node.key.loc,\n            messageId: \"unexpected\",\n            data: {\n              name\n            }\n          });\n        }\n\n        // Update info.\n        info.defineProperty(node);\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","GET_KIND","SET_KIND","ObjectInfo","constructor","upper","node","properties","Map","getPropertyInfo","name","getStaticPropertyName","has","set","get","isPropertyDefined","entry","test","kind","defineProperty","module","exports","meta","type","docs","description","recommended","url","schema","messages","unexpected","create","context","info","ObjectExpression","ObjectExpression:exit","Property","parent","report","loc","key","messageId","data"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-dupe-keys.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag use of duplicate keys in an object.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst GET_KIND = /^(?:init|get)$/u;\nconst SET_KIND = /^(?:init|set)$/u;\n\n/**\n * The class which stores properties' information of an object.\n */\nclass ObjectInfo {\n\n    /**\n     * @param {ObjectInfo|null} upper The information of the outer object.\n     * @param {ASTNode} node The ObjectExpression node of this information.\n     */\n    constructor(upper, node) {\n        this.upper = upper;\n        this.node = node;\n        this.properties = new Map();\n    }\n\n    /**\n     * Gets the information of the given Property node.\n     * @param {ASTNode} node The Property node to get.\n     * @returns {{get: boolean, set: boolean}} The information of the property.\n     */\n    getPropertyInfo(node) {\n        const name = astUtils.getStaticPropertyName(node);\n\n        if (!this.properties.has(name)) {\n            this.properties.set(name, { get: false, set: false });\n        }\n        return this.properties.get(name);\n    }\n\n    /**\n     * Checks whether the given property has been defined already or not.\n     * @param {ASTNode} node The Property node to check.\n     * @returns {boolean} `true` if the property has been defined.\n     */\n    isPropertyDefined(node) {\n        const entry = this.getPropertyInfo(node);\n\n        return (\n            (GET_KIND.test(node.kind) && entry.get) ||\n            (SET_KIND.test(node.kind) && entry.set)\n        );\n    }\n\n    /**\n     * Defines the given property.\n     * @param {ASTNode} node The Property node to define.\n     * @returns {void}\n     */\n    defineProperty(node) {\n        const entry = this.getPropertyInfo(node);\n\n        if (GET_KIND.test(node.kind)) {\n            entry.get = true;\n        }\n        if (SET_KIND.test(node.kind)) {\n            entry.set = true;\n        }\n    }\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"Disallow duplicate keys in object literals\",\n            recommended: true,\n            url: \"https://eslint.org/docs/latest/rules/no-dupe-keys\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpected: \"Duplicate key '{{name}}'.\"\n        }\n    },\n\n    create(context) {\n        let info = null;\n\n        return {\n            ObjectExpression(node) {\n                info = new ObjectInfo(info, node);\n            },\n            \"ObjectExpression:exit\"() {\n                info = info.upper;\n            },\n\n            Property(node) {\n                const name = astUtils.getStaticPropertyName(node);\n\n                // Skip destructuring.\n                if (node.parent.type !== \"ObjectExpression\") {\n                    return;\n                }\n\n                // Skip if the name is not static.\n                if (name === null) {\n                    return;\n                }\n\n                // Reports if the name is defined already.\n                if (info.isPropertyDefined(node)) {\n                    context.report({\n                        node: info.node,\n                        loc: node.key.loc,\n                        messageId: \"unexpected\",\n                        data: { name }\n                    });\n                }\n\n                // Update info.\n                info.defineProperty(node);\n            }\n        };\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}