{"ast":null,"code":"/**\n * @fileoverview Prefers Object.hasOwn() instead of Object.prototype.hasOwnProperty.call()\n * @author Nitin Kumar\n * @author Gautam Arora\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks if the given node is considered to be an access to a property of `Object.prototype`.\n * @param {ASTNode} node `MemberExpression` node to evaluate.\n * @returns {boolean} `true` if `node.object` is `Object`, `Object.prototype`, or `{}` (empty 'ObjectExpression' node).\n */\nfunction hasLeftHandObject(node) {\n  /*\n   * ({}).hasOwnProperty.call(obj, prop) - `true`\n   * ({ foo }.hasOwnProperty.call(obj, prop)) - `false`, object literal should be empty\n   */\n  if (node.object.type === \"ObjectExpression\" && node.object.properties.length === 0) {\n    return true;\n  }\n  const objectNodeToCheck = node.object.type === \"MemberExpression\" && astUtils.getStaticPropertyName(node.object) === \"prototype\" ? node.object.object : node.object;\n  if (objectNodeToCheck.type === \"Identifier\" && objectNodeToCheck.name === \"Object\") {\n    return true;\n  }\n  return false;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow use of `Object.prototype.hasOwnProperty.call()` and prefer use of `Object.hasOwn()`\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/prefer-object-has-own\"\n    },\n    schema: [],\n    messages: {\n      useHasOwn: \"Use 'Object.hasOwn()' instead of 'Object.prototype.hasOwnProperty.call()'.\"\n    },\n    fixable: \"code\"\n  },\n  create(context) {\n    const sourceCode = context.sourceCode;\n    return {\n      CallExpression(node) {\n        if (!(node.callee.type === \"MemberExpression\" && node.callee.object.type === \"MemberExpression\")) {\n          return;\n        }\n        const calleePropertyName = astUtils.getStaticPropertyName(node.callee);\n        const objectPropertyName = astUtils.getStaticPropertyName(node.callee.object);\n        const isObject = hasLeftHandObject(node.callee.object);\n\n        // check `Object` scope\n        const scope = sourceCode.getScope(node);\n        const variable = astUtils.getVariableByName(scope, \"Object\");\n        if (calleePropertyName === \"call\" && objectPropertyName === \"hasOwnProperty\" && isObject && variable && variable.scope.type === \"global\") {\n          context.report({\n            node,\n            messageId: \"useHasOwn\",\n            fix(fixer) {\n              if (sourceCode.getCommentsInside(node.callee).length > 0) {\n                return null;\n              }\n              const tokenJustBeforeNode = sourceCode.getTokenBefore(node.callee, {\n                includeComments: true\n              });\n\n              // for https://github.com/eslint/eslint/pull/15346#issuecomment-991417335\n              if (tokenJustBeforeNode && tokenJustBeforeNode.range[1] === node.callee.range[0] && !astUtils.canTokensBeAdjacent(tokenJustBeforeNode, \"Object.hasOwn\")) {\n                return fixer.replaceText(node.callee, \" Object.hasOwn\");\n              }\n              return fixer.replaceText(node.callee, \"Object.hasOwn\");\n            }\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","hasLeftHandObject","node","object","type","properties","length","objectNodeToCheck","getStaticPropertyName","name","module","exports","meta","docs","description","recommended","url","schema","messages","useHasOwn","fixable","create","context","sourceCode","CallExpression","callee","calleePropertyName","objectPropertyName","isObject","scope","getScope","variable","getVariableByName","report","messageId","fix","fixer","getCommentsInside","tokenJustBeforeNode","getTokenBefore","includeComments","range","canTokensBeAdjacent","replaceText"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/prefer-object-has-own.js"],"sourcesContent":["/**\n * @fileoverview Prefers Object.hasOwn() instead of Object.prototype.hasOwnProperty.call()\n * @author Nitin Kumar\n * @author Gautam Arora\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks if the given node is considered to be an access to a property of `Object.prototype`.\n * @param {ASTNode} node `MemberExpression` node to evaluate.\n * @returns {boolean} `true` if `node.object` is `Object`, `Object.prototype`, or `{}` (empty 'ObjectExpression' node).\n */\nfunction hasLeftHandObject(node) {\n\n    /*\n     * ({}).hasOwnProperty.call(obj, prop) - `true`\n     * ({ foo }.hasOwnProperty.call(obj, prop)) - `false`, object literal should be empty\n     */\n    if (node.object.type === \"ObjectExpression\" && node.object.properties.length === 0) {\n        return true;\n    }\n\n    const objectNodeToCheck = node.object.type === \"MemberExpression\" && astUtils.getStaticPropertyName(node.object) === \"prototype\" ? node.object.object : node.object;\n\n    if (objectNodeToCheck.type === \"Identifier\" && objectNodeToCheck.name === \"Object\") {\n        return true;\n    }\n\n    return false;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n        docs: {\n            description:\n                \"Disallow use of `Object.prototype.hasOwnProperty.call()` and prefer use of `Object.hasOwn()`\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/prefer-object-has-own\"\n        },\n        schema: [],\n        messages: {\n            useHasOwn: \"Use 'Object.hasOwn()' instead of 'Object.prototype.hasOwnProperty.call()'.\"\n        },\n        fixable: \"code\"\n    },\n    create(context) {\n\n        const sourceCode = context.sourceCode;\n\n        return {\n            CallExpression(node) {\n                if (!(node.callee.type === \"MemberExpression\" && node.callee.object.type === \"MemberExpression\")) {\n                    return;\n                }\n\n                const calleePropertyName = astUtils.getStaticPropertyName(node.callee);\n                const objectPropertyName = astUtils.getStaticPropertyName(node.callee.object);\n                const isObject = hasLeftHandObject(node.callee.object);\n\n                // check `Object` scope\n                const scope = sourceCode.getScope(node);\n                const variable = astUtils.getVariableByName(scope, \"Object\");\n\n                if (\n                    calleePropertyName === \"call\" &&\n                    objectPropertyName === \"hasOwnProperty\" &&\n                    isObject &&\n                    variable && variable.scope.type === \"global\"\n                ) {\n                    context.report({\n                        node,\n                        messageId: \"useHasOwn\",\n                        fix(fixer) {\n\n                            if (sourceCode.getCommentsInside(node.callee).length > 0) {\n                                return null;\n                            }\n\n                            const tokenJustBeforeNode = sourceCode.getTokenBefore(node.callee, { includeComments: true });\n\n                            // for https://github.com/eslint/eslint/pull/15346#issuecomment-991417335\n                            if (\n                                tokenJustBeforeNode &&\n                                tokenJustBeforeNode.range[1] === node.callee.range[0] &&\n                                !astUtils.canTokensBeAdjacent(tokenJustBeforeNode, \"Object.hasOwn\")\n                            ) {\n                                return fixer.replaceText(node.callee, \" Object.hasOwn\");\n                            }\n\n                            return fixer.replaceText(node.callee, \"Object.hasOwn\");\n                        }\n                    });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}