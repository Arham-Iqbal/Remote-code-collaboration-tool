{"ast":null,"code":"/**\n * @fileoverview Rule to disallow unsafe optional chaining\n * @author Yeon JuAn\n */\n\n\"use strict\";\n\nconst UNSAFE_ARITHMETIC_OPERATORS = new Set([\"+\", \"-\", \"/\", \"*\", \"%\", \"**\"]);\nconst UNSAFE_ASSIGNMENT_OPERATORS = new Set([\"+=\", \"-=\", \"/=\", \"*=\", \"%=\", \"**=\"]);\nconst UNSAFE_RELATIONAL_OPERATORS = new Set([\"in\", \"instanceof\"]);\n\n/**\n * Checks whether a node is a destructuring pattern or not\n * @param {ASTNode} node node to check\n * @returns {boolean} `true` if a node is a destructuring pattern, otherwise `false`\n */\nfunction isDestructuringPattern(node) {\n  return node.type === \"ObjectPattern\" || node.type === \"ArrayPattern\";\n}\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"Disallow use of optional chaining in contexts where the `undefined` value is not allowed\",\n      recommended: true,\n      url: \"https://eslint.org/docs/latest/rules/no-unsafe-optional-chaining\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        disallowArithmeticOperators: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    fixable: null,\n    messages: {\n      unsafeOptionalChain: \"Unsafe usage of optional chaining. If it short-circuits with 'undefined' the evaluation will throw TypeError.\",\n      unsafeArithmetic: \"Unsafe arithmetic operation on optional chaining. It can result in NaN.\"\n    }\n  },\n  create(context) {\n    const options = context.options[0] || {};\n    const disallowArithmeticOperators = options.disallowArithmeticOperators || false;\n\n    /**\n     * Reports unsafe usage of optional chaining\n     * @param {ASTNode} node node to report\n     * @returns {void}\n     */\n    function reportUnsafeUsage(node) {\n      context.report({\n        messageId: \"unsafeOptionalChain\",\n        node\n      });\n    }\n\n    /**\n     * Reports unsafe arithmetic operation on optional chaining\n     * @param {ASTNode} node node to report\n     * @returns {void}\n     */\n    function reportUnsafeArithmetic(node) {\n      context.report({\n        messageId: \"unsafeArithmetic\",\n        node\n      });\n    }\n\n    /**\n     * Checks and reports if a node can short-circuit with `undefined` by optional chaining.\n     * @param {ASTNode} [node] node to check\n     * @param {Function} reportFunc report function\n     * @returns {void}\n     */\n    function checkUndefinedShortCircuit(node, reportFunc) {\n      if (!node) {\n        return;\n      }\n      switch (node.type) {\n        case \"LogicalExpression\":\n          if (node.operator === \"||\" || node.operator === \"??\") {\n            checkUndefinedShortCircuit(node.right, reportFunc);\n          } else if (node.operator === \"&&\") {\n            checkUndefinedShortCircuit(node.left, reportFunc);\n            checkUndefinedShortCircuit(node.right, reportFunc);\n          }\n          break;\n        case \"SequenceExpression\":\n          checkUndefinedShortCircuit(node.expressions[node.expressions.length - 1], reportFunc);\n          break;\n        case \"ConditionalExpression\":\n          checkUndefinedShortCircuit(node.consequent, reportFunc);\n          checkUndefinedShortCircuit(node.alternate, reportFunc);\n          break;\n        case \"AwaitExpression\":\n          checkUndefinedShortCircuit(node.argument, reportFunc);\n          break;\n        case \"ChainExpression\":\n          reportFunc(node);\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\n     * Checks unsafe usage of optional chaining\n     * @param {ASTNode} node node to check\n     * @returns {void}\n     */\n    function checkUnsafeUsage(node) {\n      checkUndefinedShortCircuit(node, reportUnsafeUsage);\n    }\n\n    /**\n     * Checks unsafe arithmetic operations on optional chaining\n     * @param {ASTNode} node node to check\n     * @returns {void}\n     */\n    function checkUnsafeArithmetic(node) {\n      checkUndefinedShortCircuit(node, reportUnsafeArithmetic);\n    }\n    return {\n      \"AssignmentExpression, AssignmentPattern\"(node) {\n        if (isDestructuringPattern(node.left)) {\n          checkUnsafeUsage(node.right);\n        }\n      },\n      \"ClassDeclaration, ClassExpression\"(node) {\n        checkUnsafeUsage(node.superClass);\n      },\n      CallExpression(node) {\n        if (!node.optional) {\n          checkUnsafeUsage(node.callee);\n        }\n      },\n      NewExpression(node) {\n        checkUnsafeUsage(node.callee);\n      },\n      VariableDeclarator(node) {\n        if (isDestructuringPattern(node.id)) {\n          checkUnsafeUsage(node.init);\n        }\n      },\n      MemberExpression(node) {\n        if (!node.optional) {\n          checkUnsafeUsage(node.object);\n        }\n      },\n      TaggedTemplateExpression(node) {\n        checkUnsafeUsage(node.tag);\n      },\n      ForOfStatement(node) {\n        checkUnsafeUsage(node.right);\n      },\n      SpreadElement(node) {\n        if (node.parent && node.parent.type !== \"ObjectExpression\") {\n          checkUnsafeUsage(node.argument);\n        }\n      },\n      BinaryExpression(node) {\n        if (UNSAFE_RELATIONAL_OPERATORS.has(node.operator)) {\n          checkUnsafeUsage(node.right);\n        }\n        if (disallowArithmeticOperators && UNSAFE_ARITHMETIC_OPERATORS.has(node.operator)) {\n          checkUnsafeArithmetic(node.right);\n          checkUnsafeArithmetic(node.left);\n        }\n      },\n      WithStatement(node) {\n        checkUnsafeUsage(node.object);\n      },\n      UnaryExpression(node) {\n        if (disallowArithmeticOperators && UNSAFE_ARITHMETIC_OPERATORS.has(node.operator)) {\n          checkUnsafeArithmetic(node.argument);\n        }\n      },\n      AssignmentExpression(node) {\n        if (disallowArithmeticOperators && UNSAFE_ASSIGNMENT_OPERATORS.has(node.operator)) {\n          checkUnsafeArithmetic(node.right);\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["UNSAFE_ARITHMETIC_OPERATORS","Set","UNSAFE_ASSIGNMENT_OPERATORS","UNSAFE_RELATIONAL_OPERATORS","isDestructuringPattern","node","type","module","exports","meta","docs","description","recommended","url","schema","properties","disallowArithmeticOperators","default","additionalProperties","fixable","messages","unsafeOptionalChain","unsafeArithmetic","create","context","options","reportUnsafeUsage","report","messageId","reportUnsafeArithmetic","checkUndefinedShortCircuit","reportFunc","operator","right","left","expressions","length","consequent","alternate","argument","checkUnsafeUsage","checkUnsafeArithmetic","AssignmentExpression, AssignmentPattern","ClassDeclaration, ClassExpression","superClass","CallExpression","optional","callee","NewExpression","VariableDeclarator","id","init","MemberExpression","object","TaggedTemplateExpression","tag","ForOfStatement","SpreadElement","parent","BinaryExpression","has","WithStatement","UnaryExpression","AssignmentExpression"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-unsafe-optional-chaining.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow unsafe optional chaining\n * @author Yeon JuAn\n */\n\n\"use strict\";\n\nconst UNSAFE_ARITHMETIC_OPERATORS = new Set([\"+\", \"-\", \"/\", \"*\", \"%\", \"**\"]);\nconst UNSAFE_ASSIGNMENT_OPERATORS = new Set([\"+=\", \"-=\", \"/=\", \"*=\", \"%=\", \"**=\"]);\nconst UNSAFE_RELATIONAL_OPERATORS = new Set([\"in\", \"instanceof\"]);\n\n/**\n * Checks whether a node is a destructuring pattern or not\n * @param {ASTNode} node node to check\n * @returns {boolean} `true` if a node is a destructuring pattern, otherwise `false`\n */\nfunction isDestructuringPattern(node) {\n    return node.type === \"ObjectPattern\" || node.type === \"ArrayPattern\";\n}\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"Disallow use of optional chaining in contexts where the `undefined` value is not allowed\",\n            recommended: true,\n            url: \"https://eslint.org/docs/latest/rules/no-unsafe-optional-chaining\"\n        },\n        schema: [{\n            type: \"object\",\n            properties: {\n                disallowArithmeticOperators: {\n                    type: \"boolean\",\n                    default: false\n                }\n            },\n            additionalProperties: false\n        }],\n        fixable: null,\n        messages: {\n            unsafeOptionalChain: \"Unsafe usage of optional chaining. If it short-circuits with 'undefined' the evaluation will throw TypeError.\",\n            unsafeArithmetic: \"Unsafe arithmetic operation on optional chaining. It can result in NaN.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options[0] || {};\n        const disallowArithmeticOperators = (options.disallowArithmeticOperators) || false;\n\n        /**\n         * Reports unsafe usage of optional chaining\n         * @param {ASTNode} node node to report\n         * @returns {void}\n         */\n        function reportUnsafeUsage(node) {\n            context.report({\n                messageId: \"unsafeOptionalChain\",\n                node\n            });\n        }\n\n        /**\n         * Reports unsafe arithmetic operation on optional chaining\n         * @param {ASTNode} node node to report\n         * @returns {void}\n         */\n        function reportUnsafeArithmetic(node) {\n            context.report({\n                messageId: \"unsafeArithmetic\",\n                node\n            });\n        }\n\n        /**\n         * Checks and reports if a node can short-circuit with `undefined` by optional chaining.\n         * @param {ASTNode} [node] node to check\n         * @param {Function} reportFunc report function\n         * @returns {void}\n         */\n        function checkUndefinedShortCircuit(node, reportFunc) {\n            if (!node) {\n                return;\n            }\n            switch (node.type) {\n                case \"LogicalExpression\":\n                    if (node.operator === \"||\" || node.operator === \"??\") {\n                        checkUndefinedShortCircuit(node.right, reportFunc);\n                    } else if (node.operator === \"&&\") {\n                        checkUndefinedShortCircuit(node.left, reportFunc);\n                        checkUndefinedShortCircuit(node.right, reportFunc);\n                    }\n                    break;\n                case \"SequenceExpression\":\n                    checkUndefinedShortCircuit(\n                        node.expressions[node.expressions.length - 1],\n                        reportFunc\n                    );\n                    break;\n                case \"ConditionalExpression\":\n                    checkUndefinedShortCircuit(node.consequent, reportFunc);\n                    checkUndefinedShortCircuit(node.alternate, reportFunc);\n                    break;\n                case \"AwaitExpression\":\n                    checkUndefinedShortCircuit(node.argument, reportFunc);\n                    break;\n                case \"ChainExpression\":\n                    reportFunc(node);\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        /**\n         * Checks unsafe usage of optional chaining\n         * @param {ASTNode} node node to check\n         * @returns {void}\n         */\n        function checkUnsafeUsage(node) {\n            checkUndefinedShortCircuit(node, reportUnsafeUsage);\n        }\n\n        /**\n         * Checks unsafe arithmetic operations on optional chaining\n         * @param {ASTNode} node node to check\n         * @returns {void}\n         */\n        function checkUnsafeArithmetic(node) {\n            checkUndefinedShortCircuit(node, reportUnsafeArithmetic);\n        }\n\n        return {\n            \"AssignmentExpression, AssignmentPattern\"(node) {\n                if (isDestructuringPattern(node.left)) {\n                    checkUnsafeUsage(node.right);\n                }\n            },\n            \"ClassDeclaration, ClassExpression\"(node) {\n                checkUnsafeUsage(node.superClass);\n            },\n            CallExpression(node) {\n                if (!node.optional) {\n                    checkUnsafeUsage(node.callee);\n                }\n            },\n            NewExpression(node) {\n                checkUnsafeUsage(node.callee);\n            },\n            VariableDeclarator(node) {\n                if (isDestructuringPattern(node.id)) {\n                    checkUnsafeUsage(node.init);\n                }\n            },\n            MemberExpression(node) {\n                if (!node.optional) {\n                    checkUnsafeUsage(node.object);\n                }\n            },\n            TaggedTemplateExpression(node) {\n                checkUnsafeUsage(node.tag);\n            },\n            ForOfStatement(node) {\n                checkUnsafeUsage(node.right);\n            },\n            SpreadElement(node) {\n                if (node.parent && node.parent.type !== \"ObjectExpression\") {\n                    checkUnsafeUsage(node.argument);\n                }\n            },\n            BinaryExpression(node) {\n                if (UNSAFE_RELATIONAL_OPERATORS.has(node.operator)) {\n                    checkUnsafeUsage(node.right);\n                }\n                if (\n                    disallowArithmeticOperators &&\n                    UNSAFE_ARITHMETIC_OPERATORS.has(node.operator)\n                ) {\n                    checkUnsafeArithmetic(node.right);\n                    checkUnsafeArithmetic(node.left);\n                }\n            },\n            WithStatement(node) {\n                checkUnsafeUsage(node.object);\n            },\n            UnaryExpression(node) {\n                if (\n                    disallowArithmeticOperators &&\n                    UNSAFE_ARITHMETIC_OPERATORS.has(node.operator)\n                ) {\n                    checkUnsafeArithmetic(node.argument);\n                }\n            },\n            AssignmentExpression(node) {\n                if (\n                    disallowArithmeticOperators &&\n                    UNSAFE_ASSIGNMENT_OPERATORS.has(node.operator)\n                ) {\n                    checkUnsafeArithmetic(node.right);\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}