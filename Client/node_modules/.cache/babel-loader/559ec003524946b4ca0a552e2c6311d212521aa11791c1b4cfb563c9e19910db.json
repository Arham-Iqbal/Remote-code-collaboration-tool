{"ast":null,"code":"/**\n * @fileoverview Helpers for severity values (e.g. normalizing different types).\n * @author Bryan Mishkin\n */\n\n\"use strict\";\n\n/**\n * Convert severity value of different types to a string.\n * @param {string|number} severity severity value\n * @throws error if severity is invalid\n * @returns {string} severity string\n */\nfunction normalizeSeverityToString(severity) {\n  if ([2, \"2\", \"error\"].includes(severity)) {\n    return \"error\";\n  }\n  if ([1, \"1\", \"warn\"].includes(severity)) {\n    return \"warn\";\n  }\n  if ([0, \"0\", \"off\"].includes(severity)) {\n    return \"off\";\n  }\n  throw new Error(`Invalid severity value: ${severity}`);\n}\n\n/**\n * Convert severity value of different types to a number.\n * @param {string|number} severity severity value\n * @throws error if severity is invalid\n * @returns {number} severity number\n */\nfunction normalizeSeverityToNumber(severity) {\n  if ([2, \"2\", \"error\"].includes(severity)) {\n    return 2;\n  }\n  if ([1, \"1\", \"warn\"].includes(severity)) {\n    return 1;\n  }\n  if ([0, \"0\", \"off\"].includes(severity)) {\n    return 0;\n  }\n  throw new Error(`Invalid severity value: ${severity}`);\n}\nmodule.exports = {\n  normalizeSeverityToString,\n  normalizeSeverityToNumber\n};","map":{"version":3,"names":["normalizeSeverityToString","severity","includes","Error","normalizeSeverityToNumber","module","exports"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/shared/severity.js"],"sourcesContent":["/**\n * @fileoverview Helpers for severity values (e.g. normalizing different types).\n * @author Bryan Mishkin\n */\n\n\"use strict\";\n\n/**\n * Convert severity value of different types to a string.\n * @param {string|number} severity severity value\n * @throws error if severity is invalid\n * @returns {string} severity string\n */\nfunction normalizeSeverityToString(severity) {\n    if ([2, \"2\", \"error\"].includes(severity)) {\n        return \"error\";\n    }\n    if ([1, \"1\", \"warn\"].includes(severity)) {\n        return \"warn\";\n    }\n    if ([0, \"0\", \"off\"].includes(severity)) {\n        return \"off\";\n    }\n    throw new Error(`Invalid severity value: ${severity}`);\n}\n\n/**\n * Convert severity value of different types to a number.\n * @param {string|number} severity severity value\n * @throws error if severity is invalid\n * @returns {number} severity number\n */\nfunction normalizeSeverityToNumber(severity) {\n    if ([2, \"2\", \"error\"].includes(severity)) {\n        return 2;\n    }\n    if ([1, \"1\", \"warn\"].includes(severity)) {\n        return 1;\n    }\n    if ([0, \"0\", \"off\"].includes(severity)) {\n        return 0;\n    }\n    throw new Error(`Invalid severity value: ${severity}`);\n}\n\nmodule.exports = {\n    normalizeSeverityToString,\n    normalizeSeverityToNumber\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,yBAAyBA,CAACC,QAAQ,EAAE;EACzC,IAAI,CAAC,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,CAACC,QAAQ,CAACD,QAAQ,CAAC,EAAE;IACtC,OAAO,OAAO;EAClB;EACA,IAAI,CAAC,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,CAACC,QAAQ,CAACD,QAAQ,CAAC,EAAE;IACrC,OAAO,MAAM;EACjB;EACA,IAAI,CAAC,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC,CAACC,QAAQ,CAACD,QAAQ,CAAC,EAAE;IACpC,OAAO,KAAK;EAChB;EACA,MAAM,IAAIE,KAAK,CAAC,2BAA2BF,QAAQ,EAAE,CAAC;AAC1D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,yBAAyBA,CAACH,QAAQ,EAAE;EACzC,IAAI,CAAC,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,CAACC,QAAQ,CAACD,QAAQ,CAAC,EAAE;IACtC,OAAO,CAAC;EACZ;EACA,IAAI,CAAC,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,CAACC,QAAQ,CAACD,QAAQ,CAAC,EAAE;IACrC,OAAO,CAAC;EACZ;EACA,IAAI,CAAC,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC,CAACC,QAAQ,CAACD,QAAQ,CAAC,EAAE;IACpC,OAAO,CAAC;EACZ;EACA,MAAM,IAAIE,KAAK,CAAC,2BAA2BF,QAAQ,EAAE,CAAC;AAC1D;AAEAI,MAAM,CAACC,OAAO,GAAG;EACbN,yBAAyB;EACzBI;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}