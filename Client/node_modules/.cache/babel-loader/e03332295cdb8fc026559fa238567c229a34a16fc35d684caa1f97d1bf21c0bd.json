{"ast":null,"code":"/**\n * @fileoverview A rule to warn against using arrow functions when they could be\n * confused with comparisons\n * @author Jxck <https://github.com/Jxck>\n * @deprecated in ESLint v8.53.0\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils.js\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a node is a conditional expression.\n * @param {ASTNode} node node to test\n * @returns {boolean} `true` if the node is a conditional expression.\n */\nfunction isConditional(node) {\n  return node && node.type === \"ConditionalExpression\";\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    deprecated: true,\n    replacedBy: [],\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow arrow functions where they could be confused with comparisons\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/no-confusing-arrow\"\n    },\n    fixable: \"code\",\n    schema: [{\n      type: \"object\",\n      properties: {\n        allowParens: {\n          type: \"boolean\",\n          default: true\n        },\n        onlyOneSimpleParam: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      confusing: \"Arrow function used ambiguously with a conditional expression.\"\n    }\n  },\n  create(context) {\n    const config = context.options[0] || {};\n    const allowParens = config.allowParens || config.allowParens === void 0;\n    const onlyOneSimpleParam = config.onlyOneSimpleParam;\n    const sourceCode = context.sourceCode;\n\n    /**\n     * Reports if an arrow function contains an ambiguous conditional.\n     * @param {ASTNode} node A node to check and report.\n     * @returns {void}\n     */\n    function checkArrowFunc(node) {\n      const body = node.body;\n      if (isConditional(body) && !(allowParens && astUtils.isParenthesised(sourceCode, body)) && !(onlyOneSimpleParam && !(node.params.length === 1 && node.params[0].type === \"Identifier\"))) {\n        context.report({\n          node,\n          messageId: \"confusing\",\n          fix(fixer) {\n            // if `allowParens` is not set to true don't bother wrapping in parens\n            return allowParens && fixer.replaceText(node.body, `(${sourceCode.getText(node.body)})`);\n          }\n        });\n      }\n    }\n    return {\n      ArrowFunctionExpression: checkArrowFunc\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","isConditional","node","type","module","exports","meta","deprecated","replacedBy","docs","description","recommended","url","fixable","schema","properties","allowParens","default","onlyOneSimpleParam","additionalProperties","messages","confusing","create","context","config","options","sourceCode","checkArrowFunc","body","isParenthesised","params","length","report","messageId","fix","fixer","replaceText","getText","ArrowFunctionExpression"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-confusing-arrow.js"],"sourcesContent":["/**\n * @fileoverview A rule to warn against using arrow functions when they could be\n * confused with comparisons\n * @author Jxck <https://github.com/Jxck>\n * @deprecated in ESLint v8.53.0\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils.js\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a node is a conditional expression.\n * @param {ASTNode} node node to test\n * @returns {boolean} `true` if the node is a conditional expression.\n */\nfunction isConditional(node) {\n    return node && node.type === \"ConditionalExpression\";\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        deprecated: true,\n        replacedBy: [],\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow arrow functions where they could be confused with comparisons\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-confusing-arrow\"\n        },\n\n        fixable: \"code\",\n\n        schema: [{\n            type: \"object\",\n            properties: {\n                allowParens: { type: \"boolean\", default: true },\n                onlyOneSimpleParam: { type: \"boolean\", default: false }\n            },\n            additionalProperties: false\n        }],\n\n        messages: {\n            confusing: \"Arrow function used ambiguously with a conditional expression.\"\n        }\n    },\n\n    create(context) {\n        const config = context.options[0] || {};\n        const allowParens = config.allowParens || (config.allowParens === void 0);\n        const onlyOneSimpleParam = config.onlyOneSimpleParam;\n        const sourceCode = context.sourceCode;\n\n\n        /**\n         * Reports if an arrow function contains an ambiguous conditional.\n         * @param {ASTNode} node A node to check and report.\n         * @returns {void}\n         */\n        function checkArrowFunc(node) {\n            const body = node.body;\n\n            if (isConditional(body) &&\n                !(allowParens && astUtils.isParenthesised(sourceCode, body)) &&\n                !(onlyOneSimpleParam && !(node.params.length === 1 && node.params[0].type === \"Identifier\"))) {\n                context.report({\n                    node,\n                    messageId: \"confusing\",\n                    fix(fixer) {\n\n                        // if `allowParens` is not set to true don't bother wrapping in parens\n                        return allowParens && fixer.replaceText(node.body, `(${sourceCode.getText(node.body)})`);\n                    }\n                });\n            }\n        }\n\n        return {\n            ArrowFunctionExpression: checkArrowFunc\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,QAAQ,GAAGC,OAAO,CAAC,sBAAsB,CAAC;;AAEhD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAACC,IAAI,EAAE;EACzB,OAAOA,IAAI,IAAIA,IAAI,CAACC,IAAI,KAAK,uBAAuB;AACxD;;AAEA;AACA;AACA;;AAEA;AACAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,UAAU,EAAE,IAAI;IAChBC,UAAU,EAAE,EAAE;IACdL,IAAI,EAAE,YAAY;IAElBM,IAAI,EAAE;MACFC,WAAW,EAAE,wEAAwE;MACrFC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,OAAO,EAAE,MAAM;IAEfC,MAAM,EAAE,CAAC;MACLX,IAAI,EAAE,QAAQ;MACdY,UAAU,EAAE;QACRC,WAAW,EAAE;UAAEb,IAAI,EAAE,SAAS;UAAEc,OAAO,EAAE;QAAK,CAAC;QAC/CC,kBAAkB,EAAE;UAAEf,IAAI,EAAE,SAAS;UAAEc,OAAO,EAAE;QAAM;MAC1D,CAAC;MACDE,oBAAoB,EAAE;IAC1B,CAAC,CAAC;IAEFC,QAAQ,EAAE;MACNC,SAAS,EAAE;IACf;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,MAAM,GAAGD,OAAO,CAACE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACvC,MAAMT,WAAW,GAAGQ,MAAM,CAACR,WAAW,IAAKQ,MAAM,CAACR,WAAW,KAAK,KAAK,CAAE;IACzE,MAAME,kBAAkB,GAAGM,MAAM,CAACN,kBAAkB;IACpD,MAAMQ,UAAU,GAAGH,OAAO,CAACG,UAAU;;IAGrC;AACR;AACA;AACA;AACA;IACQ,SAASC,cAAcA,CAACzB,IAAI,EAAE;MAC1B,MAAM0B,IAAI,GAAG1B,IAAI,CAAC0B,IAAI;MAEtB,IAAI3B,aAAa,CAAC2B,IAAI,CAAC,IACnB,EAAEZ,WAAW,IAAIjB,QAAQ,CAAC8B,eAAe,CAACH,UAAU,EAAEE,IAAI,CAAC,CAAC,IAC5D,EAAEV,kBAAkB,IAAI,EAAEhB,IAAI,CAAC4B,MAAM,CAACC,MAAM,KAAK,CAAC,IAAI7B,IAAI,CAAC4B,MAAM,CAAC,CAAC,CAAC,CAAC3B,IAAI,KAAK,YAAY,CAAC,CAAC,EAAE;QAC9FoB,OAAO,CAACS,MAAM,CAAC;UACX9B,IAAI;UACJ+B,SAAS,EAAE,WAAW;UACtBC,GAAGA,CAACC,KAAK,EAAE;YAEP;YACA,OAAOnB,WAAW,IAAImB,KAAK,CAACC,WAAW,CAAClC,IAAI,CAAC0B,IAAI,EAAE,IAAIF,UAAU,CAACW,OAAO,CAACnC,IAAI,CAAC0B,IAAI,CAAC,GAAG,CAAC;UAC5F;QACJ,CAAC,CAAC;MACN;IACJ;IAEA,OAAO;MACHU,uBAAuB,EAAEX;IAC7B,CAAC;EACL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}