{"ast":null,"code":"/**\n * @fileoverview Rule to disallow certain object properties\n * @author Will Klein & Eli White\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow certain properties on certain objects\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/no-restricted-properties\"\n    },\n    schema: {\n      type: \"array\",\n      items: {\n        anyOf: [\n        // `object` and `property` are both optional, but at least one of them must be provided.\n        {\n          type: \"object\",\n          properties: {\n            object: {\n              type: \"string\"\n            },\n            property: {\n              type: \"string\"\n            },\n            message: {\n              type: \"string\"\n            }\n          },\n          additionalProperties: false,\n          required: [\"object\"]\n        }, {\n          type: \"object\",\n          properties: {\n            object: {\n              type: \"string\"\n            },\n            property: {\n              type: \"string\"\n            },\n            message: {\n              type: \"string\"\n            }\n          },\n          additionalProperties: false,\n          required: [\"property\"]\n        }]\n      },\n      uniqueItems: true\n    },\n    messages: {\n      // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period\n      restrictedObjectProperty: \"'{{objectName}}.{{propertyName}}' is restricted from being used.{{message}}\",\n      // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period\n      restrictedProperty: \"'{{propertyName}}' is restricted from being used.{{message}}\"\n    }\n  },\n  create(context) {\n    const restrictedCalls = context.options;\n    if (restrictedCalls.length === 0) {\n      return {};\n    }\n    const restrictedProperties = new Map();\n    const globallyRestrictedObjects = new Map();\n    const globallyRestrictedProperties = new Map();\n    restrictedCalls.forEach(option => {\n      const objectName = option.object;\n      const propertyName = option.property;\n      if (typeof objectName === \"undefined\") {\n        globallyRestrictedProperties.set(propertyName, {\n          message: option.message\n        });\n      } else if (typeof propertyName === \"undefined\") {\n        globallyRestrictedObjects.set(objectName, {\n          message: option.message\n        });\n      } else {\n        if (!restrictedProperties.has(objectName)) {\n          restrictedProperties.set(objectName, new Map());\n        }\n        restrictedProperties.get(objectName).set(propertyName, {\n          message: option.message\n        });\n      }\n    });\n\n    /**\n     * Checks to see whether a property access is restricted, and reports it if so.\n     * @param {ASTNode} node The node to report\n     * @param {string} objectName The name of the object\n     * @param {string} propertyName The name of the property\n     * @returns {undefined}\n     */\n    function checkPropertyAccess(node, objectName, propertyName) {\n      if (propertyName === null) {\n        return;\n      }\n      const matchedObject = restrictedProperties.get(objectName);\n      const matchedObjectProperty = matchedObject ? matchedObject.get(propertyName) : globallyRestrictedObjects.get(objectName);\n      const globalMatchedProperty = globallyRestrictedProperties.get(propertyName);\n      if (matchedObjectProperty) {\n        const message = matchedObjectProperty.message ? ` ${matchedObjectProperty.message}` : \"\";\n        context.report({\n          node,\n          messageId: \"restrictedObjectProperty\",\n          data: {\n            objectName,\n            propertyName,\n            message\n          }\n        });\n      } else if (globalMatchedProperty) {\n        const message = globalMatchedProperty.message ? ` ${globalMatchedProperty.message}` : \"\";\n        context.report({\n          node,\n          messageId: \"restrictedProperty\",\n          data: {\n            propertyName,\n            message\n          }\n        });\n      }\n    }\n    return {\n      MemberExpression(node) {\n        checkPropertyAccess(node, node.object && node.object.name, astUtils.getStaticPropertyName(node));\n      },\n      ObjectPattern(node) {\n        let objectName = null;\n        if (node.parent.type === \"VariableDeclarator\") {\n          if (node.parent.init && node.parent.init.type === \"Identifier\") {\n            objectName = node.parent.init.name;\n          }\n        } else if (node.parent.type === \"AssignmentExpression\" || node.parent.type === \"AssignmentPattern\") {\n          if (node.parent.right.type === \"Identifier\") {\n            objectName = node.parent.right.name;\n          }\n        }\n        node.properties.forEach(property => {\n          checkPropertyAccess(node, objectName, astUtils.getStaticPropertyName(property));\n        });\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","items","anyOf","properties","object","property","message","additionalProperties","required","uniqueItems","messages","restrictedObjectProperty","restrictedProperty","create","context","restrictedCalls","options","length","restrictedProperties","Map","globallyRestrictedObjects","globallyRestrictedProperties","forEach","option","objectName","propertyName","set","has","get","checkPropertyAccess","node","matchedObject","matchedObjectProperty","globalMatchedProperty","report","messageId","data","MemberExpression","name","getStaticPropertyName","ObjectPattern","parent","init","right"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-restricted-properties.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow certain object properties\n * @author Will Klein & Eli White\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow certain properties on certain objects\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-restricted-properties\"\n        },\n\n        schema: {\n            type: \"array\",\n            items: {\n                anyOf: [ // `object` and `property` are both optional, but at least one of them must be provided.\n                    {\n                        type: \"object\",\n                        properties: {\n                            object: {\n                                type: \"string\"\n                            },\n                            property: {\n                                type: \"string\"\n                            },\n                            message: {\n                                type: \"string\"\n                            }\n                        },\n                        additionalProperties: false,\n                        required: [\"object\"]\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            object: {\n                                type: \"string\"\n                            },\n                            property: {\n                                type: \"string\"\n                            },\n                            message: {\n                                type: \"string\"\n                            }\n                        },\n                        additionalProperties: false,\n                        required: [\"property\"]\n                    }\n                ]\n            },\n            uniqueItems: true\n        },\n\n        messages: {\n            // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period\n            restrictedObjectProperty: \"'{{objectName}}.{{propertyName}}' is restricted from being used.{{message}}\",\n            // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period\n            restrictedProperty: \"'{{propertyName}}' is restricted from being used.{{message}}\"\n        }\n    },\n\n    create(context) {\n        const restrictedCalls = context.options;\n\n        if (restrictedCalls.length === 0) {\n            return {};\n        }\n\n        const restrictedProperties = new Map();\n        const globallyRestrictedObjects = new Map();\n        const globallyRestrictedProperties = new Map();\n\n        restrictedCalls.forEach(option => {\n            const objectName = option.object;\n            const propertyName = option.property;\n\n            if (typeof objectName === \"undefined\") {\n                globallyRestrictedProperties.set(propertyName, { message: option.message });\n            } else if (typeof propertyName === \"undefined\") {\n                globallyRestrictedObjects.set(objectName, { message: option.message });\n            } else {\n                if (!restrictedProperties.has(objectName)) {\n                    restrictedProperties.set(objectName, new Map());\n                }\n\n                restrictedProperties.get(objectName).set(propertyName, {\n                    message: option.message\n                });\n            }\n        });\n\n        /**\n         * Checks to see whether a property access is restricted, and reports it if so.\n         * @param {ASTNode} node The node to report\n         * @param {string} objectName The name of the object\n         * @param {string} propertyName The name of the property\n         * @returns {undefined}\n         */\n        function checkPropertyAccess(node, objectName, propertyName) {\n            if (propertyName === null) {\n                return;\n            }\n            const matchedObject = restrictedProperties.get(objectName);\n            const matchedObjectProperty = matchedObject ? matchedObject.get(propertyName) : globallyRestrictedObjects.get(objectName);\n            const globalMatchedProperty = globallyRestrictedProperties.get(propertyName);\n\n            if (matchedObjectProperty) {\n                const message = matchedObjectProperty.message ? ` ${matchedObjectProperty.message}` : \"\";\n\n                context.report({\n                    node,\n                    messageId: \"restrictedObjectProperty\",\n                    data: {\n                        objectName,\n                        propertyName,\n                        message\n                    }\n                });\n            } else if (globalMatchedProperty) {\n                const message = globalMatchedProperty.message ? ` ${globalMatchedProperty.message}` : \"\";\n\n                context.report({\n                    node,\n                    messageId: \"restrictedProperty\",\n                    data: {\n                        propertyName,\n                        message\n                    }\n                });\n            }\n        }\n\n        return {\n            MemberExpression(node) {\n                checkPropertyAccess(node, node.object && node.object.name, astUtils.getStaticPropertyName(node));\n            },\n            ObjectPattern(node) {\n                let objectName = null;\n\n                if (node.parent.type === \"VariableDeclarator\") {\n                    if (node.parent.init && node.parent.init.type === \"Identifier\") {\n                        objectName = node.parent.init.name;\n                    }\n                } else if (node.parent.type === \"AssignmentExpression\" || node.parent.type === \"AssignmentPattern\") {\n                    if (node.parent.right.type === \"Identifier\") {\n                        objectName = node.parent.right.name;\n                    }\n                }\n\n                node.properties.forEach(property => {\n                    checkPropertyAccess(node, objectName, astUtils.getStaticPropertyName(property));\n                });\n            }\n        };\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}