{"ast":null,"code":"/**\n * @fileoverview Rule to disallow use of Object.prototype builtins on objects\n * @author Andrew Levine\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Returns true if the node or any of the objects\n * to the left of it in the member/call chain is optional.\n *\n * e.g. `a?.b`, `a?.b.c`, `a?.()`, `a()?.()`\n * @param {ASTNode} node The expression to check\n * @returns {boolean} `true` if there is a short-circuiting optional `?.`\n * in the same option chain to the left of this call or member expression,\n * or the node itself is an optional call or member `?.`.\n */\nfunction isAfterOptional(node) {\n  let leftNode;\n  if (node.type === \"MemberExpression\") {\n    leftNode = node.object;\n  } else if (node.type === \"CallExpression\") {\n    leftNode = node.callee;\n  } else {\n    return false;\n  }\n  if (node.optional) {\n    return true;\n  }\n  return isAfterOptional(leftNode);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"Disallow calling some `Object.prototype` methods directly on objects\",\n      recommended: true,\n      url: \"https://eslint.org/docs/latest/rules/no-prototype-builtins\"\n    },\n    hasSuggestions: true,\n    schema: [],\n    messages: {\n      prototypeBuildIn: \"Do not access Object.prototype method '{{prop}}' from target object.\",\n      callObjectPrototype: \"Call Object.prototype.{{prop}} explicitly.\"\n    }\n  },\n  create(context) {\n    const DISALLOWED_PROPS = new Set([\"hasOwnProperty\", \"isPrototypeOf\", \"propertyIsEnumerable\"]);\n\n    /**\n     * Reports if a disallowed property is used in a CallExpression\n     * @param {ASTNode} node The CallExpression node.\n     * @returns {void}\n     */\n    function disallowBuiltIns(node) {\n      const callee = astUtils.skipChainExpression(node.callee);\n      if (callee.type !== \"MemberExpression\") {\n        return;\n      }\n      const propName = astUtils.getStaticPropertyName(callee);\n      if (propName !== null && DISALLOWED_PROPS.has(propName)) {\n        context.report({\n          messageId: \"prototypeBuildIn\",\n          loc: callee.property.loc,\n          data: {\n            prop: propName\n          },\n          node,\n          suggest: [{\n            messageId: \"callObjectPrototype\",\n            data: {\n              prop: propName\n            },\n            fix(fixer) {\n              const sourceCode = context.sourceCode;\n\n              /*\n               * A call after an optional chain (e.g. a?.b.hasOwnProperty(c))\n               * must be fixed manually because the call can be short-circuited\n               */\n              if (isAfterOptional(node)) {\n                return null;\n              }\n\n              /*\n               * A call on a ChainExpression (e.g. (a?.hasOwnProperty)(c)) will trigger\n               * no-unsafe-optional-chaining which should be fixed before this suggestion\n               */\n              if (node.callee.type === \"ChainExpression\") {\n                return null;\n              }\n              const objectVariable = astUtils.getVariableByName(sourceCode.getScope(node), \"Object\");\n\n              /*\n               * We can't use Object if the global Object was shadowed,\n               * or Object does not exist in the global scope for some reason\n               */\n              if (!objectVariable || objectVariable.scope.type !== \"global\" || objectVariable.defs.length > 0) {\n                return null;\n              }\n              let objectText = sourceCode.getText(callee.object);\n              if (astUtils.getPrecedence(callee.object) <= astUtils.getPrecedence({\n                type: \"SequenceExpression\"\n              })) {\n                objectText = `(${objectText})`;\n              }\n              const openParenToken = sourceCode.getTokenAfter(node.callee, astUtils.isOpeningParenToken);\n              const isEmptyParameters = node.arguments.length === 0;\n              const delim = isEmptyParameters ? \"\" : \", \";\n              const fixes = [fixer.replaceText(callee, `Object.prototype.${propName}.call`), fixer.insertTextAfter(openParenToken, objectText + delim)];\n              return fixes;\n            }\n          }]\n        });\n      }\n    }\n    return {\n      CallExpression: disallowBuiltIns\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","isAfterOptional","node","leftNode","type","object","callee","optional","module","exports","meta","docs","description","recommended","url","hasSuggestions","schema","messages","prototypeBuildIn","callObjectPrototype","create","context","DISALLOWED_PROPS","Set","disallowBuiltIns","skipChainExpression","propName","getStaticPropertyName","has","report","messageId","loc","property","data","prop","suggest","fix","fixer","sourceCode","objectVariable","getVariableByName","getScope","scope","defs","length","objectText","getText","getPrecedence","openParenToken","getTokenAfter","isOpeningParenToken","isEmptyParameters","arguments","delim","fixes","replaceText","insertTextAfter","CallExpression"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-prototype-builtins.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow use of Object.prototype builtins on objects\n * @author Andrew Levine\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Returns true if the node or any of the objects\n * to the left of it in the member/call chain is optional.\n *\n * e.g. `a?.b`, `a?.b.c`, `a?.()`, `a()?.()`\n * @param {ASTNode} node The expression to check\n * @returns {boolean} `true` if there is a short-circuiting optional `?.`\n * in the same option chain to the left of this call or member expression,\n * or the node itself is an optional call or member `?.`.\n */\nfunction isAfterOptional(node) {\n    let leftNode;\n\n    if (node.type === \"MemberExpression\") {\n        leftNode = node.object;\n    } else if (node.type === \"CallExpression\") {\n        leftNode = node.callee;\n    } else {\n        return false;\n    }\n    if (node.optional) {\n        return true;\n    }\n    return isAfterOptional(leftNode);\n}\n\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"Disallow calling some `Object.prototype` methods directly on objects\",\n            recommended: true,\n            url: \"https://eslint.org/docs/latest/rules/no-prototype-builtins\"\n        },\n\n        hasSuggestions: true,\n\n        schema: [],\n\n        messages: {\n            prototypeBuildIn: \"Do not access Object.prototype method '{{prop}}' from target object.\",\n            callObjectPrototype: \"Call Object.prototype.{{prop}} explicitly.\"\n        }\n    },\n\n    create(context) {\n        const DISALLOWED_PROPS = new Set([\n            \"hasOwnProperty\",\n            \"isPrototypeOf\",\n            \"propertyIsEnumerable\"\n        ]);\n\n        /**\n         * Reports if a disallowed property is used in a CallExpression\n         * @param {ASTNode} node The CallExpression node.\n         * @returns {void}\n         */\n        function disallowBuiltIns(node) {\n\n            const callee = astUtils.skipChainExpression(node.callee);\n\n            if (callee.type !== \"MemberExpression\") {\n                return;\n            }\n\n            const propName = astUtils.getStaticPropertyName(callee);\n\n            if (propName !== null && DISALLOWED_PROPS.has(propName)) {\n                context.report({\n                    messageId: \"prototypeBuildIn\",\n                    loc: callee.property.loc,\n                    data: { prop: propName },\n                    node,\n                    suggest: [\n                        {\n                            messageId: \"callObjectPrototype\",\n                            data: { prop: propName },\n                            fix(fixer) {\n                                const sourceCode = context.sourceCode;\n\n                                /*\n                                 * A call after an optional chain (e.g. a?.b.hasOwnProperty(c))\n                                 * must be fixed manually because the call can be short-circuited\n                                 */\n                                if (isAfterOptional(node)) {\n                                    return null;\n                                }\n\n                                /*\n                                 * A call on a ChainExpression (e.g. (a?.hasOwnProperty)(c)) will trigger\n                                 * no-unsafe-optional-chaining which should be fixed before this suggestion\n                                 */\n                                if (node.callee.type === \"ChainExpression\") {\n                                    return null;\n                                }\n\n                                const objectVariable = astUtils.getVariableByName(sourceCode.getScope(node), \"Object\");\n\n                                /*\n                                 * We can't use Object if the global Object was shadowed,\n                                 * or Object does not exist in the global scope for some reason\n                                 */\n                                if (!objectVariable || objectVariable.scope.type !== \"global\" || objectVariable.defs.length > 0) {\n                                    return null;\n                                }\n\n                                let objectText = sourceCode.getText(callee.object);\n\n                                if (astUtils.getPrecedence(callee.object) <= astUtils.getPrecedence({ type: \"SequenceExpression\" })) {\n                                    objectText = `(${objectText})`;\n                                }\n\n                                const openParenToken = sourceCode.getTokenAfter(\n                                    node.callee,\n                                    astUtils.isOpeningParenToken\n                                );\n                                const isEmptyParameters = node.arguments.length === 0;\n                                const delim = isEmptyParameters ? \"\" : \", \";\n                                const fixes = [\n                                    fixer.replaceText(callee, `Object.prototype.${propName}.call`),\n                                    fixer.insertTextAfter(openParenToken, objectText + delim)\n                                ];\n\n                                return fixes;\n                            }\n                        }\n                    ]\n                });\n            }\n        }\n\n        return {\n            CallExpression: disallowBuiltIns\n        };\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}