{"ast":null,"code":"/**\n * @fileoverview Rule to flag nested ternary expressions\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow nested ternary expressions\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/no-nested-ternary\"\n    },\n    schema: [],\n    messages: {\n      noNestedTernary: \"Do not nest ternary expressions.\"\n    }\n  },\n  create(context) {\n    return {\n      ConditionalExpression(node) {\n        if (node.alternate.type === \"ConditionalExpression\" || node.consequent.type === \"ConditionalExpression\") {\n          context.report({\n            node,\n            messageId: \"noNestedTernary\"\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","recommended","url","schema","messages","noNestedTernary","create","context","ConditionalExpression","node","alternate","consequent","report","messageId"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/no-nested-ternary.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag nested ternary expressions\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow nested ternary expressions\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-nested-ternary\"\n        },\n\n        schema: [],\n\n        messages: {\n            noNestedTernary: \"Do not nest ternary expressions.\"\n        }\n    },\n\n    create(context) {\n\n        return {\n            ConditionalExpression(node) {\n                if (node.alternate.type === \"ConditionalExpression\" ||\n                        node.consequent.type === \"ConditionalExpression\") {\n                    context.report({\n                        node,\n                        messageId: \"noNestedTernary\"\n                    });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;;AAEA;AACAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,qCAAqC;MAClDC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,eAAe,EAAE;IACrB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ,OAAO;MACHC,qBAAqBA,CAACC,IAAI,EAAE;QACxB,IAAIA,IAAI,CAACC,SAAS,CAACZ,IAAI,KAAK,uBAAuB,IAC3CW,IAAI,CAACE,UAAU,CAACb,IAAI,KAAK,uBAAuB,EAAE;UACtDS,OAAO,CAACK,MAAM,CAAC;YACXH,IAAI;YACJI,SAAS,EAAE;UACf,CAAC,CAAC;QACN;MACJ;IACJ,CAAC;EACL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}