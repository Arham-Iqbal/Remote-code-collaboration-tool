{"ast":null,"code":"/**\n * @fileoverview enforce a maximum file length\n * @author Alberto Rodríguez\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Creates an array of numbers from `start` up to, but not including, `end`\n * @param {number} start The start of the range\n * @param {number} end The end of the range\n * @returns {number[]} The range of numbers\n */\nfunction range(start, end) {\n  return [...Array(end - start).keys()].map(x => x + start);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Enforce a maximum number of lines per file\",\n      recommended: false,\n      url: \"https://eslint.org/docs/latest/rules/max-lines\"\n    },\n    schema: [{\n      oneOf: [{\n        type: \"integer\",\n        minimum: 0\n      }, {\n        type: \"object\",\n        properties: {\n          max: {\n            type: \"integer\",\n            minimum: 0\n          },\n          skipComments: {\n            type: \"boolean\"\n          },\n          skipBlankLines: {\n            type: \"boolean\"\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      exceed: \"File has too many lines ({{actual}}). Maximum allowed is {{max}}.\"\n    }\n  },\n  create(context) {\n    const option = context.options[0];\n    let max = 300;\n    if (typeof option === \"object\" && Object.prototype.hasOwnProperty.call(option, \"max\")) {\n      max = option.max;\n    } else if (typeof option === \"number\") {\n      max = option;\n    }\n    const skipComments = option && option.skipComments;\n    const skipBlankLines = option && option.skipBlankLines;\n    const sourceCode = context.sourceCode;\n\n    /**\n     * Returns whether or not a token is a comment node type\n     * @param {Token} token The token to check\n     * @returns {boolean} True if the token is a comment node\n     */\n    function isCommentNodeType(token) {\n      return token && (token.type === \"Block\" || token.type === \"Line\");\n    }\n\n    /**\n     * Returns the line numbers of a comment that don't have any code on the same line\n     * @param {Node} comment The comment node to check\n     * @returns {number[]} The line numbers\n     */\n    function getLinesWithoutCode(comment) {\n      let start = comment.loc.start.line;\n      let end = comment.loc.end.line;\n      let token;\n      token = comment;\n      do {\n        token = sourceCode.getTokenBefore(token, {\n          includeComments: true\n        });\n      } while (isCommentNodeType(token));\n      if (token && astUtils.isTokenOnSameLine(token, comment)) {\n        start += 1;\n      }\n      token = comment;\n      do {\n        token = sourceCode.getTokenAfter(token, {\n          includeComments: true\n        });\n      } while (isCommentNodeType(token));\n      if (token && astUtils.isTokenOnSameLine(comment, token)) {\n        end -= 1;\n      }\n      if (start <= end) {\n        return range(start, end + 1);\n      }\n      return [];\n    }\n    return {\n      \"Program:exit\"() {\n        let lines = sourceCode.lines.map((text, i) => ({\n          lineNumber: i + 1,\n          text\n        }));\n\n        /*\n         * If file ends with a linebreak, `sourceCode.lines` will have one extra empty line at the end.\n         * That isn't a real line, so we shouldn't count it.\n         */\n        if (lines.length > 1 && lines[lines.length - 1].text === \"\") {\n          lines.pop();\n        }\n        if (skipBlankLines) {\n          lines = lines.filter(l => l.text.trim() !== \"\");\n        }\n        if (skipComments) {\n          const comments = sourceCode.getAllComments();\n          const commentLines = new Set(comments.flatMap(getLinesWithoutCode));\n          lines = lines.filter(l => !commentLines.has(l.lineNumber));\n        }\n        if (lines.length > max) {\n          const loc = {\n            start: {\n              line: lines[max].lineNumber,\n              column: 0\n            },\n            end: {\n              line: sourceCode.lines.length,\n              column: sourceCode.lines[sourceCode.lines.length - 1].length\n            }\n          };\n          context.report({\n            loc,\n            messageId: \"exceed\",\n            data: {\n              max,\n              actual: lines.length\n            }\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","range","start","end","Array","keys","map","x","module","exports","meta","type","docs","description","recommended","url","schema","oneOf","minimum","properties","max","skipComments","skipBlankLines","additionalProperties","messages","exceed","create","context","option","options","Object","prototype","hasOwnProperty","call","sourceCode","isCommentNodeType","token","getLinesWithoutCode","comment","loc","line","getTokenBefore","includeComments","isTokenOnSameLine","getTokenAfter","Program:exit","lines","text","i","lineNumber","length","pop","filter","l","trim","comments","getAllComments","commentLines","Set","flatMap","has","column","report","messageId","data","actual"],"sources":["C:/Users/iarha/OneDrive/Desktop/React mini/mega project/remotre code collab/Frontend/node_modules/eslint/lib/rules/max-lines.js"],"sourcesContent":["/**\n * @fileoverview enforce a maximum file length\n * @author Alberto Rodríguez\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Creates an array of numbers from `start` up to, but not including, `end`\n * @param {number} start The start of the range\n * @param {number} end The end of the range\n * @returns {number[]} The range of numbers\n */\nfunction range(start, end) {\n    return [...Array(end - start).keys()].map(x => x + start);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Enforce a maximum number of lines per file\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/max-lines\"\n        },\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        type: \"integer\",\n                        minimum: 0\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            max: {\n                                type: \"integer\",\n                                minimum: 0\n                            },\n                            skipComments: {\n                                type: \"boolean\"\n                            },\n                            skipBlankLines: {\n                                type: \"boolean\"\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ],\n        messages: {\n            exceed:\n                \"File has too many lines ({{actual}}). Maximum allowed is {{max}}.\"\n        }\n    },\n\n    create(context) {\n        const option = context.options[0];\n        let max = 300;\n\n        if (\n            typeof option === \"object\" &&\n            Object.prototype.hasOwnProperty.call(option, \"max\")\n        ) {\n            max = option.max;\n        } else if (typeof option === \"number\") {\n            max = option;\n        }\n\n        const skipComments = option && option.skipComments;\n        const skipBlankLines = option && option.skipBlankLines;\n\n        const sourceCode = context.sourceCode;\n\n        /**\n         * Returns whether or not a token is a comment node type\n         * @param {Token} token The token to check\n         * @returns {boolean} True if the token is a comment node\n         */\n        function isCommentNodeType(token) {\n            return token && (token.type === \"Block\" || token.type === \"Line\");\n        }\n\n        /**\n         * Returns the line numbers of a comment that don't have any code on the same line\n         * @param {Node} comment The comment node to check\n         * @returns {number[]} The line numbers\n         */\n        function getLinesWithoutCode(comment) {\n            let start = comment.loc.start.line;\n            let end = comment.loc.end.line;\n\n            let token;\n\n            token = comment;\n            do {\n                token = sourceCode.getTokenBefore(token, {\n                    includeComments: true\n                });\n            } while (isCommentNodeType(token));\n\n            if (token && astUtils.isTokenOnSameLine(token, comment)) {\n                start += 1;\n            }\n\n            token = comment;\n            do {\n                token = sourceCode.getTokenAfter(token, {\n                    includeComments: true\n                });\n            } while (isCommentNodeType(token));\n\n            if (token && astUtils.isTokenOnSameLine(comment, token)) {\n                end -= 1;\n            }\n\n            if (start <= end) {\n                return range(start, end + 1);\n            }\n            return [];\n        }\n\n        return {\n            \"Program:exit\"() {\n                let lines = sourceCode.lines.map((text, i) => ({\n                    lineNumber: i + 1,\n                    text\n                }));\n\n                /*\n                 * If file ends with a linebreak, `sourceCode.lines` will have one extra empty line at the end.\n                 * That isn't a real line, so we shouldn't count it.\n                 */\n                if (lines.length > 1 && lines[lines.length - 1].text === \"\") {\n                    lines.pop();\n                }\n\n                if (skipBlankLines) {\n                    lines = lines.filter(l => l.text.trim() !== \"\");\n                }\n\n                if (skipComments) {\n                    const comments = sourceCode.getAllComments();\n\n                    const commentLines = new Set(comments.flatMap(getLinesWithoutCode));\n\n                    lines = lines.filter(\n                        l => !commentLines.has(l.lineNumber)\n                    );\n                }\n\n                if (lines.length > max) {\n                    const loc = {\n                        start: {\n                            line: lines[max].lineNumber,\n                            column: 0\n                        },\n                        end: {\n                            line: sourceCode.lines.length,\n                            column: sourceCode.lines[sourceCode.lines.length - 1].length\n                        }\n                    };\n\n                    context.report({\n                        loc,\n                        messageId: \"exceed\",\n                        data: {\n                            max,\n                            actual: lines.length\n                        }\n                    });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}